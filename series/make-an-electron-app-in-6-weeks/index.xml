<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Make An Electron App In 6 Weeks on 奇风岁月</title><link>https://travisbikkle.github.io/series/make-an-electron-app-in-6-weeks/</link><description>Recent content in Make An Electron App In 6 Weeks on 奇风岁月</description><generator>Hugo -- gohugo.io</generator><language>zh-hans</language><copyright>Copyright © 2022-{year} Travis Bikkle. All Rights Reserved.</copyright><lastBuildDate>Mon, 29 Jul 2024 10:22:28 +0800</lastBuildDate><atom:link href="https://travisbikkle.github.io/series/make-an-electron-app-in-6-weeks/index.xml" rel="self" type="application/rss+xml"/><item><title>Electron 中文搜索</title><link>https://travisbikkle.github.io/2024/07/chinese-search/</link><pubDate>Mon, 29 Jul 2024 10:22:28 +0800</pubDate><guid>https://travisbikkle.github.io/2024/07/chinese-search/</guid><description>这篇文章快速演示如何使用 js-search, nodejieba（结巴）来在 Electron 中实现中文搜索。
它快速，实时，比你见过的任何一种搜索都快，快到爆浆。
tech version electron 30.0.6 nodejieba 2.6.0 js-search 2.0.1 本文将带你解决在中国大陆使用 npm 镜像及 nodejieba 可能遇到的一系列问题：
npmmirror 中的 nodejieba 包不存在或无法下载 nodejieba 无人维护，不支持在 win11 及 vs studio 2022 版本运行 nodejieba 不支持 typescript 添加依赖 1npm i js-search 2npm i nodejieba@2.6.0 --save-optional --ignore-scripts 为什么 nodejieba 要采取这种方式？因为 nodejieba 是用 c++ 编写，而它的社区已经不活跃了。它的编译脚本会失败。我们需要跳过它的脚本，自己编译。
** 你需要安装 vs studio 2022，并勾选使用 c++ 桌面开发 **。
或者使用下面的 powershell 命令，仅安装需要的组件：
1Invoke-WebRequest -Uri &amp;#39;https://aka.ms/vs/17/release/vs_BuildTools.exe&amp;#39; -OutFile &amp;#34;$env:TEMP\vs_BuildTools.exe&amp;#34; 2 3&amp;amp; &amp;#34;$env:TEMP\vs_BuildTools.exe&amp;#34; --passive --wait --add Microsoft.</description></item><item><title>Aria2 Rpc 使用</title><link>https://travisbikkle.github.io/2024/07/aria2-rpc/</link><pubDate>Mon, 01 Jul 2024 10:18:30 +0800</pubDate><guid>https://travisbikkle.github.io/2024/07/aria2-rpc/</guid><description>本文将演示如何使用 aria2 rpc 开发一个下载模块，注意，这不是一个完整的应用，仅仅是为了给你一些启发。
tech version electron 30.0.6 webpack 5.91.0 nodejs v20.14.0 aria2 1.37.0 React 18.2.0 react-use-websocket 4.8.1 @mui/x-charts/SparkLineChart 7.3.2 aria2 文档 react-use-websocket 文档
成品演示 加载并启动 aria2 怎么将 aria2 集成到你的项目中 你可以要求你的用户自行安装 aria2c.exe，或者将 aria2c.exe 直接打包到你的项目中。
如果你采用后者，下面是一些示例。
假设你的工程目录是：
1src 2build 3 |-- aria2c.exe 4package.json 打包 下面是一个使用 Electron Builder 的示例，它将 build/aria2c.exe 拷贝到安装后的根目录。
1&amp;#34;scripts&amp;#34;: { 2 &amp;#34;dev&amp;#34;: &amp;#34;xxxxxxx&amp;#34; 3}, 4&amp;#34;build&amp;#34;: { 5 &amp;#34;extraFiles&amp;#34;: [ 6 { 7 &amp;#34;from&amp;#34;: &amp;#34;build/aria2c.exe&amp;#34;, 8 &amp;#34;to&amp;#34;: &amp;#34;&amp;#34; 9 }, 10} 将它放到 package.</description></item><item><title>Electron 源码保护</title><link>https://travisbikkle.github.io/2024/06/electron-bytecode/</link><pubDate>Sat, 29 Jun 2024 10:15:44 +0800</pubDate><guid>https://travisbikkle.github.io/2024/06/electron-bytecode/</guid><description>这是一个示例，演示如何快速在你的 Electron 项目中启用字节码保护，没有多余的废话。
环境 tech version electron 30.0.6 webpack 5.91.0 @herberttn/bytenode-webpack-plugin 2.3.1 nodejs v20.14.0 步骤 Webpack 配置 参考文档
1// 引入依赖 2const { BytenodeWebpackPlugin } = require(&amp;#39;@herberttn/bytenode-webpack-plugin&amp;#39;); 3// 在生产环境启用 4const isEnvProduction = process.env.NODE_ENV === &amp;#39;production&amp;#39;; 5... 6plugins: [ 7 isEnvProduction &amp;amp;&amp;amp; new BytenodeWebpackPlugin({ compileForElectron: true }), 8], 9... 10// main，preload，renderer 需要更改 entry 配置。我使用了 webpack-merge，如果你没有使用，忽略即可。 11// main 12const mainConfig = merge(commonConfig, { 13 // entry: &amp;#39;./src/main/main.ts&amp;#39;, 14 entry: { 15 main: &amp;#39;./src/main/main.ts&amp;#39;, 16 }, 17 target: &amp;#39;electron-main&amp;#39;, 18 output: { 19 filename: &amp;#39;[name].</description></item></channel></rss>