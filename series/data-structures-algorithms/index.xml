<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Data Structures &amp; Algorithms on 奇风岁月</title><link>https://travisbikkle.github.io/series/data-structures-algorithms/</link><description>Recent content in Data Structures &amp; Algorithms on 奇风岁月</description><generator>Hugo -- gohugo.io</generator><language>zh-hans</language><copyright>Copyright © 2022-{year} Travis Bikkle. All Rights Reserved.</copyright><lastBuildDate>Mon, 01 May 2023 11:24:02 +0800</lastBuildDate><atom:link href="https://travisbikkle.github.io/series/data-structures-algorithms/index.xml" rel="self" type="application/rss+xml"/><item><title>数据结构</title><link>https://travisbikkle.github.io/2023/05/data-structure/</link><pubDate>Mon, 01 May 2023 11:24:02 +0800</pubDate><guid>https://travisbikkle.github.io/2023/05/data-structure/</guid><description>Doubly Linked List 什么是双向链表 双向链表是一种特殊的链表，其中的每个节点都包含前一个和后一个节点的引用。 下面是一个双向链表的简单示例：
1// Class for Doubly Linked List 2public class DLL { 3 // Head of list 4 Node head; 5 // Doubly Linked list Node 6 class Node { 7 int data; 8 Node prev; 9 Node next; 10 // Constructor to create a new node 11 // next and prev is by default initialized as null 12 Node(int d) { data = d; } 13 } 14} 1# Node of a doubly linked list 2class Node: 3 def __init__(self, next=None, prev=None, data=None): 4 # reference to next node in DLL 5 self.</description></item></channel></rss>