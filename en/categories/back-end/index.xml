<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Back-End on Boy's Life</title><link>https://travisbikkle.github.io/en/categories/back-end/</link><description>Recent content in Back-End on Boy's Life</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Copyright Â© 2022-{year} Travis Bikkle. All Rights Reserved.</copyright><lastBuildDate>Mon, 29 Jul 2024 10:21:11 +0800</lastBuildDate><atom:link href="https://travisbikkle.github.io/en/categories/back-end/index.xml" rel="self" type="application/rss+xml"/><item><title>How to limit request frequency in Java</title><link>https://travisbikkle.github.io/en/2024/07/request-limit/</link><pubDate>Mon, 29 Jul 2024 10:21:11 +0800</pubDate><guid>https://travisbikkle.github.io/en/2024/07/request-limit/</guid><description>Certainly we want to limit the frequency of user visits, because users could get angry, and angry people will click on our app like crazy.
They could also be very bad and use some crawler to try to bring down our server.
So how to do that?
In this article, we use springboot and log the user&amp;rsquo;s information and access frequency into redis, you can also store it into memory or database.</description></item><item><title>Oauth2 Single Login</title><link>https://travisbikkle.github.io/en/2024/07/oauth2-single-login/</link><pubDate>Fri, 19 Jul 2024 10:20:30 +0800</pubDate><guid>https://travisbikkle.github.io/en/2024/07/oauth2-single-login/</guid><description>Sometimes we want users to be able to log in to their accounts on only one device (we&amp;rsquo;re too stingy).
How can we achieve this using springboot security and oauth2?
Note that this article will not take you through the implementation of oauth2 login using spring security, but merely discuss our miserly requirement.
Suppose we have a custom authentication implementation class like this:
1public class RedisOAuth2AuthorizationService implements OAuth2AuthorizationService { 2 3	private final static Long TIMEOUT = 10L; 4 5	private static final String AUTHORIZATION = &amp;#34;token&amp;#34;; 6 7	private final RedisTemplate&amp;lt;String, Object&amp;gt; redisTemplate; 8 9	@Override 10	public void save(OAuth2Authorization authorization) { 11 // is refresh token mode or code mode 12 // .</description></item><item><title>Get User Real Ip</title><link>https://travisbikkle.github.io/en/2024/07/get-user-real-ip/</link><pubDate>Mon, 15 Jul 2024 10:20:57 +0800</pubDate><guid>https://travisbikkle.github.io/en/2024/07/get-user-real-ip/</guid><description>It&amp;rsquo;s a pretty simple question, but in the process of information dissemination, some mistakes happen.
For example, some people will say, just configure X-Real-Ip, and that&amp;rsquo;s it.
Or some people will ask, what is the difference between X-Real-Ip and X-Forward-For, and what is the principle?
Obviously, they misunderstood X-Real-Ip.
This article will show you what X-Real-Ip is.
Quick Answer X-Real-Ip is nothing. You can use My-Real-Ip, His-Real-Ip, whatever.
1server { 2 .</description></item></channel></rss>