<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Front-End on Boy's Life</title><link>https://travisbikkle.github.io/en/categories/front-end/</link><description>Recent content in Front-End on Boy's Life</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Copyright © 2022-{year} Travis Bikkle. All Rights Reserved.</copyright><lastBuildDate>Mon, 29 Jul 2024 10:22:28 +0800</lastBuildDate><atom:link href="https://travisbikkle.github.io/en/categories/front-end/index.xml" rel="self" type="application/rss+xml"/><item><title>Electron Chinese Search</title><link>https://travisbikkle.github.io/en/2024/07/chinese-search/</link><pubDate>Mon, 29 Jul 2024 10:22:28 +0800</pubDate><guid>https://travisbikkle.github.io/en/2024/07/chinese-search/</guid><description>This is a quick demo of how to use js-search, nodejieba to implement Chinese search in Electron.
It&amp;rsquo;s fast, real-time, faster than any other chinese search solutions, fast like never before.
tech version electron 30.0.6 nodejieba 2.6.0 js-search 2.0.1 This article will walk you through a number of issues you may encounter when using npm mirrors and nodejieba in mainland China:
nodejieba package in npmmirror.com does not exist or cannot be downloaded.</description></item><item><title>Aria2 Rpc</title><link>https://travisbikkle.github.io/en/2024/07/aria2-rpc/</link><pubDate>Mon, 01 Jul 2024 10:18:30 +0800</pubDate><guid>https://travisbikkle.github.io/en/2024/07/aria2-rpc/</guid><description>This article will demonstrate how to develop a download module using aria2 rpc, note that code provided in this article is not a complete application, just to give you some inspiration.
tech version electron 30.0.6 webpack 5.91.0 nodejs v20.14.0 aria2 1.37.0 React 18.2.0 react-use-websocket 4.8.1 @mui/x-charts/SparkLineChart 7.3.2 aria2 docs react-use-websocket docs
Demonstration of the finished project Package and start aria2 How to integrate aria2 into your project You can either ask your users to install aria2c.</description></item><item><title>Electron Source Code Protection</title><link>https://travisbikkle.github.io/en/2024/06/electron-bytecode/</link><pubDate>Sat, 29 Jun 2024 10:15:44 +0800</pubDate><guid>https://travisbikkle.github.io/en/2024/06/electron-bytecode/</guid><description>Here is a quick example to show how to enable byte code protection in your Electron project.
Environment tech version electron 30.0.6 webpack 5.91.0 @herberttn/bytenode-webpack-plugin 2.3.1 nodejs v20.14.0 Steps Webpack Configuration Reference
1// import plugin 2const { BytenodeWebpackPlugin } = require(&amp;#39;@herberttn/bytenode-webpack-plugin&amp;#39;); 3// enable only in production 4const isEnvProduction = process.env.NODE_ENV === &amp;#39;production&amp;#39;; 5... 6plugins: [ 7 isEnvProduction &amp;amp;&amp;amp; new BytenodeWebpackPlugin({ compileForElectron: true }), 8], 9... 10// main，preload，renderer entry. I used webpack-merge, if you didn&amp;#39;t, ignore it.</description></item><item><title>Mocking webpack 5 in 10 minutes</title><link>https://travisbikkle.github.io/en/2024/03/2024-03-15-webpack-react-mock/</link><pubDate>Fri, 15 Mar 2024 11:13:53 +0800</pubDate><guid>https://travisbikkle.github.io/en/2024/03/2024-03-15-webpack-react-mock/</guid><description>No nonsense, let&amp;rsquo;s get straight to the point. I&amp;rsquo;m using webpack 5.90.3 and here is my configuration for mocking.
File structure
1project_root/ 2 |-- webpack.config.js 3 |-- mockserver.js 4 |-- mock/ 5 |-- user.js webpack.config.js
Tip
express.js doesn&amp;rsquo;t bundle with some plugins anymore so you need to run npm i -D body-parser. You will need body-parser to read params from request.
1const webpack = require(&amp;#34;webpack&amp;#34;); 2var bodyParser = require(&amp;#39;body-parser&amp;#39;) 3const mockServer = require(&amp;#34;.</description></item></channel></rss>