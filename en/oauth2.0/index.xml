<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>oauth2.0 on Boy's Life</title><link>https://travisbikkle.github.io/en/oauth2.0/</link><description>Recent content in oauth2.0 on Boy's Life</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Copyright Â© 2022-{year} Travis Bikkle. All Rights Reserved.</copyright><lastBuildDate>Fri, 19 Jul 2024 10:20:30 +0800</lastBuildDate><atom:link href="https://travisbikkle.github.io/en/oauth2.0/index.xml" rel="self" type="application/rss+xml"/><item><title>Oauth2 Single Login</title><link>https://travisbikkle.github.io/en/2024/07/oauth2-single-login/</link><pubDate>Fri, 19 Jul 2024 10:20:30 +0800</pubDate><guid>https://travisbikkle.github.io/en/2024/07/oauth2-single-login/</guid><description>Sometimes we want users to be able to log in to their accounts on only one device (we&amp;rsquo;re too stingy).
How can we achieve this using springboot security and oauth2?
Note that this article will not take you through the implementation of oauth2 login using spring security, but merely discuss our miserly requirement.
Suppose we have a custom authentication implementation class like this:
1public class RedisOAuth2AuthorizationService implements OAuth2AuthorizationService { 2 3	private final static Long TIMEOUT = 10L; 4 5	private static final String AUTHORIZATION = &amp;#34;token&amp;#34;; 6 7	private final RedisTemplate&amp;lt;String, Object&amp;gt; redisTemplate; 8 9	@Override 10	public void save(OAuth2Authorization authorization) { 11 // is refresh token mode or code mode 12 // .</description></item></channel></rss>