<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>博客 on 奇风岁月</title><link>https://travisbikkle.github.io/zh-hant/</link><description>Recent content in 博客 on 奇风岁月</description><generator>Hugo -- gohugo.io</generator><language>zh-hant</language><lastBuildDate>Sun, 26 Feb 2023 18:24:31 +0800</lastBuildDate><atom:link href="https://travisbikkle.github.io/zh-hant/index.xml" rel="self" type="application/rss+xml"/><item><title>使用 cdn 低成本加速網站，或解決443和80端口被封問題</title><link>https://travisbikkle.github.io/zh-hant/2024/10/how-to-proxy-with-cdn/</link><pubDate>Fri, 04 Oct 2024 11:24:31 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2024/10/how-to-proxy-with-cdn/</guid><description>CDN是個好東西，我們一般需要使用CDN，來讓我們的網站能夠在全球都能快速訪問，並且降低服務器壓力，防止DDOS攻擊等。
簡單來說，你把你的域名的CNAME(如a.example.com) 指向CDN廠商的域名(如abc.cloudfront.net)。
用戶訪問a.example.com的時候，實際上訪問的是abc.cloudfront.net。abc.cloudfront.net上面當然沒有你的站點資源，所以會回頭訪問你配置的源站（這一步叫做回源）拉取資源，並存儲到本地（這一步叫做緩存）。
你也可以在站點發布後，第一時間讓CDN拉取站點資源，並下發到它位於全球的站點，防止用戶在高峯期一窩蜂地訪問過來，導致源站壓力過大。這一步叫做預熱。
用戶訪問CDN廠商的域名，CDN會分配個給用戶最近的站點，這樣用戶訪問的速度也快了。
CDN還支持指定回源的協議和端口，本文後面將會提及，這對使用家庭寬帶部署服務並且443和80端口被封鎖的用戶非常有幫助。
雖然我測試的域名在騰訊雲，但是我並沒有使用騰訊雲的cdn服務，因爲在選擇試用的時候，騰訊雲提示我沒有資格。
於是我只測試了cloudflare，aws，阿里雲的cdn服務，並在此記錄下來過程和配置，希望能夠幫助有需要的人。
Cloudflare 右上角點 Add site，增加你的域名，按照推薦的配置即可 將Cloudflare分配的DNS服務器地址增加到域名註冊商 無需刪除原來的DNS服務器，你的域名可以擁有多個DNS服務器。
Cloudflare會自動檢測你的域名是否添加到了指定的DNS服務器，成功後會發送郵件。如果你要手動檢測，一個小時最多隻能檢測一次。
添加成功後，在此處添加DNS記錄 如果你的靜態頁面部署在 Cloudflare，可以直接使用如下配置，將 a.example.com 指向 mypage.pages.dev 如果希望將 *.example.com，比如 a.example.com b.example.com 指向一個自建的服務器
增加這樣一條DNS記錄：
如果源站的端口不是80和443，比如是1080和1443
增加一條Origin Rule，將80轉發到源站的1080
增加一條Origin Rule，將443轉發到源站的1443
HTTPS 配置
此處的HTTPS，主要是指CDN和源站之間的通訊。由Cloudflare生成證書，你的源站以該證書啓動服務。
如果你的網站只是靜態頁面，比如個人博客，那麼不用配置HTTPS。
在SSL/TLS-Origin Server中，生成源站的證書，並點擊下載，將該證書配置到你的服務器（略）。 在SSL/TLS-Overview中，點擊Configure，選擇Full(Strict)即可。
好了，現在可以使用如下命令，測試 a.example.com 是否被 Cloudflare 代理了
dig a.example.com 阿里雲 阿里雲的 CDN 服務，現在叫做邊緣安全加速ESA（202410）。並且如果你的源站端口不是默認的80和443端口，其中一個必要的步驟，是要提工單才能完成。
假設我們仍然希望將 *.example.com，比如 a.example.com b.example.com 指向一個自建的服務器 gateway.myserver.com:
點擊全站分發服務，域名管理，添加域名
這一步驟需要驗證 example.com 的域名所有權，按提示操作即可。
在下面新增源站信息中，添加源站，選擇你的源站端口80或者443
注意，如果你的源站端口不是80或者443，此處先隨便選擇一個端口（阿里的界面操作邏輯是比較凌亂的）。
開啓自定義端口
在域名管理處，點擊配置，在如下兩處開啓兩個配置（自己選擇是HTTP還是HTTPS，不要直接看圖照搬）
注意，阿里的HTTPS是按次收費的。
此時在基本配置中，編輯源站信息，可以看到可以填寫自定義端口了 但是，經過測試，這沒什麼用，你還要點擊右上角的工單，給阿里雲的工程師提工單，等待工程師給你開通自定義端口的配置。
我看到阿里雲的文檔說明，這是一個必要的步驟。我不明白爲什麼要有提工單才能完成的操作。
所幸工程師們的響應比較快，如果你描述的清楚，半天也能搞定。</description></item><item><title>如何爲大疆mavic mini更換機臂</title><link>https://travisbikkle.github.io/zh-hant/2024/09/how-to-replace-dji-mavic-mini-arm/</link><pubDate>Sat, 28 Sep 2024 11:24:31 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2024/09/how-to-replace-dji-mavic-mini-arm/</guid><description>兒子的無人機摔斷了左前臂，之前一直用膠水粘着，趁着放假前，趕緊給他修一修。
所需材料 螺絲刀（商家贈送） 翹片或一張廢棄的銀行卡 鑷子 電烙鐵、焊錫與松香 可能需要膠水，以及電工膠布 小心與耐心 步驟 擰掉上蓋螺絲 使用翹片或者一張銀行卡，將上蓋移除
爲了避免將上蓋的卡扣翹斷，請提前參考以下幾張圖，做到心中有數：
側面：
擰掉底蓋螺絲
同樣，請參考底蓋的卡扣，不要將底蓋的卡扣翹斷
擰掉底部黑色蓋板的螺絲，將蓋板拆除，用鑷子拔掉天線
用電烙鐵將機臂與機身連接的3根線點掉
將機臂與機身連接的結構件螺絲擰掉，並從另一邊用螺絲刀將該紅圈圈住的位置頂出來，即可卸掉機臂
將機臂的天線，槳葉，馬達背面的螺絲，和機臂的覆蓋面拆除
好了，現在可以將機臂整個卸掉了。
記住，將三條馬達線從機身拽出的時候，需要去除粘在線上的膠水。小心一點，不要像我一樣，把線剪斷了。
如果你不小心把線剪斷了，可以用電烙鐵焊回去，用電工膠布包好。
將天線、馬達穿入新的機臂。將天線穿回底部，接回原來的位置。將馬達線焊回原來的位置。
由於焊點非常近，如果你像我一樣不是專業的人員，建議多在別的地方練習一下，如果你把兩個焊點焊到了一起，不要放棄，儘快將焊錫重新點走。
我相信你一定會比我焊的好：
最難的一步來了，將機臂與機身的結構件裝回去。注意將機臂放置到如圖的角度，然後將結構件用力按回去。
注意，不要讓天線和馬達線擋住結構件
在安裝上下蓋之前，將馬達、天線和槳葉裝回，測試功能是否正常。
在安裝天線的時候，可以用雙面膠固定。
測試項包括：
馬達是否正常，是否能正常起飛，起飛和下落的時候飛機是否傾斜。
功能測試完畢後，以此將底部蓋板，底殼，上殼裝回。</description></item><item><title>使用 Coder 打造自己的雲開發環境（在中國大陸）</title><link>https://travisbikkle.github.io/zh-hant/2024/08/coder-how-to/</link><pubDate>Fri, 30 Aug 2024 11:24:28 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2024/08/coder-how-to/</guid><description>使用場景 你需要在不同的開發環境中來回切換 你有很多臺電腦，你需要在這些電腦上安裝完全一樣的開發環境 你出去遊玩，手裏只有一臺平板電腦，但是你的項目出現問題需要緊急修改一部分代碼 你是一名開發體驗提升工程師（這個崗位是我編的，一般指大公司裏面那些專門爲開發人員開發工具的開發人員），需要幫助用戶隨時按需創建完整的開發環境 你希望瞭解類似於亞馬遜、騰訊雲是如何快速生成你需要的服務器或輕量服務器 你單純的喜歡折騰 Coder 是什麼 Coder 基於 Terraform，但是聲稱不需要深入瞭解 Terraform 就可以使用 Coder。
Terraform 是什麼呢？它是一個使用少量配置文件就能在各種雲服務商（provider）生成節點的 Infrastructure as Code 工具。
它充當你和騰訊雲、亞馬遜雲之間的一箇中間人，你只需要提供配置（可複用，module），描述你需要什麼樣的節點，以及你的一些登錄憑證，它就能幫你創建實例。
在社區裏面有將近數百種種 provider，阿里雲、騰訊雲都在裏面。你也可以寫provider，對接任意服務商，包括本機部署的k8s或者僅僅一個docker也行， 當然，少不了本文的重點proxmox（pve）。
那我們爲什麼不去直接使用 Terraform？ Coder 在 terraform 基礎上做了一些對人類友好的工作，比如一個簡單的web界面（你可以通過配置文件自定義web界面的菜單、輸入窗口）， 一些用戶、權限管理（企業版支持）、一些模板、一個工作空間管理界面，你還可以直接打開命令行窗口、code server（在線版的vscode）。
個人開發者爲什麼不選擇dev containers？ 首先，其實 coder 支持 dev containers。
其次，在一些你無法安裝 docker 的場景，或者你不希望在自己漂亮的 mac 或 win 系統中安裝docker，那麼 coder 就很適合你。
Coder 的概念 你可以根據 Templates 創建 Workspace，Workspace 就是你的開發環境。
你在 Templates 中可以定義開發環境將部署在 aws 或是你的一臺 pve 上，並且還能定義參數，在創建 Workspace 的時候輸入 cpu 個數或內存大小等。
甚至還能定義 Workspace 的健康狀態檢查，並顯示到前臺界面上。</description></item><item><title>OS 開發備忘3</title><link>https://travisbikkle.github.io/zh-hant/2024/08/osdev-memo3/</link><pubDate>Fri, 23 Aug 2024 17:32:12 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2024/08/osdev-memo3/</guid><description>多任務 Preemptive Multitasking 搶佔式多任務 核心思想是操作系統控制什麼時候切換任務。
第一行中，CPU 正在執行程序 A 的任務 A1。在第二行中，CPU 收到一個硬件中斷。如硬件中斷一文所述， CPU 會立即停止執行任務 A1，並跳轉到中斷描述符表 (IDT) 中定義的中斷處理程序。通過該中斷處理程序， 操作系統現在可以再次控制 CPU，從而切換到任務 B1，而不是繼續執行任務 A1。
保存狀態 由於任務會在任意時間點被中斷，它們可能正在進行某些計算。爲了能在稍後恢復任務，操作系統必須備份任務的整個狀態， 包括其調用堆棧（call stack）和所有 CPU 寄存器（cpu register）的值。這個過程稱爲上下文切換（context switch）。
由於調用堆棧可能非常龐大，操作系統通常會爲每個任務建立單獨的調用堆棧，而不是在每個任務切換時備份調用堆棧內容。 這種擁有自己堆棧的任務稱爲執行線程（thread of execution），簡稱線程（thread）。 通過爲每個任務使用單獨的堆棧，在上下文切換時只需保存寄存器內容（包括程序計數器和堆棧指針）。 這種方法最大限度地減少了上下文切換的性能開銷，這一點非常重要，因爲上下文切換通常每秒會發生 100 次。
優缺點 優點：
操作系統保證 cpu 分配時間公平 缺點：
每個程序需要保存單獨的 stack，浪費內存 操作系統需要爲每次切換保存 cpu register 狀態，即使任務只用了很少一部分 register Cooperative Multitasking 協作式多任務 核心思想是程序可以主動交出 cpu 控制權。
保存狀態 由於任務自己定義暫停點，因此它們不需要操作系統來保存狀態。 相反，它們可以在自己暫停之前準確保存繼續運行所需的狀態，這通常會帶來更好的性能。 例如，Rust 的 async/await 實現會將所有仍需使用的局部變量存儲在自動生成的結構體中（見下文）。
通過在暫停前備份調用棧的相關部分，所有任務都可以共享一個調用棧，從而大大降低了每個任務的內存消耗。這樣就可以創建幾乎任意數量的任務，而不會耗盡內存。
優缺點 優點：
性能高 缺點：
一些任務可能佔有全部資源，其它任務獲取不到 cpu 時間 rust 中的 async/await Future Future 代表一個現在還不能用的值。</description></item><item><title>OS 開發備忘2</title><link>https://travisbikkle.github.io/zh-hant/2024/08/osdev-memo2/</link><pubDate>Tue, 20 Aug 2024 17:32:12 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2024/08/osdev-memo2/</guid><description>實現堆內存 本地變量與棧內存 outer 方法調用 inner 方法的棧，從上至下。 inner 方法執行完成後。 靜態變量 靜態變量存儲在獨立於堆棧的固定內存位置。
該內存位置在編譯時由鏈接器分配，並在可執行文件中編碼。
動態內存 本地變量只生存於作用域內，靜態變量全局可用、不能夠回收、所有權不清晰。
兩者都有一個固定的大小，所以無法存儲會動態增長的變量。
爲了解決這些問題，編程語言都會引入第三塊內存區域： heap。
假設使用 allocate 和 deallocate 來分配和釋放內存：
在調用 deallocate 之後，內存變成如下圖所示：
所以相對於靜態變量來說，z[1] 這塊內存區域，我們可以複用。
但是 z[0] 和 z[2] 永遠不釋放，這就造成了內存泄漏。
其它錯誤 除了內存泄漏，但它並不會使我們的程序更易受到攻擊，還有兩種類型的錯誤會有更嚴重的後果：
use-after-free: 在 deallocate 之後嘗試使用這個變量，這種錯誤會導致無法預料的行爲，經常被攻擊者利用來執行任意代碼。 double-free: 釋放兩次，可能會釋放掉一個在 deallocate 之後又重新分配的地址，也有可能導致 use-after-free 問題。 即使是最好的程序員，也無法永遠不出錯誤地處理這些分配和釋放流程，而且每年都會有新的錯誤， 比如可以在搜索引擎嘗試搜索 use-after-free 2024，你可以把 2024 換成當年的年份。
爲了解決這些問題，java 和 python 會使用垃圾回收機制，核心思想是，編碼者無需手動寫 allocate 和 deallocate，而是定時暫停、 掃描程序中未使用的堆變量，然後釋放掉這些內存。這樣，以上錯誤就不會再出現，缺點是定時掃描導致的性能開銷，以及長時間的暫停。
rust 使用了不一樣的解決方法：它使用所有權設計，來在編譯時檢查動態內存操作的正確性，於是rust消滅了垃圾回收，當然也就沒有性能開銷了。 另一個好處是，編碼者仍然對內存擁有細粒度的控制，就像 C、C++，缺點就是你會有很多編譯錯誤需要解決。
rust 中的分配 Rust 中最重要的類型之一是 Box，它其實是堆變量的封裝，使用 Box::new 接收一個變量，執行 allocate 分配一個變量大小的區域，然後將變量 的值轉移到堆中。要釋放這塊區域，Box 中還有 Drop 特質，它會調用 deallocate。</description></item><item><title>OS 開發備忘</title><link>https://travisbikkle.github.io/zh-hant/2024/08/osdev-memo/</link><pubDate>Wed, 07 Aug 2024 17:32:12 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2024/08/osdev-memo/</guid><description>顯示（VGA TEXT MODE） 要在 VGA 文本模式下將字符打印到屏幕上，必須將其寫入 VGA 硬件的文本緩衝區。 VGA 文本緩衝區是一個二維數組，通常有 25 行 80 列，可直接渲染到屏幕上。 每個數組條目通過以下格式描述一個屏幕字符： Bit(s) Value 0-7 ASCII 字符，8bit 8-11 前景色，4bit 12-14 背景色，3bit 15 閃爍，1bit 如何設計（僞代碼）： 1#[derive(Debug, Clone, Copy, PartialEq, Eq)] 2#[repr(u8)] 3pub enum Color { 4 Black = 0, 5 Blue = 1, 6 Green = 2, 7 // 藍綠 8 Cyan = 3, 9 Red = 4, 10 // 洋紅 11 Magenta = 5, 12 Brown = 6, 13 LightGray = 7, 14 DarkGray = 8, 15 .</description></item><item><title>Webview2 Tauri 繞過 CORS</title><link>https://travisbikkle.github.io/zh-hant/2024/08/tauri-bypass-cors/</link><pubDate>Wed, 07 Aug 2024 17:32:12 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2024/08/tauri-bypass-cors/</guid><description>item version tauri 2.0.0-rc 前提 當你在 foo.com 使用 js 來訪問 bar.com/api 的時候，你可能會遇到下面這樣的錯誤（但你能夠使用 curl 訪問它）：
1Access to fetch at &amp;#39;bar.com/api&amp;#39; 2from origin &amp;#39;foo.com&amp;#39; has been blocked by CORS policy: 3No &amp;#39;Access-Control-Allow-Origin&amp;#39; header is present on the requested resource. 4If an opaque response serves your needs, set the request&amp;#39;s mode to &amp;#39;no-cors&amp;#39; to fetch the resource with CORS disabled. 首先你需要了解幾個概念：
什麼是 CORS
https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS
什麼是 CORS 預檢請求，爲什麼在 js 中使用 fetch 等會會觸發CORS檢查？以及什麼是 OPTION 操作？</description></item><item><title>Tauri 使用 vue-devtools</title><link>https://travisbikkle.github.io/zh-hant/2024/08/2024-08-05-auri/</link><pubDate>Mon, 05 Aug 2024 16:07:11 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2024/08/2024-08-05-auri/</guid><description>Tauri 號稱不強迫開發者（un-opinionated）、不依賴具體前端框架的（agnostic）桌面應用框架，Vue又以其簡單易上手的特點在開發者中非常流行。
Vue Devtools 是一款可以在瀏覽器控制檯中顯示 vue 程序詳情的小工具。
今天我們將它們結合起來，演示如何在一個新項目中配置 Vue Devtools.
前提 使用腳手架命令創建應用。
1cargo install create-tauri-app 2cargo create-tauri-app --rc 或
1pnpm create tauri-app --rc https://v2.tauri.app/start/create-project/
安裝 Vue Devtools windows
1$env:ELECTRON_CUSTOM_DIR=&amp;#34;&amp;#34;; npm install -g @vue/devtools linux or macos
1export ELECTRON_CUSTOM_DIR=&amp;#34;&amp;#34; 2npm install -g @vue/devtools 使用 Vue Devtools 啓動 Vue Devtools 1vue-devtools 或將該命令加入到 package.json 中
1 &amp;#34;scripts&amp;#34;: { 2 ... 3 &amp;#34;vue:dev-tools&amp;#34;: &amp;#34;vue-devtools&amp;#34;, 4 ... 5 } 引入 Vue Devtools 在 index.html 中引入。</description></item><item><title>Electron 中文搜索</title><link>https://travisbikkle.github.io/zh-hant/2024/07/chinese-search/</link><pubDate>Mon, 29 Jul 2024 10:22:28 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2024/07/chinese-search/</guid><description>這篇文章快速演示如何使用 js-search, nodejieba（結巴）來在 Electron 中實現中文搜索。
它快速，實時，比你見過的任何一種搜索都快，快到爆漿。
tech version electron 30.0.6 nodejieba 2.6.0 js-search 2.0.1 本文將帶你解決在中國大陸使用 npm 鏡像及 nodejieba 可能遇到的一系列問題：
npmmirror 中的 nodejieba 包不存在或無法下載 nodejieba 無人維護，不支持在 win11 及 vs studio 2022 版本運行 nodejieba 不支持 typescript 添加依賴 1npm i js-search 2npm i nodejieba@2.6.0 --save-optional --ignore-scripts 爲什麼 nodejieba 要採取這種方式？因爲 nodejieba 是用 c++ 編寫，而它的社區已經不活躍了。它的編譯腳本會失敗。我們需要跳過它的腳本，自己編譯。
** 你需要安裝 vs studio 2022，並勾選使用 c++ 桌面開發 **。
或者使用下面的 powershell 命令，僅安裝需要的組件：
1Invoke-WebRequest -Uri &amp;#39;https://aka.ms/vs/17/release/vs_BuildTools.exe&amp;#39; -OutFile &amp;#34;$env:TEMP\vs_BuildTools.exe&amp;#34; 2 3&amp;amp; &amp;#34;$env:TEMP\vs_BuildTools.exe&amp;#34; --passive --wait --add Microsoft.</description></item><item><title>怎麼在 Java 中限制用戶訪問頻率</title><link>https://travisbikkle.github.io/zh-hant/2024/07/request-limit/</link><pubDate>Mon, 29 Jul 2024 10:21:11 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2024/07/request-limit/</guid><description>我們當然要限制用戶訪問頻率，因爲用戶可能生氣，並狂點我們的網站或應用。
他也可能很壞，使用一些爬蟲試圖拖垮我們的服務器。
所以怎麼實現呢？
本文使用 springboot，並將用戶的信息和訪問頻率記錄到 redis 中，如果你沒有使用 redis，也不影響，你可以參考着自己實現，比如存儲到內存或數據庫中。
想想這個需求，從第一性原理出發 用戶可能沒有登錄，或者已經登錄了。
如果用戶登錄了，我們就根據用戶名來限制，否則，就根據IP或者其它設備碼來限制，本文假設使用IP。
我們希望它足夠簡單，可以在多個方法上使用，而不需要編寫額外的代碼。所以我們要使用接口切面。
接口 1public @interface RequestRateLimit { 2 3	/** 4	* 限流的key，比如限制用戶註冊，限制用戶發送郵件，等等，一般是方法名 5	* @return 6	*/ 7	String key() default &amp;#34;&amp;#34;; 8 9	/** 10	* 限流模式,默認單機 11	* @return 12	*/ 13	RateType type() default RateType.PER_CLIENT; 14 15	/** 16	* 限流速率，1次/分鐘 17	* @return 18	*/ 19	long rate() default 1; 20 21	/** 22	* 限流速率，每分鐘 23	* @return 24	*/ 25	long rateInterval() default 60 * 1000; 26 27	/** 28	* 限流速率單位 29	* @return 30	*/ 31	RateIntervalUnit timeUnit() default RateIntervalUnit.</description></item><item><title>Oauth2 限制登錄一個客戶端</title><link>https://travisbikkle.github.io/zh-hant/2024/07/oauth2-single-login/</link><pubDate>Fri, 19 Jul 2024 10:20:30 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2024/07/oauth2-single-login/</guid><description>有時候我們希望用戶只能在一臺設備登錄賬號（我們太吝嗇了）。
使用 springboot oauth2 怎麼實現呢？
注意本文不會帶你使用 spring security 實現 oauth2 登錄，僅僅是討論我們那個吝嗇的需求。
假設我們有這樣一個自定義的認證實現類：
1public class RedisOAuth2AuthorizationService implements OAuth2AuthorizationService { 2 3	private final static Long TIMEOUT = 10L; 4 5	private static final String AUTHORIZATION = &amp;#34;token&amp;#34;; 6 7	private final RedisTemplate&amp;lt;String, Object&amp;gt; redisTemplate; 8 9	@Override 10	public void save(OAuth2Authorization authorization) { 11 // is refresh token mode or code mode 12 // ... 13 // is access token mode 14	if (isAccessToken(authorization)) { 15	OAuth2AccessToken accessToken = authorization.</description></item><item><title>獲取用戶真實IP</title><link>https://travisbikkle.github.io/zh-hant/2024/07/get-user-real-ip/</link><pubDate>Mon, 15 Jul 2024 10:20:57 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2024/07/get-user-real-ip/</guid><description>這是一個非常簡單的問題，但是在信息傳播過程中，發生了一些錯誤。
比如一些人會說，你配置 X-Real-Ip 啊，這樣就行了。
或者有些人會問，X-Real-Ip 和 X-Forward-For 有什麼區別，原理是什麼？
儼然是把 X-Real-Ip 給誤解了。
本文帶你看看，到底什麼是 X-Real-Ip。
快速回答 X-Real-Ip 什麼也不是。你可以使用 My-Real-Ip，His-Real-Ip，隨便什麼字符串。
1server { 2 ... 3 location / { 4 ... 5 proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; 6 proxy_set_header Host $host; 7 proxy_set_header His-Real-Ip2 $remote_addr; 8 } 9} 以上配置設置了三個請求頭，分別是 X-Forwarded-For、Host、His-Real-Ip2，後臺 java 服務端可以根據 His-Real-Ip2 獲取真實的 IP。
聽起來很傷人，可是 X-Real-Ip 真的只是看起來是官方的、某個隱藏的字段，實際上它並不是。
不要再問什麼 X-Real-Ip 的原理是什麼？ 或者 特殊的請求頭 X-Real-Ip 這樣的問題了，實際上真正的值，是 nginx 的內置變量 $remote_addr。
Docker 中的 nginx docker 中的 nginx 可以獲取到的 $remote_addr，可能是 172.</description></item><item><title>Electron Linux 風格標題欄</title><link>https://travisbikkle.github.io/zh-hant/2024/07/linux-like-titlebar/</link><pubDate>Fri, 05 Jul 2024 10:21:38 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2024/07/linux-like-titlebar/</guid><description>本文將演示如何在 Electron 中快速實現一個標題欄，可以捲起，拖動，並帶你進一步瞭解 Electron 的 bug。
隱藏默認標題欄 在你創建 BrowserWindow 的方法中，指定以下參數：
1function createWindow() { 2 if (prod) Menu.setApplicationMenu(null); 3 mainWindow = new BrowserWindow({ 4 titleBarStyle: dev ? &amp;#39;default&amp;#39; : &amp;#39;hiddenInset&amp;#39;, 5 titleBarOverlay: true, 6 frame: false, 7 // ... 編寫自己的標題欄 現在默認的標題欄已經消失了，你應該編寫一個 div，作爲自己的標題欄。這個 div 和其它 div 沒什麼兩樣，除了它要支持以下三種東西：
可以拖動 可以捲起 有一個紅綠燈組件（捲起/放下，最大化，最小化，關閉） 1 &amp;lt;div className=&amp;#34;title-bar&amp;#34;&amp;gt; 2 &amp;lt;div className=&amp;#34;logo-and-name&amp;#34;&amp;gt;&amp;lt;img src=&amp;#34;public/assets/icon.ico&amp;#34; alt=&amp;#34;logo&amp;#34; /&amp;gt;My Application&amp;lt;/div&amp;gt; 3 &amp;lt;div className=&amp;#34;traffic-light&amp;#34;&amp;gt; 4 &amp;lt;MinMaxClose /&amp;gt; &amp;lt;!-- MinMaxClose 你可以自己實現，四個按鈕，捲起/放下，最大化，最小化，關閉 --&amp;gt; 5 &amp;lt;/div&amp;gt; 6&amp;lt;/div&amp;gt; 拖動 編寫一個 Drag 組件，它的所有 children 都可以拖動。 1import * as React from &amp;#34;react&amp;#34;; 2import { HTMLAttributes } from &amp;#34;react&amp;#34;; 3import nconsole from &amp;#34;_rutils/nconsole&amp;#34;; 4 5interface DragProps extends HTMLAttributes&amp;lt;HTMLDivElement&amp;gt; { 6 children: React.</description></item><item><title>Aria2 Rpc 使用</title><link>https://travisbikkle.github.io/zh-hant/2024/07/aria2-rpc/</link><pubDate>Mon, 01 Jul 2024 10:18:30 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2024/07/aria2-rpc/</guid><description>本文將演示如何使用 aria2 rpc 開發一個下載模塊，注意，這不是一個完整的應用，僅僅是爲了給你一些啓發。
tech version electron 30.0.6 webpack 5.91.0 nodejs v20.14.0 aria2 1.37.0 React 18.2.0 react-use-websocket 4.8.1 @mui/x-charts/SparkLineChart 7.3.2 aria2 文檔 react-use-websocket 文檔
成品演示 加載並啓動 aria2 怎麼將 aria2 集成到你的項目中 你可以要求你的用戶自行安裝 aria2c.exe，或者將 aria2c.exe 直接打包到你的項目中。
如果你採用後者，下面是一些示例。
假設你的工程目錄是：
1src 2build 3 |-- aria2c.exe 4package.json 打包 下面是一個使用 Electron Builder 的示例，它將 build/aria2c.exe 拷貝到安裝後的根目錄。
1&amp;#34;scripts&amp;#34;: { 2 &amp;#34;dev&amp;#34;: &amp;#34;xxxxxxx&amp;#34; 3}, 4&amp;#34;build&amp;#34;: { 5 &amp;#34;extraFiles&amp;#34;: [ 6 { 7 &amp;#34;from&amp;#34;: &amp;#34;build/aria2c.exe&amp;#34;, 8 &amp;#34;to&amp;#34;: &amp;#34;&amp;#34; 9 }, 10} 將它放到 package.</description></item><item><title>Electron 源碼保護</title><link>https://travisbikkle.github.io/zh-hant/2024/06/electron-bytecode/</link><pubDate>Sat, 29 Jun 2024 10:15:44 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2024/06/electron-bytecode/</guid><description>這是一個示例，演示如何快速在你的 Electron 項目中啓用字節碼保護，沒有多餘的廢話。
環境 tech version electron 30.0.6 webpack 5.91.0 @herberttn/bytenode-webpack-plugin 2.3.1 nodejs v20.14.0 步驟 Webpack 配置 參考文檔
1// 引入依賴 2const { BytenodeWebpackPlugin } = require(&amp;#39;@herberttn/bytenode-webpack-plugin&amp;#39;); 3// 在生產環境啓用 4const isEnvProduction = process.env.NODE_ENV === &amp;#39;production&amp;#39;; 5... 6plugins: [ 7 isEnvProduction &amp;amp;&amp;amp; new BytenodeWebpackPlugin({ compileForElectron: true }), 8], 9... 10// main，preload，renderer 需要更改 entry 配置。我使用了 webpack-merge，如果你沒有使用，忽略即可。 11// main 12const mainConfig = merge(commonConfig, { 13 // entry: &amp;#39;./src/main/main.ts&amp;#39;, 14 entry: { 15 main: &amp;#39;./src/main/main.ts&amp;#39;, 16 }, 17 target: &amp;#39;electron-main&amp;#39;, 18 output: { 19 filename: &amp;#39;[name].</description></item><item><title>TP-LINK WAR-2600L 路由器 DMZ 功能分析</title><link>https://travisbikkle.github.io/zh-hant/2024/06/tplink-war2600l-iptables/</link><pubDate>Thu, 20 Jun 2024 15:38:19 +0000</pubDate><guid>https://travisbikkle.github.io/zh-hant/2024/06/tplink-war2600l-iptables/</guid><description>問題 硬件型號 TL-WAR2600L v2.0 企業路由器 固件版本 1.0.1 Build 20180313 Rel.37492 本地150自提了這個路由器，準備用它的多 wan 口搞搞事情，但是沒想到掉坑裏了：
80, 443 端口使用寬帶撥號的外網 ip 可以訪問（不安全） 1在局域網內輸入外網寬帶 ip，可以訪問路由器管理界面； 2但是在真正的外網上，比如手機不連局域網，訪問寬帶 ip，實際上又不能訪問（我的 ip 是公網 ip）。 虛擬服務器轉發的端口，從外網無法基本全部不可用 分析過程 獲取 ssh 端口號和密碼，登錄到路由器後臺 系統工具-設備管理-備份與導入設置，導出一個 bin 文件。使用 7z 打開，查看如下路徑 \backup-TP-LINK-2024-06-20\tmp\userconfig\etc\config\dropbear 1config dropbear 2 option PasswordAuth &amp;#39;on&amp;#39; 3 option RootPasswordAuth &amp;#39;on&amp;#39; 4 option Port &amp;#39;33400&amp;#39; # 這個就是端口 5 option ssh_port_switch &amp;#39;on&amp;#39; 在路由器管理頁面 基本設置 - LAN設置 中獲取 mac 地址，然後找一個 linux 命令行工具執行 1## xx-xx-xx-xx-xx-xx 是你找到的 mac 地址。注意 -n 2echo -n &amp;#34;xx-xx-xx-xx-xx-xx&amp;#34;|sed &amp;#34;s/-//g&amp;#34;|md5sum|cut -c 1-8 3xxxxxxxx # 8位密碼 登錄後我其實還沒發現（因爲我不折騰 openwrt，有羣暉和一臺2U機架服務器了，路由器我只追求穩定）， 這個路由器用的是 openwrt barrier breaker（龍媽：我是 chain breaker） 14.</description></item><item><title>electron-log@5 的使用</title><link>https://travisbikkle.github.io/zh-hant/2024/05/2024-05-17-electron-log-v5/</link><pubDate>Fri, 17 May 2024 18:21:53 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2024/05/2024-05-17-electron-log-v5/</guid><description>我們使用一個開源軟件，一般都是通過搜索示例或教程來學習如何使用。可是如果一個軟件發生過不兼容的變更，而網絡上一般都是些舊的做法，這樣就會給我們帶來非常大的心智負擔。
因此我建議有志之士儘量去看官方文檔，即使它可能是英語，或者沒有太好的示例，仍然要去看，而不是被一些沒頭沒尾或者抄來抄去的博客耽誤你的時間。
Electron 的官方文檔就非常得不詳細，它也在 main，preload，renderer 這一塊變過很多次，詳情可以看看博客中的上一篇文章《在 webapck+electron+typescript中使用go開發的node插件》。
本文說說一個常用的日誌小工具 electron-log 的使用（基於 5.1.4）。
引入 1npm i electron-log 自己定義一個 logger.ts（也可以在 main.ts 中直接定義） 1import log from &amp;#39;electron-log/main&amp;#39;; 2log.transports.console.level = false; // 控制檯關閉輸出（只輸出到文件） 3log.transports.file.level = &amp;#39;silly&amp;#39;; 4log.transports.file.maxSize = 1002430; // 文件最大不超過 1M 5log.transports.file.format = &amp;#39;[{y}-{m}-{d} {h}:{i}:{s}.{ms}] [{level}]{scope} {text}&amp;#39;; 6const date = new Date(); 7const dateStr = date.getFullYear() + &amp;#39;-&amp;#39; + (date.getMonth() + 1) + &amp;#39;-&amp;#39; + date.getDate(); 8log.transports.file.resolvePathFn = () =&amp;gt; &amp;#39;log\\&amp;#39; + dateStr + &amp;#39;.</description></item><item><title>在 webapck+electron+typescript中使用go開發的node插件</title><link>https://travisbikkle.github.io/zh-hant/2024/04/2024-04-23-webpack-electron-node-addon/</link><pubDate>Tue, 23 Apr 2024 18:21:53 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2024/04/2024-04-23-webpack-electron-node-addon/</guid><description>node 插件，electron 和 webpack 那些事 首先要明確在哪裏引入 node 的插件， main，preload還是 renderer？ 我們開發了一個 node 的插件，需要在 electron 中引入。我們一開始當然是希望在 renderer 中引入，畢竟最接近業務邏輯，省事。
不過會遇到報錯 &amp;lsquo;require is not defined&amp;rsquo;，也就是沒有 require 函數。
這個時候網上可能有些回答會讓你在 main.ts 中打開 nodeIntegration：
1mainWindow = new BrowserWindow({ 2 height: 800, 3 width: 1280, 4 maxHeight: 2160, 5 webPreferences: { 6 nodeIntegration: true, 7 devTools: nodeEnv.dev, 8 preload: path.join(__dirname, &amp;#39;./preload.bundle.js&amp;#39;), 9 }, 10}); 實際上這是不推薦的，爲什麼要在 renderer 中允許執行本地的命令，如 fs 等等？如果是一個惡意的網站，他就能訪問你本機所有的文件。當然如果你確保自己的應用不訪問外部網站，也可以。
我們可以瞭解下比較安全的做法。
爲了解決這個問題，我花了整整一天的時間，我這個項目的技術棧是 TypeScript, Webpack 5, 並且需要引入一個 go 寫的 node 插件，現代 javascript 的buff 疊滿了屬於是，我這個後端開發感受到了前端滿滿的惡意了。 開發插件並在 node 中跑通不到兩小時，可是把這個插件放到 webpack + electron 中花了我整整 7 個小時。</description></item><item><title>webpack 5 mock 10分鐘快速配置</title><link>https://travisbikkle.github.io/zh-hant/2024/03/2024-03-15-webpack-react-mock/</link><pubDate>Fri, 15 Mar 2024 11:13:53 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2024/03/2024-03-15-webpack-react-mock/</guid><description>不說廢話，直接開始。我使用 webpack 5.90.3，以下是我的配置。
文件結構
1project_root/ 2 |-- webpack.config.js 3 |-- mockserver.js 4 |-- mock/ 5 |-- user.js webpack.config.js
因爲 express 現在不再附帶 body-parser，現在需要執行 npm i -D body-parser。如果你希望讀取 request 裏面的內容，你會需要這個插件。
1const webpack = require(&amp;#34;webpack&amp;#34;); 2var bodyParser = require(&amp;#39;body-parser&amp;#39;) 3const mockServer = require(&amp;#34;./mockserver.js&amp;#34;) 4 5module.exports = (env, argv) =&amp;gt; { 6 // ... some code 7 return { 8 devServer: { 9 setupMiddlewares: (middlewares, devServer) =&amp;gt; { 10 if (!devServer) { 11 throw new Error(&amp;#39;webpack-dev-server is not defined&amp;#39;); 12 } 13 14 devServer.</description></item><item><title>Vmware 死機但是鼠標可以動</title><link>https://travisbikkle.github.io/zh-hant/2024/03/vmware-freeze/</link><pubDate>Wed, 06 Mar 2024 17:09:19 +0000</pubDate><guid>https://travisbikkle.github.io/zh-hant/2024/03/vmware-freeze/</guid><description>問題現象 宿主機 Win11 客戶機 Kubuntu 22.04 vmware vmware workstation pro 17.5 在使用 VSCode 的時候，我的客戶機總是沒有規律的死機，這個時候鼠標可以移動，但是無法點擊。能看出來客戶機並沒有真正的死機。我曾經監控過 /var/log 下面的日誌，以及用 top 監控過系統資源情況，但是沒能發現任何異常。後來在宿主機的虛擬機目錄 vmware.log 中，看到如下一行日誌，才明白髮生了什麼：
12024-03-06T16:33:01.365Z In(05) mks VMMouse: Dropping move received while input queue was full 這是最後一行日誌，非常好發現。這說明客戶機不再接收任何輸入，難怪表現爲好像死機了！
解決方案 我搜索了這個報錯，在 vmware 社區很多年前的一篇文章中找到了如下方法。
config.ini 的位置可能因操作系統不同而不同，請自行搜索位置。 config.ini 修改後保存時可能沒有權限，可以先另存到桌面，然後拖動到原位置。 vmx文件在修改後可能發生錯誤，請先備份該文件。 在 C:\ProgramData\VMware\VMware Workstation\config.ini 添加以下兩行 1prefvmx.useRecommendedLockedMemSize = &amp;#34;TRUE&amp;#34; 2prefvmx.minVmMemPct = &amp;#34;100&amp;#34; 一些遇到鼠標或者鍵盤一直輸入問題，例如 characterrrrrrrrr，可能還需要添加如下兩行（未經驗證） 1mks.disableTypematic = &amp;#34;TRUE&amp;#34; 2mks.disableRemoteClientTypematic = &amp;#34;TRUE&amp;#34; 修改 xxxx.vmx（該文件存在於你的客戶機根目錄，請將 xxxx.vmx 替換爲實際名稱） 1sched.mem.pshare.enable = &amp;#34;FALSE&amp;#34; 2mainMem.useNamedFile = &amp;#34;FALSE&amp;#34; 3MemTrimRate = &amp;#34;0&amp;#34; 4MemAllowAutoScaleDown = &amp;#34;FALSE&amp;#34; 如果問題仍然沒有解決，可以降級到 17.</description></item><item><title>Termux 常用命令</title><link>https://travisbikkle.github.io/zh-hant/2024/01/termux-useful-command/</link><pubDate>Sat, 27 Jan 2024 16:29:16 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2024/01/termux-useful-command/</guid><description>常用的內置的 termux 命令 輸入 termux 並按 Tab 提示，控制檯會顯示一些 termux 開頭的命令。 下面是一些最常用命令，如更換軟件源或者在手機內拷貝文件：
1# 更換軟件源 2termux-change-repo 3# 開啓存儲權限 4termux-setup-storage 5# 保持常亮 6termux-wake-lock 從手機複製文件 1# 開啓存儲權限 2termux-setup-storage 3# 執行後重新啓動 termux，然後輸入 4ln -s /sdcard/Download ~/download 5# 或者有些手機是 6ln -s /sdcard/Downloads ~/download 定時任務 1# 保持常亮 2termux-wake-lock 3# 安裝並啓動 crond 4apt install cronie 5crond 6# 增加一個定時任務 7crontab -e 8# 手動輸入或使用 https://crontab-generator.org/ 生成一個，例如 91 * * * * bash ~/download/update_domain.sh &amp;gt; ~/download/update.log 10# 按 ctrl o 保存， ctrl x 退出</description></item><item><title>在 Hugo HBstack 主題中使用 Algolia</title><link>https://travisbikkle.github.io/zh-hant/2024/01/hugo-hbstack-algolia/</link><pubDate>Fri, 26 Jan 2024 11:24:23 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2024/01/hugo-hbstack-algolia/</guid><description>TL;DR Algolia 沒有將 hugo 的 crawler 模板放上去，因爲 hugo 是基於主題的，而每個主題使用的 css 都不一樣。
如果你使用 hbstack，你可以參考我的 crawler 配置
1new Crawler({ 2 appId: &amp;#34;xxxxxxxxx&amp;#34;, // 更改爲你的appId 3 apiKey: &amp;#34;xxxxxxxxxx&amp;#34;, // 更改爲你的apiKey 4 rateLimit: 8, 5 maxDepth: 10, 6 startUrls: [&amp;#34;https://travisbikkle.github.io/&amp;#34;], 7 // 注意這裏的多語言鏈接，和你hugo.yaml中的配置有關係，你可能是單站點，如zh-hant.youdomain.com 8 sitemaps: [ 9 &amp;#34;https://travisbikkle.github.io/zh-hant/sitemap.xml&amp;#34;, 10 &amp;#34;https://travisbikkle.github.io/zh-hant/sitemap.xml&amp;#34;, 11 &amp;#34;https://travisbikkle.github.io/en/sitemap.xml&amp;#34;, 12 ], 13 ignoreCanonicalTo: false, 14 discoveryPatterns: [&amp;#34;https://travisbikkle.github.io/**&amp;#34;], 15 schedule: &amp;#34;every 1 day at 3:00 pm&amp;#34;, 16 actions: [ 17 { 18 indexName: &amp;#34;xxxxxxxx&amp;#34;, // 更改爲你的索引名稱 19 pathsToMatch: [&amp;#34;https://travisbikkle.</description></item><item><title>Unity Editor Scripting 樣例</title><link>https://travisbikkle.github.io/zh-hant/2024/01/unity-editor-scripting-demo/</link><pubDate>Thu, 04 Jan 2024 11:24:36 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2024/01/unity-editor-scripting-demo/</guid><description>Unity 的官方文檔非常詳細，但是不是所有人學習Unity都是從頭看到尾看文檔過來的。 我最近剛接觸Unity,最近想給編輯器擴展一些功能，比如點擊Inspector面板，在Project窗口中高亮選擇Prefab或者Script。 這麼小小的一個需求，查遍了中文互聯網，不得其果。大家要麼在CSDN上貼一些零碎的、沒有格式化的代碼，要麼互相複製粘貼。結果不言而喻。 看外網，似乎大家提到了一些代碼，但是Unity論壇上的人都是高手，作爲一個新手看到了代碼都不知道放在哪，怎麼用，非常苦惱。 今天我把自己折騰了幾個小時的一點小代碼貼上，作爲記錄。如果大家對於編輯器擴展有大量需求，建議還是系統地學習一下官方的教程，不要像我，只求快，結果花費的時間更多。
擴展代碼需要放到Editor文件夾下 這個Editor文件夾你可以建到任意的地方，我放到了Assets/Scripts/Editor下面，在其中創建一個C#文件，命名隨意。 將以下代碼粘貼進文件，保存，即可在Inspect面板點擊掛載腳本時高亮腳本。
1using UnityEditor; 2using UnityEditor.UIElements; 3using UnityEngine; 4using UnityEngine.UIElements; 5 6 7[CustomEditor(typeof(MonoBehaviour), true)] 8public class HighlightItem : Editor { 9 public override VisualElement CreateInspectorGUI() { 10 var root = new VisualElement(); 11 InspectorElement.FillDefaultInspector(root, serializedObject, this); 12 root.Add(new Label(&amp;#34;點擊以高亮&amp;#34;)); 13 root.RegisterCallback&amp;lt;ClickEvent&amp;gt;(Highlight); 14 15 return root; 16 } 17 18 private void Highlight(ClickEvent evt) { 19 var script = MonoScript.FromMonoBehaviour((MonoBehaviour)target); 20 21 UnityEditor.EditorGUIUtility.PingObject(script); 22 //UnityEditor.</description></item><item><title>Vmware 中 Intellij Idea 快捷鍵錯誤</title><link>https://travisbikkle.github.io/zh-hant/2023/12/idea-shortkey-error-in-vmware/</link><pubDate>Fri, 01 Dec 2023 11:24:32 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2023/12/idea-shortkey-error-in-vmware/</guid><description>在VMware中，CTRL ALT是默認的將鼠標焦點從虛擬機中移開的熱鍵，這將導致一切在Vmware中運行的虛擬機系統中以該組合鍵 位開頭的熱鍵不可用。比如Intellij Idea的默認後退快捷鍵CTRL ALT LEFT。
一開始我以爲是KDE熱鍵衝突的問題，因爲KDE默認有很多的快捷鍵，但是經過查看KDE的系統設置，並沒有發現熱鍵佔用的情況：
直到我意識到screenkey也沒有提示，這說明我的KDE根本沒有接收到CTRL ALT LEFT按鍵。答案顯而易見，是Vmware的問題了。 爲了防止衝突，在Vmware的 編輯-首選項-熱鍵 中可以將這四個按鍵都勾選上。</description></item><item><title>Vmware Power-ON 腳本啓動失敗</title><link>https://travisbikkle.github.io/zh-hant/2023/11/vmware-poweron-script/</link><pubDate>Thu, 16 Nov 2023 11:24:33 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2023/11/vmware-poweron-script/</guid><description>VMware 的開機腳本位於 /etc/vmware-tools/ 下。如果你的虛擬機報錯啓動客戶機腳本失敗，你可以在虛擬機-電源-開機中開機，然後進入該目錄調試。
如果你的vmware-tools進行過升級，但是升級過程中出現了問題，可能導致腳本沒有正確命名。比如，下面是開機、關機等操作對應的腳本名稱
1poweroff-vm-default 2poweron-vm-default 3resume-vm-default 4suspend-vm-default 5vgauth.conf 而你的機器上可能是
1poweroff-vm-default.dpkg-dist 2poweron-vm-default.dpkg-dist 3resume-vm-default.dpkg-dist 4suspend-vm-default.dpkg-dist 5vgauth.conf.dpkg-dist 那麼請執行以下命令重命名即可
1find /etc/vmware-tools/ -name &amp;#34;*.dpkg-dist&amp;#34; -exec sh -c &amp;#39;x={}; cp &amp;#34;$x&amp;#34; $(echo $x | sed &amp;#39;s/\.dpkg-dist//g&amp;#39;)&amp;#39; \; 另外你還可能需要檢查 /etc/vmware-tools/scripts/vmware 以及各個腳本是否具有可執行權限。</description></item><item><title>Kubuntu Vscode 鼠標列編輯設置</title><link>https://travisbikkle.github.io/zh-hant/2023/11/kubuntu-vscode-mouse/</link><pubDate>Wed, 15 Nov 2023 11:24:33 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2023/11/kubuntu-vscode-mouse/</guid><description>鼠標中鍵是某些操作系統的默認粘貼快捷鍵，這導致在VSCode中無法使用鼠標中鍵進入列編輯模式。
點擊 文件-首選項-設置 點擊右上角，打開json文件 添加如下行
1&amp;#34;editor.selectionClipboard&amp;#34;: false 關閉 VSCode 並重新打開，測試是否生效。</description></item><item><title>Android Studio Emulator 啓動失敗</title><link>https://travisbikkle.github.io/zh-hant/2023/11/android-studio-emulator-failed/</link><pubDate>Wed, 15 Nov 2023 11:24:23 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2023/11/android-studio-emulator-failed/</guid><description>報錯現象 The emulator process for AVD Pixel_3a_API_34_extension_level_7_x86_64 has terminated.
沒有任何的報錯信息，如果不知道日誌在哪裏，該如何排查呢？
解決辦法 在你的家目錄如下位置，執行如下命令，通過命令行查詢出虛擬設備並啓動，將報錯信息打印到前臺
1yourname@v:~/Android/Sdk/emulator$ ./emulator -list-avds 2Pixel_3a_API_34_extension_level_7_x86_64 3yourname@v:~/Android/Sdk/emulator$ ./emulator @Pixel_3a_API_34_extension_level_7_x86_64 4INFO | Android emulator version 32.1.15.0 (build_id 10696886) (CL:N/A) 5INFO | Found systemPath /home/yourname/Android/Sdk/system-images/android-34/google_apis/x86_64/ 6INFO | Storing crashdata in: /tmp/android-yourname/emu-crash.db, detection is enabled 7INFO | Duplicate loglines will be removed, if you wish to see each indiviudal line launch with the -log-nofilter flag. 8WARNING | Please update the emulator to one that supports the feature(s): SupportPixelFold 9ERROR | Not enough space to create userdata partition.</description></item><item><title>Windows Vmware Amd-V 開啓</title><link>https://travisbikkle.github.io/zh-hant/2023/11/win11-vmware-amd-v/</link><pubDate>Tue, 14 Nov 2023 11:24:35 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2023/11/win11-vmware-amd-v/</guid><description>報錯現象 我在 Win 11 中安裝了 Vmware，並在Vmware中安裝了 Kubuntu 22.04 虛擬機。 當我在虛擬機設置的cpu設置中開啓AMD-V的時候，Vmware提示如下錯誤： 起初我並沒有在意，只是感覺虛擬機的性能有些差，直到我在虛擬機中嘗試使用Android Studio附帶的安卓模擬器時，遇到了問題。
無法開啓 AMD-V 或 Intel VT-x 的影響 性能下降
虛擬機的性能將受到限制，因爲它不能充分利用硬件虛擬化擴展，指令執行和內存管理開銷可能增加。 這個性能下降是肉眼可見的，你在點擊、挪動鼠標的時候會感覺到有一種難以察覺的遲滯感，非常難受。
兼容性問題
某些操作系統和應用程序可能無法正常運行或可能出現不穩定的情況。
如果你在虛擬機中開發 Android，你可能無法在虛擬機中再開啓一個模擬器。
安全性問題
虛擬機之間的隔離性可能會下降，從而增加了安全風險。
如何解決 確認你的主板支持 AMD-V 或者 Intel VT-x
現在的主板基本都支持，你需要通過搜索引擎，搜索你的主板該如何確認是否已經開啓該功能。 關閉組策略中的如下設置
在開始菜單中搜索 gpedit，打開組策略編輯器： 在 計算機配置-管理模板-系統-Device Guard 中，雙擊打開 基於虛擬化的安全，設置爲 已禁用： 關閉 Windows 安全中心 中的內存完整性保護
將以下內存完整性的開關關閉，然後重啓系統。 如果你曾經開啓過Hyper-V，還需要在 控制面板-程序和功能-啓用或關閉Windows功能 中，去掉勾選Hyper-V</description></item><item><title>Intellij Idea 啓動報錯</title><link>https://travisbikkle.github.io/zh-hant/2023/11/idea-start-error/</link><pubDate>Tue, 14 Nov 2023 11:24:23 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2023/11/idea-start-error/</guid><description>Intellij Idea 2023.2 啓動報錯：
Error while opening intellij &amp;ldquo;Cannot connect to already running IDE instance. Exception: Process 2,837 is still running&amp;rdquo;
youtrack 跟蹤 https://youtrack.jetbrains.com/issue/IDEA-330531
解決辦法 在菜單中編輯啓動項，在idea.sh前加入一個前置的腳本，在其中刪除不該存在的.lock文件
1/opt/idea-IU-232.10203.10/bin/prestart.sh; /opt/idea-IU-232.10203.10/bin/idea.sh 腳本的內容爲
1#!/bin/bash 2rm ~/.config/JetBrains/IntelliJIdea2023.2/.lock</description></item><item><title>Kubuntu 軟件源在哪裏修改</title><link>https://travisbikkle.github.io/zh-hant/2023/11/kubuntu2204-software-resources-bug/</link><pubDate>Wed, 08 Nov 2023 11:24:30 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2023/11/kubuntu2204-software-resources-bug/</guid><description>Kubuntu 22.04 的軟件源可以在 Discover 中的如下位置設置。 但是如果你的 Discover 不顯示以上界面，可以通過如下方法來修復。
編輯如下文件
1vi /usr/share/applications/software-properties-qt.desktop 將以下內容替換到源文件
1[Desktop Entry] 2Name=Software Sources 3GenericName=Software Sources 4Comment=Configure the sources for installable software and updates 5Exec=pkexec env DISPLAY=$DISPLAY XAUTHORITY=$XAUTHORITY software-properties-qt 6Icon=applications-other 7NoDisplay=false 8Terminal=false 9X-MultipleArgs=false 10Type=Application 11Categories=System;Settings; 12MimeType=text/x-apt-sources-list; 13X-KDE-SubstituteUID=false 14X-Ubuntu-Gettext-Domain=software-properties 如此，在 Discover可以顯示軟件源的界面，在菜單中也可以搜索到在其它發行版中常見的 軟件源 菜單項。</description></item><item><title>Kubuntu 22.04 中文輸入法</title><link>https://travisbikkle.github.io/zh-hant/2023/11/kubuntu2204-chiness-im/</link><pubDate>Wed, 08 Nov 2023 11:24:29 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2023/11/kubuntu2204-chiness-im/</guid><description>繼續使用 fcitx5（推薦） 安裝 fcitx5 中文輸入法
1sudo apt install fcitx5-chinese-addons \ 2fcitx5-frontend-gtk4 fcitx5-frontend-gtk3 fcitx5-frontend-gtk2 \ 3fcitx5-frontend-qt5 $(check-language-support) check-language-support 同時安裝了系統中缺失的中文語言包（在 區域設置-語言 中點擊安裝缺失的語言包沒有反應），這樣才能在第3步中看到 輸入法 的選項。
啓用 fcitx5 注意，不要相信網上任何要你更改.xinputrc或者在某些文件中添加如下變量的話
GTK_IM_MODULE=fcitx
QT_IM_MODULE=fcitx
XMODIFIERS=@im=fcitx
請直接使用你登錄的用戶執行以下命令
1im-config 在彈出的窗口中，依次選擇確定，是，選擇如下選項即可。 重啓系統 在 系統設置-區域設置-輸入法 中添加 拼音 或者 pinyin
解決 Intellij Idea 中使用 fcitx5 候選框不跟隨的問題 (20240126更新：此時的Idea已經沒有此問題，無需進行此步) 可以將如下項目的release文件解壓縮到JetBrain產品的jbr目錄中（可能導致markdown無法預覽）
1https://github.com/RikudouPatrickstar/JetBrainsRuntime-for-Linux-x64 程序員推薦在如下配置中關閉簡繁切換快捷鍵
系統設置-區域設置-輸入法-配置附加組件-簡繁切換 中刪除CTRL SHIFT F的簡繁切換快捷鍵。
解決在 Visual Studio Code 中無法使用任何中文輸入法的問題
如果你在 Discover 軟件管理工具中下載了 VSCode，請卸載後，在官網下載 deb 包安裝，即可解決無法輸入中文的問題。
使用 fcitx4 卸載 fcitx5
1sudo apt-get remove fcitx5 安裝谷歌拼音輸入法</description></item><item><title>右鍵添加 Cygwin</title><link>https://travisbikkle.github.io/zh-hant/2023/10/cygwin-right-click-menu/</link><pubDate>Tue, 31 Oct 2023 11:24:35 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2023/10/cygwin-right-click-menu/</guid><description>本文基於 Windows 10。
效果展示 方法 重新運行 cygwin 安裝程序，勾選 chere 安裝包 安裝完成後，使用管理員身份運行 cygwin，執行以下命令 1chere -i -t mintty -s bash 此時右鍵菜單應該有 &amp;ldquo;Bash Prompt Here&amp;rdquo; 菜單選項，如果您想更改爲中文，可以在更改此處註冊表 1計算機\HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Directory\background\shell\cygwin64_bash 增加 Icon 字符串以顯示菜單圖標，並更改中文描述，達到上圖菜單效果。</description></item><item><title>Windows 常用命令</title><link>https://travisbikkle.github.io/zh-hant/2023/10/windows-common-commands/</link><pubDate>Tue, 31 Oct 2023 11:24:34 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2023/10/windows-common-commands/</guid><description>在右鍵菜單中添加管理員獲得所有權 打開記事本，將以下內容粘貼 1Windows Registry Editor Version 5.00 2[HKEY_CLASSES_ROOT\*\shell\runas] 3@=&amp;#34;管理員取得所有權&amp;#34; 4&amp;#34;NoWorkingDirectory&amp;#34;=&amp;#34;&amp;#34; 5[HKEY_CLASSES_ROOT\*\shell\runas\command] 6@=&amp;#34;cmd.exe /c takeown /f \&amp;#34;%1\&amp;#34; &amp;amp;&amp;amp; icacls \&amp;#34;%1\&amp;#34; /grant administrators:F&amp;#34; 7&amp;#34;IsolatedCommand&amp;#34;=&amp;#34;cmd.exe /c takeown /f \&amp;#34;%1\&amp;#34; &amp;amp;&amp;amp; icacls \&amp;#34;%1\&amp;#34; /grant administrators:F&amp;#34; 8[HKEY_CLASSES_ROOT\exefile\shell\runas2] 9@=&amp;#34;管理員取得所有權&amp;#34; 10&amp;#34;NoWorkingDirectory&amp;#34;=&amp;#34;&amp;#34; 11[HKEY_CLASSES_ROOT\exefile\shell\runas2\command] 12@=&amp;#34;cmd.exe /c takeown /f \&amp;#34;%1\&amp;#34; &amp;amp;&amp;amp; icacls \&amp;#34;%1\&amp;#34; /grant administrators:F&amp;#34; 13&amp;#34;IsolatedCommand&amp;#34;=&amp;#34;cmd.exe /c takeown /f \&amp;#34;%1\&amp;#34; &amp;amp;&amp;amp; icacls \&amp;#34;%1\&amp;#34; /grant administrators:F&amp;#34; 14[HKEY_CLASSES_ROOT\Directory\shell\runas] 15@=&amp;#34;管理員取得所有權&amp;#34; 16&amp;#34;NoWorkingDirectory&amp;#34;=&amp;#34;&amp;#34; 17[HKEY_CLASSES_ROOT\Directory\shell\runas\command] 18@=&amp;#34;cmd.exe /c takeown /f \&amp;#34;%1\&amp;#34; /r /d y &amp;amp;&amp;amp; icacls \&amp;#34;%1\&amp;#34; /grant administrators:F /t&amp;#34; 19&amp;#34;IsolatedCommand&amp;#34;=&amp;#34;cmd.</description></item><item><title>Ubuntu 改鍵</title><link>https://travisbikkle.github.io/zh-hant/2023/10/remaps-keys-in-ubuntu/</link><pubDate>Tue, 17 Oct 2023 11:24:32 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2023/10/remaps-keys-in-ubuntu/</guid><description>在 Ubuntu Software 中搜索 Gnome Tweaks 並安裝。 點擊 Keyboard &amp;amp; Mouse 點擊 Additional Layout Options 在彈出的窗口中，勾選 Ctrl position 中的 Swap Ctrl and Caps Lock 本文基於 Ubuntu 22.04 LTS 及 Gnome Tweaks 3.34.0 編寫。
補充：使用kde更加的方便，該設置已經被集成到系統設置中，無需下載 Gnome Tweaks。</description></item><item><title>Code Server Nginx Ssl Error</title><link>https://travisbikkle.github.io/zh-hant/2023/10/code-server-nginx-ssl-error-1006/</link><pubDate>Tue, 17 Oct 2023 11:24:30 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2023/10/code-server-nginx-ssl-error-1006/</guid><description>1An unexpected error occurred that requires a reload of this page. 2The workbench failed to connect to the server (Error: WebSocket close with status code 1006) Code server popped up a websocket error when I exposed code-server using a custom domain and a custom port via nginx.
Here is part of my nginx.conf.
1 upstream code{ 2 server xxxxxxxxx; 3 } 4 server { 5 listen 40032 ssl; 6 server_name xxxxxxxx; 7 ssl_certificate certs/mycert.</description></item><item><title>How to add samba entry in /etc/fstab</title><link>https://travisbikkle.github.io/zh-hant/2023/10/fatab-samba/</link><pubDate>Tue, 17 Oct 2023 11:24:29 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2023/10/fatab-samba/</guid><description>Configure Samba On Ubuntu
1. install necessary tools 1sudo apt install cifs-utils 2. prepare credentials 1sudo mkdir /mnt/samba 2sudo vi /root/.smb_credentials 3. put next 2 lines into /root/.smb_credentials 1username=&amp;lt;your user name&amp;gt; 2password=&amp;lt;your password&amp;gt; 4. change credential file permission for security reason 1chmod 600 /root/.smb_credentials 5. configure /etc/fstab 1sudo vi /etc/fstab 6. put next line into /etc/fstab. add noauto to options if you don&amp;rsquo;t want to let Ubuntu auto mount this path 1#&amp;lt;shared path&amp;gt; &amp;lt;mount point&amp;gt; &amp;lt;type&amp;gt; &amp;lt;options&amp;gt; 2//192.</description></item><item><title>使用 Adobe Premiere 製作 GIF 文件</title><link>https://travisbikkle.github.io/zh-hant/2023/05/adobe-premiere-gif/</link><pubDate>Wed, 31 May 2023 11:24:28 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2023/05/adobe-premiere-gif/</guid><description> 雙擊左下角媒體瀏覽器，將視頻素材導入 在左上角編輯窗口，點擊如圖所示按鈕，標記入點與出點（開始與結束） 將左上角的內容拖動到右下角時間軸內 右鍵點擊時間軸內的波段，點擊取消鏈接，再次右鍵，選擇清除聲音軌道的波紋，以刪除聲音 選擇 文件-&amp;gt;導出-&amp;gt;媒體，選擇 動畫GIF 格式，調整大小後導出</description></item><item><title>Vuepress .x 使用 Pangu.js 實現中英文自動空格</title><link>https://travisbikkle.github.io/zh-hant/2023/05/vuepress-pangu/</link><pubDate>Thu, 25 May 2023 11:24:27 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2023/05/vuepress-pangu/</guid><description>偏執狂的自述 如果你跟我一樣，每次看到網頁上的中文字和英文、數字、符號擠在一塊，就會坐立難安，忍不住想在它們之間加個空格。這個外掛（支援 Chrome 和 Firefox）正是你在網路世界走跳所需要的東西，它會自動替你在網頁中所有的中文字和半形的英文、數字、符號之間插入空白。
漢學家稱這個空白字元為「盤古之白」，因為它劈開了全形字和半形字之間的混沌。另有研究顯示，打字的時候不喜歡在中文和英文之間加空格的人，感情路都走得很辛苦，有七成的比例會在 34 歲的時候跟自己不愛的人結婚，而其餘三成的人最後只能把遺產留給自己的貓。畢竟愛情跟書寫都需要適時地留白。
與大家共勉之。
以上這段惡毒的獨白來自 https://github.com/vinta/pangu.js/ 的偏執狂作者 vinta，但依然不能充分的表達有追求的傑青們看到中英文和符號擠在一塊的不適。
好在現在可以使用 pangu.js 來幫你規避辛苦的感情路或者孤獨終老的風險，趕快來看看如何在 VuePress 中使用吧！
VuePress 1.x VuePress 1.x 版本可以參考 https://shigma.github.io/markdown-it-pangu/vuepress.html 配置。
VuePress 2.x 以上插件並沒有適配 VuePress 2.x 的版本，但是好在 VuePress 2.x 預留了 hook，查看 markdown-it-pangu 的代碼之後，我發現可以使用如下方法，略過插件，達成在 VuePress 2.x 中調用 pangu.js 的能力。
1// 以下代碼在 config.ts 或者 config.js 中 2import panguPlugin from &amp;#39;markdown-it-pangu&amp;#39; 3// ... 省略 4export default defineUserConfig({ 5 extendsMarkdown: (md) =&amp;gt; { 6 md.use(panguPlugin) 7 }, 8// ... 省略 可以在任一 markdown 文件中測試，如：</description></item><item><title>Vuepress Algolia</title><link>https://travisbikkle.github.io/zh-hant/2023/05/vuepress-algolia/</link><pubDate>Wed, 24 May 2023 11:24:28 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2023/05/vuepress-algolia/</guid><description>Algolia 是一個優秀的靜態網站搜索插件，非常適用於沒有後臺的靜態網頁博客系統（比如github pages）。
經過一定的申請步驟後（見下文鏈接），Algolia 通過爬蟲定期爬取網站的數據將其存放到自己的數據庫中。用戶在網站上搜索的時候，就可以調用爬取的數據，顯示搜索結果。但是 Algolia 有個缺點：它不是開箱即用的。參考以下兩個鏈接，可以申請 Algolia 並在 VuePress 中做初步的配置。
VuePress 博客優化之開啓 Algolia 全文搜索
VuePress 官網
但是每個人的環境、步驟可能都不一樣，尤其是如果你經歷過從 VuePress 1.x 遷移過 VuePress 2.x，可能你會發現無論如何都無法搜索出結果，並且無法從網絡上得到答案。
如果你遇到了這個問題，可以參考以下步驟進行排障：
確定你的 VuePress 版本是 1.x 還是 2.x 可以在你的博客代碼中的 package.json 中查看。 進入 https://crawler.Algolia.com/admin/ 編輯器檢查以下三處配置 2.1 pathsToMatch 這一行默認帶了一級 docs，請確認你的網站是否包含，如果不包含請刪掉這裏的docs 2.2 確認 lvl0.selectors 這一行，是 .sidebar-heading.active 還是 p.sidebar-heading.open。前者對應的是 VuePress 2.x 版本，後者適配的是 VuePress 1.x 版本，如果錯用，在此界面點擊 URL Tester 的測試時將可以爬取到 URL 但是無法爬取到 index。如果確認錯配了，請在該網站找到正確的示例代碼覆蓋（注意替換爲你的網站信息） 2.3 確認你的 appId，apiKey，indexName 等是否正確。 以下是我的配置，基於 VuePress 2.x，請參考。 1new Crawler({ 2 appId: &amp;#34;xxxxxx&amp;#34;, 3 apiKey: &amp;#34;xxxxxx&amp;#34;, 4 rateLimit: 8, 5 maxDepth: 10, 6 startUrls: [&amp;#34;https://travisbikkle.</description></item><item><title>數據結構</title><link>https://travisbikkle.github.io/zh-hant/2023/05/data-structure/</link><pubDate>Mon, 01 May 2023 11:24:02 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2023/05/data-structure/</guid><description>Doubly Linked List 什麼是雙向鏈表 雙向鏈表是一種特殊的鏈表，其中的每個節點都包含前一個和後一個節點的引用。 下面是一個雙向鏈表的簡單示例：
1// Class for Doubly Linked List 2public class DLL { 3 // Head of list 4 Node head; 5 // Doubly Linked list Node 6 class Node { 7 int data; 8 Node prev; 9 Node next; 10 // Constructor to create a new node 11 // next and prev is by default initialized as null 12 Node(int d) { data = d; } 13 } 14} 1# Node of a doubly linked list 2class Node: 3 def __init__(self, next=None, prev=None, data=None): 4 # reference to next node in DLL 5 self.</description></item><item><title>Ubuntu Vnc</title><link>https://travisbikkle.github.io/zh-hant/2023/04/ubuntu-vnc/</link><pubDate>Mon, 10 Apr 2023 11:24:31 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2023/04/ubuntu-vnc/</guid><description>本文基於 Ubuntu 20.04 編寫。
安裝 vncserver 和要使用的桌面管理器 xfce 1apt install tightvncserver xfce4 xfce4-goodies 更改密碼 1vncpasswd 配置 vnc 以便客戶端連接時使用 xfce 桌面 編輯 ~/.vnc/xstartup，輸入以下內容 1#!/bin/sh 2unset SESSION_MANAGER 3unset DBUS_SESSION_BUS_ADDRESS 4startxfce4 &amp;amp; 執行以下命令 1chmod +x ~/.vnc/xstartup 禁用休眠 1systemctl mask sleep.target suspend.target hibernate.target hybrid-sleep.target 啓動服務器 1vncserver -localhost no -geometry 1920x1080 參考 https://linuxconfig.org/vnc-server-on-ubuntu-20-04-focal-fossa-linux</description></item><item><title>端口轉發的一些方法</title><link>https://travisbikkle.github.io/zh-hant/2023/02/port-forward/</link><pubDate>Wed, 01 Feb 2023 11:24:24 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2023/02/port-forward/</guid><description>在《如何抓包分析 vrrp 報文是否中斷》中我們使用了 iptables 進行指定協議的報文日誌記錄功能，此處新增一個好用的命令。
我們在開發過程中，可能經常需要經過堡壘機、跳板機等中轉一次，才能訪問到處於小網中的服務，如數據庫。使用以下命令，可以在不借助第三方軟件的情況下，完成端口轉發，實現直連小網服務。
iptables 假設 192.168.1.3 是你的小網機器，端口是 15432
1iptables -t nat -A PREROUTING -p tcp --dport 15432 -j DNAT --to-destination 192.168.1.3:15432 2iptables -t nat -A POSTROUTING -p tcp -m tcp --dport 15432 -j MASQUERADE nginx upstream 192.168.1.3 { server 192.168.1.3:15432; } server { listen 15432; proxy_pass 192.168.1.3; proxy_connect_timeout 1h; proxy_timeout 1h; } 或者用 go 自己寫了一些小工具來轉發，我自己還寫了一個自動生成 xshell 配置的工具，因爲在公司內網，不便共享。</description></item><item><title>如何寫一個 K8s Operator</title><link>https://travisbikkle.github.io/zh-hant/2022/05/operator-dev/</link><pubDate>Thu, 26 May 2022 11:24:26 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2022/05/operator-dev/</guid><description>使用過 k8s 的同學可能執行過以下命令：
1kubectl edit sts myapp # 編輯一個名稱爲 myapp 的 StatefulSet 2kubectl describe sts myapp # 查看一個名稱爲 myapp 的 StatefulSet StatefulSet 是 k8s 定義的一種資源，類似的還有 Deployment、Job、ConfigMap 等。當你執行 edit 命令編輯這些資源後，k8s 會通過不停輪詢的方式（核心概念：control loop），將目標資源調整（核心概念：reconcile）到你期望的狀態。
例如，你按了空調的遙控器，希望將房間的溫度下調到 20℃。空調的壓縮機開始工作，並且同時不停的檢測當前實際的溫度與你期望的溫度之間的差異，直到溫度達到20℃，這就是一個 control loop 的例子。
很簡單，對吧？
設想一下如果不是這樣，你將一手拿着溫度計，然後不停的告訴空調溫度仍然很高，或者已經變得過低了。
這就是聲明式 API 的好處，用戶只需要告訴程序你的期望，剩下的交給程序來做（對於程序開發者來說是雷鋒行爲），而程序實現目標最省力的方式，就是採用 control loop 的方式，不停的對比期望與現實的差距。
Operator 是什麼 試想我們不再滿足於 k8s 提供的默認的資源，我們想利用這種省心省力的方式，來管理我們自己的資源，如：數據庫的一個用戶。
你可能想說，數據庫的用戶存在於數據庫內，我知道數據庫的集羣可以定義爲 StatefulSet 然後由 k8s 管理，用戶又怎麼使用 k8s 管理呢？爲什麼要用 k8s 來管理呢？
爲什麼要用 k8s 管理用戶資源？
以 MySql 爲例，通常我們創建用戶，是使用 root 用戶登錄到數據庫，執行 sql 語句創建用戶。但是設想以下幾種場景：
你不知道 root 用戶的密碼，或者因爲安全要求，不能提供給你 你不知道 MySql 的 IP 你知道以上信息，但是因爲沒有開啓相應的節點權限，你無法登錄數據庫 你完成了以上所有步驟，結果其中某些登錄或者創建步驟失敗了，你和數據庫運維人員開始扯皮 看到了吧？這些都是生產環境中，真實會遇到的事情。而使用以下步驟，我們就可以一舉解決這些問題。</description></item><item><title>vrrp 報文抓包的方法</title><link>https://travisbikkle.github.io/zh-hant/2022/02/vrrp-cap/</link><pubDate>Tue, 01 Feb 2022 11:24:24 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2022/02/vrrp-cap/</guid><description>keepalived 的主機和備機，會每隔3s通過單播，向對方發送 vrrp 報文，當備機在 3次*每次心跳間隔（keepalived.conf中的adver_int參數） 都收不到主機的廣播，自己將會升主。
以下兩種可能都會存在：
主機沒有發送廣播 主機發送了廣播，備機沒有收到 因此，在主備都需要監控vrrp的發送（out）或接收（in）記錄。 使用以下兩種方式，都可以監控每次 vrrp 報文的內容，以便定位問題。
iptables 在主機和備機都添加監控vrrp發送和接收的iptables日誌（該規則僅抓取vrrp行爲，沒有其它副作用） 1iptables -t raw -A PREROUTING -p vrrp -j LOG --log-level 6 --log-prefix &amp;#34;VRRP: &amp;#34; 2iptables -t raw -A OUTPUT -p vrrp -j LOG --log-level 6 --log-prefix &amp;#34;VRRP: &amp;#34; 使用以下命令檢測是否添加成功： 1iptables -L -t raw -n 在/var/log/messages可以查看vrrp的記錄。如果是suse或其它操作系統，該日誌中沒有vrrp記錄的話，可以在dmesg或者/var/log/的目錄中grep VRRP查看。 定位完問題後，執行以下命令刪除添加的iptables規則 1iptables -t raw -D PREROUTING -p vrrp -j LOG --log-level 6 --log-prefix &amp;#34;VRRP: &amp;#34; 2iptables -t raw -D OUTPUT -p vrrp -j LOG --log-level 6 --log-prefix &amp;#34;VRRP: &amp;#34; tcpdump wireshark tcpdump 命令需要自行獲取，wireshark 需要自行下載，這部分僅記錄常用命令和注意點，由於在公司內網，圖片無法放上來。</description></item><item><title>一個數據庫主備頻繁切換案例</title><link>https://travisbikkle.github.io/zh-hant/2022/01/a-case-of-database-switch/</link><pubDate>Thu, 20 Jan 2022 11:24:25 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2022/01/a-case-of-database-switch/</guid><description>問題現象 某集團某局點分別部署了某數據庫的主備實例，業務發現偶爾訪問數據庫報錯。
定位結論 其中一個節點使用的某物理機型，網卡存在故障，發生了多次復位，致使某數據庫備機的keepalived雙機軟件接收不到對端的vrrp信號，備機在網卡復位期間短暫升主，兩臺機器都出現了vip，導致業務訪問某數據庫失敗。
需要聯繫廠商，針對以下疑問給出答覆：
節點A（某品牌F）和節點B（某品牌L）使用的網卡型號一樣，但是爲什麼某品牌F的固件版本要比某品牌L的新？
某品牌L的網卡信息，和某品牌L官網該型號的機器的認證信息不一致，見下表。
表1-1 某品牌F機型、某品牌L機型和某品牌L官網認證信息對比
項目 節點A 節點B 某品牌L官網認證信息 服務器型號 某品牌F FiberHome R2200 V5 某品牌L Inspur NF8480M5 某品牌L Inspur NF8480M5 網卡驅動 ixgbe 5.1.0-k ixgbe 5.1.0-k igb.ko 5.6.0-k 網卡固件 0x800006da 1.1824.0 0x800003df - 是否發生過重啓 否 是 - 定位過程 查看兩個節點的keepalived日誌
1cd /xx/xx/xx/logs 2zgrep Entering keepalived* 發現主機（節點A）上無異常，備機的keepalived在master、backup、fault三個狀態頻繁切換。
當keepalived進入master狀態，會將vip綁定到網卡上。這樣主機和備機都有vip，業務訪問某數據庫將會出現問題。
在備機上使用如下命令可以抓到短暫出現的vip：
1while true;do ip a s bond1|grep x.x.x.x;sleep 0.2;done 查看備機的keepalived.log，發現備機無法接收到主機的vrrp廣播。
keepalived的主備機都會每3s發送一次vrrp協議的廣播，當備機連續3次（9s）接收不到主機的廣播，就會將自己升主。
查看主機的keepalived.log，發現主機在正常發送vrrp廣播。
使用tcpdump在主機和備機同時抓包，問題復現後，發現主機確實發送了vrrp的廣播，但是備機在(15:46:14-15:46:32)有18s的時間沒有接收到任何來自主機的廣播（此處應該有圖，但是不放了）。
使用如下命令，查看備機上keepalived接收vrrp廣播的網卡情況，發現是一張由eth4和eth8組成的active-backup模式的邏輯網卡，：
1cat /proc/net/bonding/bond1 查看/var/log/messages中兩張物理網卡的信息，發現eth4和eth8網卡發生了多次復位，復位時間和gauss-datacube出現異常的時間能夠對應的上（此處應該有圖，但是不放了）。
查看節點B的服務器型號及網卡型號、固件版本（此處應該有圖，但是不放了）。 節點B和節點A對比，發現節點A的這臺某品牌F機型，比節點B的某品牌L機型使用的網卡固件要更新： 節點B和某品牌L官網認證信息(https://www.suse.com/nbswebapp/yesBulletin.jsp?bulletinNumber=148996)對比，發現節點B節點使用的網卡driver name和認證信息不符： 除了某局點節點B的某品牌L機型節點，我們還在其它局點的appdb的節點的某品牌L機型上，也發現了網卡重啓的現象，該現象在某品牌F機型上未發現，判斷是某品牌L的這批機器網卡存在故障。 這種短暫網卡重啓的問題，由於tcp重連的特性，對於普通的應用感知不大，但是對於數據庫這樣包含雙機軟件的敏感應用，影響較大。</description></item><item><title>Diff Patch 應用</title><link>https://travisbikkle.github.io/zh-hant/2021/07/diff-patch/</link><pubDate>Wed, 14 Jul 2021 11:24:27 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2021/07/diff-patch/</guid><description>假設有三個文件，你需要將修復的bug的代碼，合入到file_1.1中，生成一個名爲file_1.1.fix的文件。
文件名 說明 file_1.0.orgin 舊版本的原始文件 file_1.0.fix 舊版本的修正文件，修改了一些 bug file_1.1 新版本的原始文件 參考以下命令 diff 用於對比生成補丁
1diff -urN old new &amp;gt; patch 2diff -urN file_1.0.origin file_1.0.fix &amp;gt; bug_patch patch 用於將補丁應用到新文件
1patch new -i patch -o target 2patch file_1.1 -i bug_patch -o file_1.1.fix diff path 是 linux 標準命令，windows 可以下載 git-bash 後使用。</description></item><item><title>Blktrace</title><link>https://travisbikkle.github.io/zh-hant/2021/04/blktrace/</link><pubDate>Mon, 19 Apr 2021 11:24:25 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2021/04/blktrace/</guid><description>可以用來定位 I/O 性能問題的工具有很多。常見的有 fio, dd, atop, iotop, iostat, vmstat 等。vmstat 可以提供系統性能的一個概覽，一般可以看出來性能問題究竟是不是 I/O 的鍋。想要具體查看每個設備的 I/O 情況，如 average request size, reads or writes per second，可以使用 iostat。
blktrace 介紹 更細粒度的分析，可以使用 blktrace。 blktrace 可以記錄在 I/O 棧的多個階段分別耗時多少。blktrace 的輸出結果是二進制文件，可以用 blkparse 解析，但是它仍然很難讀，需要使用 btt 來進一步轉換成更易讀的形式。
btt 輸出結果涉及到的一些基礎知識 btt 會對 I/O 棧 的不同階段的耗時做分析，這些階段是指：
Q — A block I/O is Queued G — Get Request M — A block I/O is Merged with an existing request. I — A request is Inserted into the device&amp;#39;s queue.</description></item><item><title>mount磁盤被秒umount的一個問題</title><link>https://travisbikkle.github.io/zh-hant/2019/09/a-case-of-mount-disk/</link><pubDate>Wed, 18 Sep 2019 11:24:22 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2019/09/a-case-of-mount-disk/</guid><description>問題描述 在 ubuntu 18.04 的機器上，自己搭了一個 samba 服務器。有一天要添加一塊磁盤，因爲服務器上還運行了一些其他服務，不想重啓，因此使用 partprobe 動態掃描了磁盤，分區，寫入 /etc/fstab，一切正常。 執行 mount -a，沒有任何報錯，不過磁盤就是沒有掛載上去。
解決思路 使用 mount 命令，可以手動掛載 無任何報錯出現，使用 umount 提示並未掛載 查看 journalctl -xe，發現是 systemd 在 umount 磁盤 在修改 /etc/fstab 後應該執行 systemctl daemon-reload 解決後，重新mount -a 解決 解決方案來自 https://unix.stackexchange.com/questions/169909/systemd-keeps-unmounting-a-removable-drive</description></item><item><title>使用Nginx代理k8s Cadvisor一例</title><link>https://travisbikkle.github.io/zh-hant/2019/09/nginx-k8s-cadvisor/</link><pubDate>Wed, 18 Sep 2019 11:24:20 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2019/09/nginx-k8s-cadvisor/</guid><description>k8s 自帶 cadvisor 監控，UI 界面監聽在 4194 端口，不過 HW 的 k8s 這裏監聽的地址是 127.0.0.1，因此相當於是一個擺設。使用開源的 nginx 可以代理該 url 並暴露在一個可以訪問的網卡上，不過出於學習的目的，使用我們自己編譯的類似於 nginx 的一個 NSP 來實現這個目的。
着手 包地址在內網，無法提供。運行此包有三個限制：
使用名稱爲 lb 的用戶執行，否則會報錯 getpwnam(&amp;ldquo;lb&amp;rdquo;)，因爲他們編譯寫死了執行用戶
LD_LIBRARY_PATH要加上包目錄中的 lib, luajit/lib, lualib/ 三個目錄
包最好放在 /usr/local，因爲編譯寫死了這個路徑…
配置 配置好在仍然兼容開源 nginx，關鍵配置如下：
upstream my_server { server 127.0.0.1:4194; keepalive 2000; } server { listen 4195; server_name 172.200.8.173; client_max_body_size 1024M; location / { proxy_pass http://127.0.0.1:4194; index index.html; } } 然後使用瀏覽器，訪問 http://172.200.8.173:4195，即可出現 cadvisor 的頁面。</description></item><item><title>一次ssh免密無法登錄的問題</title><link>https://travisbikkle.github.io/zh-hant/2019/08/ssh-cant-login/</link><pubDate>Sat, 10 Aug 2019 11:24:17 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2019/08/ssh-cant-login/</guid><description>自研數據庫升級的過程中，需要配置一次ssh免密登錄，以便在其中一臺機器，很方便的升級集羣所有服務器。但是在測試過程中，創建免密登錄的腳本失效了。
問題定位 通過手動創建公鑰，拷貝到其它機器的authrized_keys，發現仍然需要輸入密碼登錄；
通過ssh -v user@ip，查看詳細信息，發現其提示： Authentication can continue: publickey, gssapi-key…..password try publickey .ssh/….. try publickey .ssh/….. using password:
而正常的服務器上，該行爲： Servert accepted key…
看日誌，懷疑ssh客戶端沒有找到正確的公鑰文件，但是該文件確實存在在正確的路徑，且擁有正確的600權限。
嘗試使用其它端口，啓動服務端的sshd，發現可以免密登錄
嘗試在客戶端新建其它用戶，並使用22默認端口，一樣可以免密登錄
執行以下命令，對比新建用戶的目錄，和問題用戶的目錄，發現問題
ls -laZ 在問題用戶的目錄中，.ssh目錄的label爲unlabel，而正常用戶的.ssh，爲user_t。通過查詢及測試，發現該目錄爲user_t或者ssh_home_t的標籤，都可以測試通過，但是爲ublabeled不行。 那麼該目錄爲什麼爲unlabel呢？畢竟我們執行的只是ssh-keygen，目錄並非我們生成。 其實這個目錄的標籤，會繼承父目錄的標籤，而父目錄的標籤，由於未知原因，丟失了。因此，selinux的機制不允許ssh使用該目錄作爲公鑰目錄。該問題可以通過以下兩種方法解決：
restorecon -vv -r ~/.ssh
setenforce 0等關閉selinux</description></item><item><title>使用 Shell 腳本計算 Ip 網段</title><link>https://travisbikkle.github.io/zh-hant/2019/06/shell-calculate-ip/</link><pubDate>Mon, 10 Jun 2019 11:24:11 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2019/06/shell-calculate-ip/</guid><description>背景 當無法使用 ipcalc 時，可以考慮使用 shell 實現一個 ipcalc.sh。
ipcalc.sh.
#!/bin/bash net=&amp;quot;$1&amp;quot; ip=(${net%/*}) cdr=(${net##*/}) cdr2mask(){ #set -- $((5-(&amp;quot;$1&amp;quot;/8))) 255 255 255 255 $((2**8-2**(8-&amp;quot;$1&amp;quot;%8))) 0 0 0 set -- $(( 5-(&amp;quot;$1&amp;quot;/8) )) 255 255 255 255 $(( (255 &amp;lt;&amp;lt; (8-(&amp;quot;$1&amp;quot;%8))) &amp;amp; 255 )) 0 0 0 [[ $1 -gt 1 ]] &amp;amp;&amp;amp; shift $1 || shift #echo $#:$@ #255 255 255 255 253 0 0 0 shift #^_____________^ 255.255.255.255 shift # ^_____________^ 255.255.255.253 shift 2 # ^___________^ 255.</description></item><item><title>Mysql 性能測試報告慘不忍睹的一次原因</title><link>https://travisbikkle.github.io/zh-hant/2019/06/a-case-of-mysql-performance/</link><pubDate>Sat, 01 Jun 2019 11:24:20 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2019/06/a-case-of-mysql-performance/</guid><description>背景 新版本發佈在即，新增與kafka，zk，redis等其它服務合設的場景，因此需要性能測試探個底。但是性能測試人員反饋，分設與合設性能差距數萬倍。
問題 安裝兩套某版本的MySQL，分別是與redis等服務合設的一套（32U64G），MySQL單獨安裝的一套（8U16G）。
使用jmeter並且採用同樣的測試模型，對服務進行長穩測試，其中合設的一套資源，其它服務也會跑長穩。
觀察jmeter報告，發現合設的MySQL中，平均時間average爲20s以上，throughput在10個/秒以下。而獨立的MySQL，average爲ms級別，throughput爲數萬個。
此時應該隨報告提供環境cpu，磁盤，內存，網絡帶寬，測試模型等情況。但是由於某些原因，測試同學無法提供。
測試模型和環境 該測試模型很簡單，1個int主鍵，20個varchar（256）字段共100w的數據。 使用select * from xxx where id in random(1, 100w); 進行1000併發測試。
因爲某些原因，測試同學無法提供定位問題需要的幫助，因此，我們只收集了以下幾種信息。
cpu及內存（top）
iostat -x 1 以及其它 /dev/mysqllv(mysql 數據掛載磁盤)
查看jmeter併發服務器的jmap histro
查看mysql show processlist，show status like &amp;ldquo;%Thread%&amp;ldquo;等
定位過程 cpu，內存等資源佔用不高。
iostat 磁盤讀寫速度不高，但是%util佔比居高不下
單獨執行一條sql語句，偶爾很快，偶爾很慢
show processlist反饋，大量連接停留在freeing items的狀態，說明連接在等候io操作，與上述iostat結論不謀而合
hdparm -Tt 合設機器只有60m/s的磁盤速度（未停服務，不準確）
查詢審計日誌，發現審計日誌大量積壓，5M/2分鐘的速度在持續增加
走管理手段，要求測試人員提供獨立 MySQL 機器信息，其反饋非其本人測試並且已卸載。我們強烈要求重新安裝獨立mysql
獨立mysql表現也慢，與合設無異（說明測試沒有控制好變量）
最終發現，其獨立mysql測試版本爲較老版本
結論 新版本mysql開啓audit日誌，並且安全部門參照公司《mysql 安全加固規範》中的必須修改項——審計日誌的策略 audit_log_strategy 必須爲 SYNCHRONOUS , 利用自動化工具掃描並發現我們的mysql沒有開啓此項，提了單。修改人員在修改時因爲經驗不足，未多想，便直接修改。
該項的另一個可選值爲ASYNCHRONOUS，即異步。與主從複製的同步，半同步及異步類似，作用不言自明。改爲該值後，問題消失。</description></item><item><title>Mysql Jdbc 報錯 Operation Not Allowed After Statement Closed</title><link>https://travisbikkle.github.io/zh-hant/2019/06/mysql-jdbc-operation-not-allowed/</link><pubDate>Sat, 01 Jun 2019 11:24:19 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2019/06/mysql-jdbc-operation-not-allowed/</guid><description>背景 業務上來說，連你們的mysql連不上，連別人的（其它部門的mysql）都能連上。查看其日誌，報了一行錯誤&amp;quot;No operations allowed after statement closed&amp;quot;。 這句話的意思，說的很清楚，不應該用關閉後的statement執行查詢。但是因爲我們是服務化的mysql，公司在遇到問題甩鍋給其它部門的習慣由來已久，所以還是要幫業務解決。
大致代碼 class Main { private static connection; private static statement; static { connection = getConnection(); statement = connection.createStatement(); } public static query(){ statement.executeUpdate(&amp;quot;xxxx&amp;quot;); statement.close(); } } 定位 首先，業務反饋的是“連接不上”，但是報錯位置其實是在executeUpdate一行，在此鄙視這些人，日誌都不看清楚就開始推脫責任。在其代碼中加入debug日誌
public static query(){ log(statement.isClosed()); statement.executeUpdate(&amp;quot;xxxx&amp;quot;); statement.close(); } 發現日誌打了兩次，第一次爲false，第二次爲true並報錯。 查看該類引用位置，發現爲一個定義了init-method的bean，類似於
&amp;lt;bean id=&amp;quot;xxxx&amp;quot; class=&amp;quot;xxxx&amp;quot; init-method=&amp;quot;query&amp;quot; /&amp;gt; 最終建議：
將bean的scope更改爲singleton
重構Main類類似如下
class Main { private static connection; private static statement; private static void getConnection { DriverManager.xxxx statement = connection.</description></item><item><title>Mysql Order By 對同一值的 Varchar 列排序問題</title><link>https://travisbikkle.github.io/zh-hant/2019/05/mysql-order-by-varchar/</link><pubDate>Fri, 24 May 2019 11:24:03 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2019/05/mysql-order-by-varchar/</guid><description>背景 TODO
數據 DROP TABLE IF EXISTS `tbl_rn_log`; /*!40101 SET @saved_cs_client = @@character_set_client */; /*!40101 SET character_set_client = utf8 */; CREATE TABLE `tbl_rn_log` ( `SN` bigint(20) NOT NULL AUTO_INCREMENT, `STATUS` varchar(20) COLLATE utf8_bin NOT NULL, `SENDER` varchar(128) COLLATE utf8_bin DEFAULT NULL, `SENDTIME` bigint(20) NOT NULL, `SENDIP` varchar(128) COLLATE utf8_bin DEFAULT NULL, `OPERATIONUSER` varchar(128) COLLATE utf8_bin DEFAULT NULL, `ADDRESSES` varchar(1024) COLLATE utf8_bin NOT NULL, `BRIEFINFO` varchar(1024) COLLATE utf8_bin DEFAULT NULL, `TENANTID` varchar(50) COLLATE utf8_bin DEFAULT NULL, `PROJECT` varchar(32) COLLATE utf8_bin DEFAULT 'global', PRIMARY KEY (`SN`), KEY `TBL_RN_LOG_SENDTIME_INDEX` (`SENDTIME`) ) ENGINE=InnoDB AUTO_INCREMENT=53 DEFAULT CHARSET=utf8 COLLATE=utf8_bin; /*!</description></item><item><title>Mysql 主從複製異常恢復</title><link>https://travisbikkle.github.io/zh-hant/2019/04/recover-mysql-from-replication-error/</link><pubDate>Thu, 25 Apr 2019 11:24:16 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2019/04/recover-mysql-from-replication-error/</guid><description>檢查版本 如果版本較老，基於binlog而不是gtid的版本， 數據量較小，可以參考 基於binlog的老版本。
基於binlog的老版本 1. 登錄主機數據庫， mysql --login-path=local 執行 mysql&amp;gt; stop slave; mysql&amp;gt; show master status; 記錄以上master status的 log_file 和 log_pos 信息 mysql&amp;gt; exit; 2. 進入備份腳本目錄（根據版本不同，可能在以下位置） cd /opt/backup/mysql/backup_script 或者 cd /opt/backup/mysql/backup_script 執行 ./backupandDelete.sh 3. 找到最新備份的文件，如 cd /opt/backup/mysql/backup_data/xxxxx 或者 cd /opt/backup/mysql/backup_data/xxxxx 找到備份文件 xxxxx.sql.gz 將其拷貝到另外一臺機器 scp .. .. 4. 在另外一臺機器，解壓 gunzip -d xxxx.sql.gz 得到如 /root/xxxx.sql 的文件 5. 登錄MySQL mysql --login-path=local 執行(注意替換路徑，和ip，端口，密碼等信息) mysql&amp;gt; set sql_log_bin=0; mysql&amp;gt; source /root/xxxx.sql mysql&amp;gt; select user,host from mysql.</description></item><item><title>Suse 安裝 Nginx</title><link>https://travisbikkle.github.io/zh-hant/2019/04/suse12-nginx/</link><pubDate>Thu, 18 Apr 2019 11:24:22 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2019/04/suse12-nginx/</guid><description>http://nginx.org/packages/mainline/ http://nginx.org/packages/mainline/sles/12/x86_64/ http://nginx.org/packages/mainline/sles/12/x86_64/RPMS/nginx-1.15.12-1.sles12.ngx.x86_64.rpm
rpm -ivh nginx-1.15.12-1.sles12.ngx.x86_64.rpm
autoindex vi /etc/nginx/conf.d/default.conf
location / { root /var/www/html; index index.html index.htm; autoindex on; autoindex_exact_size off; autoindex_localtime on; } chmod -R 777 /var/www /usr/sbin/nginx -c /etc/nginx/nginx.conf</description></item><item><title>Susesp 編譯 Apache ..</title><link>https://travisbikkle.github.io/zh-hant/2019/04/suse11sp1-compile-apache/</link><pubDate>Thu, 18 Apr 2019 11:24:11 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2019/04/suse11sp1-compile-apache/</guid><description>背景：suse 11 sp1 機器編譯安裝帶有指定模塊的 apache 2.4.34. 暫時沒有bicp代碼訪問權限，先放這裏 == 第一步 安裝openssl
cd /data/bicpinstall/ tar zxvf openssl-1.1.0i.tar.gz cd openssl-1.1.0i export LDFLAGS=-ldl export LIBPATH=&amp;quot;/data/bicpinstall/ssl&amp;quot; export LIBS=&amp;quot;-L/data/bicpinstall/ssl&amp;quot; export SSL_LIBS=&amp;quot;-L/data/bicpinstall/ssl&amp;quot; export CPPFLAGS=&amp;quot;-I/data/bicpinstall/ssl/include/openssl&amp;quot; ./config --prefix=/data/bicpinstall/ssl shared make &amp;amp;&amp;amp; make install rm -rf /data/bicpinstall/ssl/ssl/man 第二步 生成證書 cd /data/bicpinstall/ssl/bin openssl genrsa -passout pass:cHpxHUm+v5teANoYurlMvA2+Gdg+ifm -des3 -out server.key 1024 openssl req -new -out server.csr -key server.key -passin pass:cHpxHUm+v5teANoYurlMvA2+Gdg+ifm -passout pass:cHpxHUm+v5teANoYurlMvA2+Gdg+ifm -subj /C=CN/O=huawei/CN=10.139.200.36 -config ../ssl/openssl.cnf openssl x509 -req -days 3650 -in server.</description></item><item><title>Mysql 原廠檢查清單</title><link>https://travisbikkle.github.io/zh-hant/2019/04/mysql-check-list/</link><pubDate>Tue, 16 Apr 2019 11:24:03 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2019/04/mysql-check-list/</guid><description>1) MySQL配置文件 （my.cnf 或 my.ini）
2) MySQL完整的錯誤日誌文件 （error log file）.（如果文件太大，可以壓縮後上傳）
3) MySQL的 slow query log 文件 （如果已經配置收集的話）.
4) 生成下面的mysql_output.txt文本文件（請在查詢性能低、響應慢時運行）：
（請使用具有SUPER權限的MySQL用戶（如root）登錄MySQL命令行客戶端並運行） TEE mysql_output0416.txt; select now(),@@version,@@version_comment,@@hostname,@@port,@@basedir,@@datadir,@@tmpdir,@@log_error, @@slow_query_log_file,user(),current_user(),/*!50600 @@server_uuid,*/@@server_id\G SHOW GLOBAL VARIABLES; SHOW GLOBAL STATUS; SHOW ENGINES\G SHOW PLUGINS\G select benchmark(50000000,(1234*5678/37485-1298+8596^2)); #should take less than 20 seconds SELECT ENGINE, COUNT(*), SUM(DATA_LENGTH), SUM(INDEX_LENGTH) FROM information_schema.TABLES GROUP BY ENGINE; SHOW ENGINE INNODB STATUS; /*!50503 SHOW ENGINE performance_schema STATUS */; /*!50503 SELECT * FROM performance_schema.setup_instruments WHERE name LIKE 'wait/sync%' AND (enabled='yes' OR timed='yes')*/; -- Info on transactions and locks SELECT r.</description></item><item><title>Mysql 問題與源碼</title><link>https://travisbikkle.github.io/zh-hant/2019/04/mysql-problem-and-source-code/</link><pubDate>Sat, 13 Apr 2019 11:24:17 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2019/04/mysql-problem-and-source-code/</guid><description>問題1: 連接數爲214， 登錄經常報錯 too many connections 在公司MySQL企業版服務化開發的初期，我們曾經遇到一個問題，即在連接MySQL的時候報錯 too many connections, 即使是新安裝的MySQL。在以前的社區版MySQL也曾經遇到過類似的問題，當時MySQL是用rpm安裝並使用systemd啓動的方式。 此次企業版的MySQL啓動並未託管到systemd，因此解決辦法不能照搬。
定位過程 爲了能夠登錄，首先只能重啓MySQL，執行
show variables like &amp;quot;max_conne%&amp;quot;; 發現連接數並非配置文件中定義的 2000，而是一個奇怪的數字 214；
執行 ulimit -a 或者 cat /proc/pidof mysqld/limits
發現 open files 爲一個較低的默認值 1024；（代碼中有改動該值的邏輯，但是最終並未生效，最終發現是公司系統鏡 像/etc/security/limits.d/...的默認值有問題，此處不延伸） core file size (blocks, -c) 0 data seg size (kbytes, -d) unlimited scheduling priority (-e) 0 file size (blocks, -f) unlimited pending signals (-i) 23883 max locked memory (kbytes, -l) 64 max memory size (kbytes, -m) unlimited open files (-n) 1024 pipe size (512 bytes, -p) 8 POSIX message queues (bytes, -q) 819200 real-time priority (-r) 0 stack size (kbytes, -s) 8192 cpu time (seconds, -t) unlimited max user processes (-u) 23883 virtual memory (kbytes, -v) unlimited file locks (-x) unlimited</description></item><item><title>讓 Git 在 Windows 上使用 Lf 換行符</title><link>https://travisbikkle.github.io/zh-hant/2019/03/git-windows-lf/</link><pubDate>Fri, 22 Mar 2019 11:24:10 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2019/03/git-windows-lf/</guid><description>1git config --global core.eol lf 2git config --global core.autocrlf input For repos that were checked out after those global settings were set, everything will be checked out as whatever it is in the repo — hopefully LF (\n). Any CRLF will be converted to just LF on checkin.
With an existing repo that you have already checked out — that has the correct line endings in the repo but not your working copy — you can run the following commands to fix it:</description></item><item><title>Centos Docker 入門</title><link>https://travisbikkle.github.io/zh-hant/2019/02/centos7-docker-getstart/</link><pubDate>Sun, 17 Feb 2019 11:24:08 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2019/02/centos7-docker-getstart/</guid><description>快速上手 install(offline).
# 在有網絡的機器上，執行以下命令，獲取安裝所需的包 $ yum install --downloadonly --downloaddir=/opt/utils yum-utils device-mapper-persistent-data lvm2 $ yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo $ yum install --downloadonly --downloaddir=/opt/all_packages docker-ce docker-ce-cli containerd.io root@192.168.31.201:/opt/all_packages #0$ l audit-libs-python-2.8.4-4.el7.x86_64.rpm libcgroup-0.41-20.el7.x86_64.rpm checkpolicy-2.5-8.el7.x86_64.rpm libsemanage-python-2.5-14.el7.x86_64.rpm containerd.io-1.2.2-3.3.el7.x86_64.rpm policycoreutils-2.5-29.el7_6.1.x86_64.rpm container-selinux-2.74-1.el7.noarch.rpm policycoreutils-python-2.5-29.el7_6.1.x86_64.rpm docker-ce-18.09.2-3.el7.x86_64.rpm python-IPy-0.75-6.el7.noarch.rpm docker-ce-cli-18.09.2-3.el7.x86_64.rpm setools-libs-3.3.8-4.el7.x86_64.rpm root@192.168.31.201:/opt/all_packages #0$ l ../utils/ device-mapper-1.02.149-10.el7_6.3.x86_64.rpm lvm2-2.02.180-10.el7_6.3.x86_64.rpm device-mapper-event-1.02.149-10.el7_6.3.x86_64.rpm lvm2-libs-2.02.180-10.el7_6.3.x86_64.rpm device-mapper-event-libs-1.02.149-10.el7_6.3.x86_64.rpm python-chardet-2.2.1-1.el7_1.noarch.rpm device-mapper-libs-1.02.149-10.el7_6.3.x86_64.rpm python-kitchen-1.1.1-5.el7.noarch.rpm libxml2-python-2.9.1-6.el7_2.3.x86_64.rpm yum-utils-1.1.31-50.el7.noarch.rpm # 在離線機器上， 執行以下命令以安裝 $ yum localinstall /opt/utils/*.rpm $ yum localinstall /opt/all_packages/*.rpm install docker-compose.
$ curl -L &amp;quot;https://github.com/docker/compose/releases/download/1.23.2/docker-compose-$(uname -s)-$(uname -m)&amp;quot; \ -o /usr/local/bin/docker-compose chmod +x /usr/local/bin/docker-compose $ docker-compose --version install docker-machine.</description></item><item><title>Mysqldump 使用案例</title><link>https://travisbikkle.github.io/zh-hant/2019/02/a-case-of-mysqldump/</link><pubDate>Sun, 10 Feb 2019 11:24:21 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2019/02/a-case-of-mysqldump/</guid><description>背景 客戶N在使用H部門提供的MySQL遇到部分性能問題後，未得到H部門的及時支撐。機緣巧合，我們的服務化MySQL剛剛發佈第一版，客戶N有意切換我們的MySQL。由於部門策略調整，我們準備由原來的社區MySQL切換爲部門R的商業版MySQL，其間對接問題不提，客戶提出的首要問題是前期嘗試通過mysqldump備份數據，發現有報錯並且很慢，我們的策略是 爲拓展業務先把鍋接下來吧 答應先提供數據遷移方案供客戶評估。
機器、數據、應用情況 源機器cpu核心數16，內存32G；
兩臺機器，一個是master，一個是slave；未配置互爲主備；
開啓了基於GTID的主從複製；
從鏡像庫來看，數據量3800W左右，實際生產環境每天還會增加約不到100w；
0-1w
1w-10w
10w-50w
50w-100w
100w-1000w
&amp;gt;1000w
表數量約
2105
83
28
5
6
1
MySQL爲社區版5.7.23，所有表均爲INNODB引擎；
據客戶N的業務人員反饋，他們嘗試使用mysqldump可能會報錯。
一些準備工作 爲了能夠順滑的開展後期工作，我習慣先整理一些常用的命令，以備隨時複製粘貼…
-- 查詢所有業務數據庫的表名，數據庫，存儲引擎信息 select table_name,table_schema,engine from information_schema.tables where engine='innodb' and table_schema not in('mysql','information_schema','performance_schema','sys'); -- 查詢所有業務數據庫的表的數量 select count(*) from information_schema.tables where engine='innodb' and table_schema not in('mysql','information_schema','performance_schema','sys'); -- 查詢所有表的數據量 SELECT CONCAT(TABLE_SCHEMA,'.',TABLE_NAME) AS table_name, IFNULL(TABLE_ROWS,0) as table_rows FROM information_schema.tables WHERE TABLE_SCHEMA NOT IN ('mysql','information_schema','performance_schema','sys') ORDER BY 2; -- 查詢所有業務數據庫的視圖數量 select table_name,table_schema from information_schema.</description></item><item><title>Suse 新增磁盤</title><link>https://travisbikkle.github.io/zh-hant/2019/02/suse-add-a-disk/</link><pubDate>Sun, 10 Feb 2019 11:24:14 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2019/02/suse-add-a-disk/</guid><description>fdisk -l DISK=vdb disk_list=(`cat /proc/partitions | sort | grep -v &amp;quot;name&amp;quot; |grep -v &amp;quot;loop&amp;quot; |awk '{print $4}'| sed /^[[:space:]]*$/d | grep -v &amp;quot;[[:digit:]]&amp;quot; | uniq`) parted -s /dev/${DISK} mklabel gpt parted -s /dev/${DISK} print |grep softhome |wc -l DISKSIZE=`parted -s /dev/${DISK} unit GB print | grep '^Disk' |grep GB | awk '{print $3}'` DISK1=`echo ${DISK}1` # parted -s /dev/${DISK} mkpart softhome 0G $DISKSIZE parted -s /dev/${DISK} set 1 lvm vgname=`echo &amp;quot;/opt&amp;quot; | awk -F'/' '{print $NF}'` vgname=&amp;quot;${vgname}vg&amp;quot; # optvg lvname=`echo &amp;quot;/opt&amp;quot; | awk -F'/' '{print $NF}'` lvname=&amp;quot;${lvname}lv&amp;quot; # optlv echo y | pvcreate /dev/${DISK1} vgcreate &amp;quot;$vgname&amp;quot; /dev/${DISK1} free=`vgdisplay &amp;quot;$vgname&amp;quot; |grep &amp;quot;Total PE&amp;quot; |awk '{print $3}'` echo y | lvcreate -l &amp;quot;$free&amp;quot; -n &amp;quot;$lvname&amp;quot; &amp;quot;$vgname&amp;quot; lvPath=`lvdisplay &amp;quot;$vgname&amp;quot; | grep &amp;quot;LV Path&amp;quot; | awk '{print $3}'` #格式化 mkfs.</description></item><item><title>Mysql . 主從同步</title><link>https://travisbikkle.github.io/zh-hant/2019/02/mysql5replication/</link><pubDate>Sun, 10 Feb 2019 11:24:12 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2019/02/mysql5replication/</guid><description>大綱 本文參考或翻譯自： https://dev.mysql.com/doc/refman/5.7/en/replication.html
MySQL 5.7 支持多種主從複製的方法
傳統方法：依賴binlog文件和文件的position保持同步 （https://dev.mysql.com/doc/refman/5.7/en/replication-configuration.html）
新方法： 依賴全局事務id即global transaction identifer（GTIDs） （https://dev.mysql.com/doc/refman/5.7/en/replication-gtids.html）
replication 支持不同類型的同步
異步複製（asynchronous，默認）
同步複製（只有 NDB 集羣纔有的一種特性）
半同步複製（semisynchronous，是對異步複製的一種補充）
With semisynchronous replication, a commit performed on the master blocks before returning to the session that performed the transaction until at least one slave acknowledges that it has received and logged the events for the transaction; see Semisynchronous Replication(https://dev.mysql.com/doc/refman/5.7/en/replication-semisync.html). MySQL 5.7 also supports delayed replication such that a slave server deliberately lags behind the master by at least a specified amount of time; see Section 16.</description></item><item><title>一次 Mysql 死鎖問題解決</title><link>https://travisbikkle.github.io/zh-hant/2019/02/mysql-dead-lock-troubleshoot-case/</link><pubDate>Sun, 10 Feb 2019 11:24:09 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2019/02/mysql-dead-lock-troubleshoot-case/</guid><description>一個業務反應，環境多次出現大量服務不可使用，如app導入不響應，用戶更新超時，bpm創單超時等等。查看數據庫的processlist，發現有大量的處於Waiting for table metadata lock狀態的查詢，其中包含T_APP_INFO、TBL_UM_USER、T_TICKET_BASICINFO等表，跟故障服務一致，確定故障原因是數據庫鎖表引起； 業務自行導出所有的阻塞task，並按照阻塞時間排序，發現第一條引起阻塞的是一條來來自於localhost的 由root用戶發起的批量鎖表語句，疑似是問題根因。
上面這段是業務說的，已經排查的比較深入了，給個贊。
我之前通過直接kill掉這個query線程，他們的業務就正常走下去了，因爲忙其他事情，所以就沒有再關注。後面他們又出現了這個問題，這次必須要解決了。所以記錄一下定位過程。
定位思路 [WHAT] root@localhost 的進程在做什麼？
MySQL 所有“卡住”問題，先看進程列表：.
show processlist; +---------+------+-----------+------+---------+------+----------+------------------+ | Id | User | Host | db | Command | Time | State | Info | +---------+------+-----------+------+---------+------+----------+------------------+ | 3467133 | root | localhost | NULL | Query | 320400 | Waiting for table metadata lock | LOCK TABLES `....| +---------+------+-----------+------+---------+------+----------+------------------+ 看到 root@localhost 的用戶，有一條狀態爲 Waiting for table metadata lock 的查詢。查詢語句爲“LOCK TABLES……”。
猜測：是後臺備份進程在鎖表，由於也有可能業務自己登陸後臺鎖表，所以需要證明這個確實是備份工具發起的語句。</description></item><item><title>Vmware Centos 雙網卡平面設置</title><link>https://travisbikkle.github.io/zh-hant/2019/02/vmware-centos7-interfaces/</link><pubDate>Sun, 10 Feb 2019 11:24:05 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2019/02/vmware-centos7-interfaces/</guid><description>[root@host1 ~]# ip a 1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2: ens33: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000 link/ether 00:0c:29:7d:ba:48 brd ff:ff:ff:ff:ff:ff inet 192.168.17.101/24 brd 192.168.17.255 scope global noprefixroute ens33 valid_lft forever preferred_lft forever inet6 fe80::64ee:1323:6aaa:61da/64 scope link noprefixroute valid_lft forever preferred_lft forever 3: ens37: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000 link/ether 00:0c:29:7d:ba:52 brd ff:ff:ff:ff:ff:ff inet 192.</description></item><item><title>Mysql 查詢鎖狀態常用命令</title><link>https://travisbikkle.github.io/zh-hant/2019/02/mysql-lock-status-commands/</link><pubDate>Sun, 10 Feb 2019 11:24:04 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2019/02/mysql-lock-status-commands/</guid><description>show status like '%lock%; select * from information_schema.processlist; select * from information_schema.processlist where state like &amp;quot;%Waiting%&amp;quot;; select * from information_schema.innodb_trx; SELECT * FROM INFORMATION_SCHEMA.INNODB_LOCK_WAITS; SELECT INNODB_LOCKS.* FROM INNODB_LOCKS JOIN INNODB_LOCK_WAITS ON (INNODB_LOCKS.LOCK_TRX_ID = INNODB_LOCK_WAITS.BLOCKING_TRX_ID); SELECT * FROM INNODB_LOCKS WHERE LOCK_TABLE = db_name.table_name; SELECT TRX_ID, TRX_REQUESTED_LOCK_ID, TRX_MYSQL_THREAD_ID, TRX_QUERY FROM INNODB_TRX WHERE TRX_STATE = 'LOCK WAIT'; show engine innodb status;</description></item><item><title>Mysql 遠程無法連接問題定位記錄</title><link>https://travisbikkle.github.io/zh-hant/2019/02/mysql-remote-connect-failed/</link><pubDate>Fri, 01 Feb 2019 11:24:09 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2019/02/mysql-remote-connect-failed/</guid><description>某業務通過Hibernate訪問mysql，後臺報錯 Access denied for user matexxx@xxxx (using password: YES); 一般搞過開發的人都知道，這種問題不是密碼錯了，就是遠程連接未打開，這兩者其實都屬於一個問題，就是用戶的grant權限問題，但是此業務情況稍特殊。定位過程如下。
查看用戶 SELECT USER,HOST FROM MYSQL.USER; 發現用戶matexxx對應的host爲 %，說明遠程連接已經打開；詢問業務是否更改過密碼，引出問題背景： 業務曾重裝過mysql，使用mysqldump將舊庫數據備份，並且只在新庫的master上執行了一次恢復操作。
查看主從複製的狀態 SHOW SLAVE STATUS\G 發現互爲主備的mysql機器，其中一臺的slave io狀態爲connecting，Last_IO_Error 顯示覆制用戶 replicator 禁止登錄。既然複製用戶和業務用戶都無法登錄，懷疑點聚焦在用戶的grant語句方面，原因可能是其備份恢復過程中出現錯誤操作，其要求緊急恢復，原因就暫不深挖。
【解決】 主從複製的問題要先解決。錯誤產生的原因很可能是其使用mysqldump &amp;ndash;all-databases備份，然後在配置好主從的機器上直接恢復，導致兩邊的機器replicator主從複製用戶的ip並不正確（實際應該配置對方ip）。恢復方法：
請將下面語句中的變量替換爲實際的值.
GRANT REPLICATION SLAVE ON *.* TO '${repl_user_name}'@'${IP}' IDENTIFIED BY '${repl_user_pwd}'; FLUSH PRIVILEGES; SHOW MASTER LOGS; --在master(互爲主備的機器，master就是你要複製的機器，請自行理解)上執行 -- 記錄上面執行語句的結果，例如 -- Log_name：mysql-bin.000002 -- File_size：483 STOP SLAVE; --在出錯的機器上，執行 CHANGE MASTER TO MASTER_HOST='${master_ip}',MASTER_PORT='3306',MASTER_LOG_FILE='mysql-bin.000002',MASTER_LOG_POS=483; START SLAVE; 回到主要問題 重啓業務應用（反正已經壞了）發現仍然無法登錄，查看進程列表，發現大量連接狀態都爲 Waiting in connection_control plugin，而且在另一臺機器C上面使用matexxx登錄一直卡住，而使用root卻沒有問題，證明此用戶登錄失敗，被拒絕後觸發了 connection_control 的機制。</description></item><item><title>使用 Systemd 託管的 Mysql 最大連接數問題</title><link>https://travisbikkle.github.io/zh-hant/2019/01/systemd-mysql-maxconnections/</link><pubDate>Sun, 20 Jan 2019 11:24:15 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2019/01/systemd-mysql-maxconnections/</guid><description>最大連接數問題
背景： mysql 最大連接數在設置爲2000的情況下，併發始終只能達到480多； 其它遇到過類似情況的項目組更改ulimit -s（stack size）到1024可以解決問題，但是我們經過測試無效； 據說前期定位人員諮詢過mysql原廠的人，沒發現有什麼配置問題。
測試工具 mysqlslap -h127.0.0.1 -uroot -p123456789 &amp;ndash;concurrency=5000 &amp;ndash;iterations=1 &amp;ndash;auto-generate-sql &amp;ndash;auto-generate-sql-load-type=mixed &amp;ndash;auto-generate-sql-add-autoincrement &amp;ndash;engine=innodb &amp;ndash;number-of-queries=1000000
show status like &amp;ldquo;%Thread%&amp;rdquo;&amp;quot;;
排查過程 ulimit cat /proc/pidof mysqld/limits /etc/systemd/system.conf /etc/systemd/user.conf systemctl edit mysql.service /usr/lib/systemd/system/mysql.service
直接使用mysqld啓動，不用service，發現正常。最終在參照不使用service啓動的mysql pid limits更改mysql.service所有ulimit到最大值也沒用。 systemctl show mysql.service 發現TasksMax字段值爲512，與480比較相近。
文檔： https://www.freedesktop.org/software/systemd/man/systemd.resource-control.html
嘗試在/usr/lib/systemd/system/mysql.service加入以下配置
TasksMax=infinity 問題解決。
後續/深入 The mappings of systemd limits to ulimit Directive ulimit equivalent Unit LimitCPU= ulimit -t Seconds LimitFSIZE= ulimit -f Bytes LimitDATA= ulimit -d Bytes LimitSTACK= ulimit -s Bytes LimitCORE= ulimit -c Bytes LimitRSS= ulimit -m Bytes LimitNOFILE= ulimit -n Number of File Descriptors LimitAS= ulimit -v Bytes LimitNPROC= ulimit -u Number of Processes LimitMEMLOCK= ulimit -l Bytes LimitLOCKS= ulimit -x Number of Locks LimitSIGPENDING= ulimit -i Number of Queued Signals LimitMSGQUEUE= ulimit -q Bytes LimitNICE= ulimit -e Nice Level LimitRTPRIO= ulimit -r Realtime Priority LimitRTTIME= No equivalent</description></item><item><title>Tcpdump 常用命令</title><link>https://travisbikkle.github.io/zh-hant/2019/01/tcpdump-common-commands/</link><pubDate>Sat, 12 Jan 2019 11:24:18 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2019/01/tcpdump-common-commands/</guid><description>man tcpdump
https://en.wikipedia.org/wiki/Multicast_address
https://en.wikipedia.org/wiki/Subnetwork
[ip address classes] (http://www.vlsm-calc.net/ipclasses.php)
http://vod.sjtu.edu.cn/help/Article_Print.asp?ArticleID=631
tcpdump usage ``` tcpdump # print number like ip and port tcpdump -n tcpdump -c 4 tcpdump -i eth1 tcpdump -i any tcpdump host 100.107.166.116 tcpdump src host 100.107.166.116 tcpdump -n -i any dst port 3306 or dst port 22 tcpdump -n -i any dst port 3306 || dst port 22 tcpdump -n -i any (dst port 3306 || dst port 22) and dst host 100.</description></item><item><title>Mysql Load Data 數據膨脹</title><link>https://travisbikkle.github.io/zh-hant/2018/12/mysql-load-data-size-too-big/</link><pubDate>Sat, 29 Dec 2018 11:24:14 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2018/12/mysql-load-data-size-too-big/</guid><description>發現問題 100w 100字段數據 後臺膨脹係數較大。 用膨脹係數表示load data後MySQL後臺 表名.ibd 文件的大小與所 load 的 data.xdr 文件的比值。 膨脹係數(50f100w)代表使用了50個字段100w行的數據進行測試。
分解問題 是否是數據量較大，導致膨脹係數較大？ 構造 10f10w 和 10f100w 進行對比，排除單純因數據量導致膨脹的推測。
數據模型（字段數）
數據模型（行數）
數據文件大小（MB）
load 時長(s)
表文件大小(MB)
單次導入增加
字段類型
10
10w
58.9
3.02
76
76
"3 int,
3 double(20,2),
4 VARCHAR(256)
"
10
100w
592
33.96
688
688
"3 int,
3 double(20,2),
4 VARCHAR(256)
"
是否是因字段數不同，導致膨脹係數較大？ 數據模型 create table loadtest10f( record_001 VARCHAR(256), record_002 VARCHAR(256), record_003 VARCHAR(256), record_004 VARCHAR(256), record_005 VARCHAR(256), record_006 VARCHAR(256), record_007 VARCHAR(256), record_008 VARCHAR(256), record_009 VARCHAR(256), record_010 VARCHAR(256), .</description></item><item><title>在 Asciidoc 文檔中使用 Latex</title><link>https://travisbikkle.github.io/zh-hant/2018/11/asciidoc-latex/</link><pubDate>Tue, 06 Nov 2018 11:24:19 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2018/11/asciidoc-latex/</guid><description>本文基於 asciidoctor 1.5.7.13，其通過 mathjax 實現 LaTex 字體的顯示，方法和 markdown 差不多，區別是 markdown（不同差距實現方法不同）使用 $$ 或者 $``$ 包圍 LaTex 語法，而 asciidoctor 使用 stem:[] 包圍 LaTex 語法。
單個符號對照表 渲染後
源碼
stem:[\cdot]
stem:[\cdot]
stem:[\times]
stem:[\times]
stem:[a^{prime} a]
stem:[a^{prime} a]
stem:[a’’]
stem:[a’’]
stem:[a’’’]
stem:[a’’’]
stem:[\pm]
stem:[\pm]
stem:[\mp]
stem:[\mp]
stem:[!]
stem:[!]
stem:[\dots]
stem:[\dots]
stem:[\ldots]
stem:[\ldots]
stem:[\cdots]
stem:[\cdots]
stem:[\vdots]
stem:[\vdots]
stem:[\ddots]
stem:[\ddots]
行列式 渲染後
源碼
15\\ 7 \end{array}right) \vec{a} = \left[\begin{array}{rrrr} 15\\ 7 \end{array}\right) [latexmath] ++++ \begin{cases} \ u_{tt}(x,t)= b(t)\triangle u(x,t-4)&amp;amp;\\ \ \hspace{42pt}- q(x,t)f[u(x,t-3)]+te^{-t}\sin^2 x, &amp;amp; t \neq t_k; \\ \ u(x,t_k^+) - u(x,t_k^-) = c_k u(x,t_k), &amp;amp; k=1,2,3\ldots ;\\ \ u_{t}(x,t_k^+) - u_{t}(x,t_k^-) =c_k u_{t}(x,t_k), &amp;amp; k=1,2,3\ldots\ .</description></item><item><title>Btrace 使用教程</title><link>https://travisbikkle.github.io/zh-hant/2018/10/btrace-manual/</link><pubDate>Fri, 19 Oct 2018 11:24:06 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2018/10/btrace-manual/</guid><description>BTrace 是 Java 的一個診斷工具，可以在不重啓應用的情況下，對應用進行時間耗費、參數及結果跟蹤、方法調用跟蹤等分析。
BTrace 術語 Probe Point
位置
Trace Actions or Actions
追蹤語句
Action Methods
追蹤語句所在的靜態方法
BTrace 程序結構 一個 BTrace 程序 是一個 Java 類，包含數個由 BTrace 註解 註釋的 public static void 方法。這些註解被用來指定被追蹤程序的 Probe Point. Tracing Actions 在這些靜態方法內定義。這些靜態方法也即上文提到的 Action Methods。
BTrace 的限制 不能 創建對象，數組。
不能 拋出、捕獲異常。
不能 調用任意實例或靜態方法，只能調用 BTraceUtils 中的方法。
不能 修改目標程序的靜態或實例變量，不過 BTrace 程序自己不做限制。
不能 有實例變量或方法，方法不能有返回值類型，BTrace 程序的所有方法必須是 public static 1. oid 的，所有的字段都必須是 static 的。
不能 有 outer, inner, nested 或 local 類。</description></item><item><title>npm 鏡像等設置</title><link>https://travisbikkle.github.io/zh-hant/2018/10/common-pakage-manager-proxy/</link><pubDate>Sat, 13 Oct 2018 11:24:31 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2018/10/common-pakage-manager-proxy/</guid><description>中國加速鏡像 npm可能未及時同步 pip可能未同步官方已經刪除的惡意軟件包 manager useful commands command pnpm pnpm get registry pnpm config set registry https://registry.npmmirror.com npm npm get registry npm config set registry https://registry.npmmirror.com yarn yarn config get registry yarn config set registry https://registry.npmmirror.com pip pip config list # for pip install
pip config set global.index-url https://mirrors.aliyun.com/pypi/simple/
# for pip search
pip config set global.index https://mirrors.aliyun.com/pypi
pip config set global.trusted-host mirrors.aliyun.com 代理 注意如果你沒有翻牆軟件就不用做下面的配置，請將地址修改爲你實際的代理地址。
npm(~/.npmrc)
1proxy=http://localhost:8118 2https_proxy=https://localhost:8118 3strict-ssl=false yarn(~/.yarnrc)
1env: 2 proxy &amp;#39;http://localhost:8118&amp;#39; 3 https_proxy &amp;#39;https://localhost:8118&amp;#39; 4 strict-ssl false</description></item><item><title>Centos 常用命令</title><link>https://travisbikkle.github.io/zh-hant/2018/10/centos7-common-commands/</link><pubDate>Sat, 13 Oct 2018 11:24:18 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2018/10/centos7-common-commands/</guid><description>如何更改爲靜態 IP 地址 vi /etc/sysconfig/network-scripts/ifcfg-&amp;lt;你的網卡名，如果不知道，直接 tab 自動補全&amp;gt;
## 更改並添加以下數行 # BOOTPROTO=dfcp BOOTPROTO=static # ONBOOT=no ONBOOT=yes IPADDR=192.168.47.190 # IP 地址，先在虛擬機或路由裏查看你的 IP 網段，然後在設置爲你想要的值 GATEWAY=192.168.47.2 # 網關信息，同上 NETMASK=255.255.255.0 # 子網掩碼信息，同上 DNS1=8.8.8.8 # DNS 信息，同上 service network restart 重啓網絡服務
如何更改主機名 hostnamectl set-hostname &amp;lt;你想要的主機名&amp;gt;
如何關閉防火牆和SELinux systemctl disable firewalld.service systemctl stop firewalld.service # 編輯以下文件 vi /etc/sysconfig/selinux SELINUX=disabled # 編輯完成後，執行 setenforce 0 # 重啓後執行 getenforce 變成 disabled 說明更改永久生效 如何設置 NTP 時間同步 yum install -y ntp systemctl enable ntpd</description></item><item><title>Hadoop .. 學習筆記</title><link>https://travisbikkle.github.io/zh-hant/2018/10/hadoop-learning-note/</link><pubDate>Sat, 13 Oct 2018 11:24:16 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2018/10/hadoop-learning-note/</guid><description>HDFS讀寫流程 todo
HDFS文件權限 todo
安全模式 todo
注意事項 todo
JDK 版本應該使用 1.8，JDK 10 遇到啓動過程中 warning 並且 datanode 無法啓動的問題。
集羣安裝 最小配置文件（hadoop 2.9.1） core-site.xml.
&amp;lt;configuration&amp;gt; &amp;lt;property&amp;gt; &amp;lt;name&amp;gt;fs.defaultFS&amp;lt;/name&amp;gt; &amp;lt;value&amp;gt;hdfs://linux-1:8020/&amp;lt;/value&amp;gt; &amp;lt;description&amp;gt;NameNode URI&amp;lt;/description&amp;gt; &amp;lt;/property&amp;gt; &amp;lt;property&amp;gt; &amp;lt;name&amp;gt;io.file.buffer.size&amp;lt;/name&amp;gt; &amp;lt;value&amp;gt;131072&amp;lt;/value&amp;gt; &amp;lt;description&amp;gt;Buffer size&amp;lt;/description&amp;gt; &amp;lt;/property&amp;gt; &amp;lt;/configuration&amp;gt; hdfs-site.xml.
&amp;lt;configuration&amp;gt; &amp;lt;property&amp;gt; &amp;lt;name&amp;gt;dfs.secondary.http.address&amp;lt;/name&amp;gt; &amp;lt;value&amp;gt;linux-2:50090&amp;lt;/value&amp;gt; &amp;lt;/property&amp;gt; &amp;lt;property&amp;gt; &amp;lt;name&amp;gt;dfs.http.address&amp;lt;/name&amp;gt; &amp;lt;value&amp;gt;linux-1:50070&amp;lt;/value&amp;gt; &amp;lt;/property&amp;gt; &amp;lt;property&amp;gt; &amp;lt;name&amp;gt;dfs.namenode.name.dir&amp;lt;/name&amp;gt; &amp;lt;value&amp;gt;file:///opt/hdfs/namenode&amp;lt;/value&amp;gt; &amp;lt;description&amp;gt;NameNode directory for namespace and transaction logs storage.&amp;lt;/description&amp;gt; &amp;lt;/property&amp;gt; &amp;lt;property&amp;gt; &amp;lt;name&amp;gt;dfs.namenode.edits.dir&amp;lt;/name&amp;gt; &amp;lt;value&amp;gt;file:///opt/hdfs/namenode&amp;lt;/value&amp;gt; &amp;lt;description&amp;gt;DFS name node should store the transaction (edits) file.&amp;lt;/description&amp;gt; &amp;lt;/property&amp;gt; &amp;lt;property&amp;gt; &amp;lt;name&amp;gt;dfs.</description></item><item><title>Hive .. 安裝常見問題</title><link>https://travisbikkle.github.io/zh-hant/2018/10/hive-install-faq/</link><pubDate>Sat, 13 Oct 2018 11:24:13 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2018/10/hive-install-faq/</guid><description>remote 模式最小配置 &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; standalone=&amp;quot;no&amp;quot;?&amp;gt; &amp;lt;?xml-stylesheet type=&amp;quot;text/xsl&amp;quot; href=&amp;quot;configuration.xsl&amp;quot;?&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;property&amp;gt; &amp;lt;name&amp;gt;javax.jdo.option.ConnectionURL&amp;lt;/name&amp;gt; &amp;lt;value&amp;gt;jdbc:mysql://192.168.47.128:3306/hive?createDatabaseIfNotExist=true&amp;lt;/value&amp;gt; &amp;lt;/property&amp;gt; &amp;lt;property&amp;gt; &amp;lt;name&amp;gt;javax.jdo.option.ConnectionDriverName&amp;lt;/name&amp;gt; &amp;lt;value&amp;gt;com.mysql.jdbc.Driver&amp;lt;/value&amp;gt; &amp;lt;/property&amp;gt; &amp;lt;property&amp;gt; &amp;lt;name&amp;gt;javax.jdo.option.ConnectionUserName&amp;lt;/name&amp;gt; &amp;lt;value&amp;gt;root&amp;lt;/value&amp;gt; &amp;lt;/property&amp;gt; &amp;lt;property&amp;gt; &amp;lt;name&amp;gt;javax.jdo.option.ConnectionPassword&amp;lt;/name&amp;gt; &amp;lt;value&amp;gt;km717070&amp;lt;/value&amp;gt; &amp;lt;/property&amp;gt; &amp;lt;/configuration&amp;gt; 安裝問題 remote 模式報錯 Java.lang.RuntimeException: Unable to instantiate org.apache.hadoop.hive.ql.metadata.SessionHiveMetaStoreClient 解決：hive 需要先 hive --service metastore 先啓動 thrift server，才能訪問 MySQL 參考：官方手冊：Hive Metastore 配置 理解：MySQL 爲 metastore 的 database， Thrift Server 爲 metastore 的服務器
hive &amp;ndash;service metastore 啓動報錯 Unable to open a test connection to the given database 解決：MySQL 的配置有問題</description></item><item><title>Centos 安裝 Apache Ambari</title><link>https://travisbikkle.github.io/zh-hant/2018/10/centos7-ambari/</link><pubDate>Sat, 13 Oct 2018 11:24:12 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2018/10/centos7-ambari/</guid><description>版本說明 部件
版本號
Ambari
2.6.2.2
CentOS
7
HDP
2.6
時間
20180814
背景 對於 Ambari 能做什麼，對於搜索到此文的同學來說應該毋庸贅述。目前 Ambari 安裝的官方手冊主要是 Apache 和 Hortonworks，我首先是參考 Apache 的說明，通過 maven 編譯源碼的方式，在 安裝 linux-mint 的機器上嘗試安裝 Ambari 2.7.0，遇到過以下問題：
由於系統不符合 Ambari 的要求，因此通過更改其中的 ambari-commons/OSCheck.py:is_ubuntu_family() 函數強制安裝 server 和 agent.
由於採用的國內 maven 倉庫，ambari web legacy 始終編譯不過，通過更改其依賴編譯通過.
maven compiler plugin 報錯 json-simple 的相關依賴問題，最後刪除該 legacy 模塊.
其它 node, yarn, npm 的代理設置問題. 最終在安裝 agent 的時候遇到 ssl 連接錯誤，時間已晚，選擇放棄這種安裝方式。轉而使用文檔支持較好的 CentOS 和 yum 倉庫安裝的方式。雖然如此，Hortonworks 的文檔邏輯也稍顯混亂，過於簡單，本文對安裝過程做詳細記錄，以備查詢。本文所有操作均使用 root 用戶完成。
準備 我使用的是 VMware WorkStation，CentOS 7 下載路徑爲 點我，安裝步驟略過，建議安裝 4 臺機器(網絡方式選擇NAT模式)，其中安裝 Ambari 服務器的機器硬盤大小不得小於 30 GB，如果不小心硬盤大小分配過小，參見另一篇博文link:/2018/10/13/如何對 centos 7 分區進行擴容/[如何對 centos 7 分區進行擴容]。其餘 3 臺機器作爲集羣機器以備後續使用。</description></item><item><title>如何對 Centos 分區進行擴容</title><link>https://travisbikkle.github.io/zh-hant/2018/10/centos-disk-extend/</link><pubDate>Sat, 13 Oct 2018 11:24:10 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2018/10/centos-disk-extend/</guid><description>fdisk -l 在 Id 一列可以看到分區類型爲``8e`` ``83``等十進制數值，``8e``代表該分區由 Linux LVM 管理，適用本文的擴容方法，如果你的分區類型爲``83``，代表其是 Linux Native Partion，可以參考link:[另一篇博文（尚未書寫）]。
我使用的是 VMware Workstation pro，在編輯虛擬機設置裏可以輕鬆增加磁盤大小（磁盤爲單個文件，而不是分割文件，如果你的硬盤是分割的多個文件，參考另一篇博文 VMware 分割磁盤如何擴容(尚未編寫)
fdisk -l ## 在 fdisk 輸出信息中，可以看到 Disk /dev/sda： 30 GB 類似的信息，證明磁盤增加成功，位置確認。 ## 以下命令爲交互式命令 fdisk /dev/sda # 輸入 n 以創建新分區 n # 輸入 p 以設置爲主分區 p # 根據 fdisk -l 的信息，決定分區的編號，由於我的機器 fdisk -l 已經有 /dev/sda1 /dev/sda2 兩個，所以此處輸入 3 3 # 此處輸入兩次回車，以決定分區的開始和結束位置，默認使用剩餘全部未分配空間 First cylinder.... 回車 Last cylinder.... 回車 # 此處輸入 t，並輸入 3 以選擇我們上面步驟剛剛創建的分區 t 3 # 在 Hex code 的輸入步驟，輸入我們希望使用的 LVM 代碼符號：8e 8e # 最後，輸入 w 以使上述所有更改生效 w 在我的機器上，不需要重啓已經可以使用 fdisk -l 查看到新創建的 /dev/sda3，但是推薦你在此處先重啓一次，然後執行後續操作</description></item><item><title>使用 Ambari 安裝 Hdp 集羣</title><link>https://travisbikkle.github.io/zh-hant/2018/10/ambari-hdp-demo/</link><pubDate>Sat, 13 Oct 2018 11:24:08 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2018/10/ambari-hdp-demo/</guid><description>HDP 並不是 hadoop 的輔音簡稱，而是 Hortonworks 的產品 Hortonworks Data Platform 的簡稱，是包含 Hadoop 在內的一攬子解決方案。
前置要求： 3-4臺 CentOS 7 機器，其中一臺機器必須安裝 Ambari 服務。教程參考link:/2018/10/13/centos 7 安裝 apache-ambari/[centos 7 安裝 apache-ambari]。安裝 master 和 slave 的節點機器，內存最好不要小於 5G。
安裝部件： 如前所述，此次安裝包含如下服務（請按需安裝）：
服務
版本
說明
HDFS
2.7.3
Apache Hadoop 分佈式文件系統
YARN + MapReduce2
2.7.3
Apache Hadoop 下一代 MapReduce(YARN)
Tez
0.7.0
Tez 是運行在 YARN 之上的下一代 Hadoop 查詢處理框架
Hive
1.2.1000
支持即席查詢與大數據量分析和存儲管理服務的數據倉庫系統
HBase
1.1.2
非關係型分佈式數據庫，包括 Phoenix，一個爲低延遲應用開發的高性能 sql 擴展
Pig
0.16.0
分析大數據量的腳本平臺
Sqoop
1.4.6</description></item><item><title>免密碼 Ssh 到其它機器</title><link>https://travisbikkle.github.io/zh-hant/2018/10/ssh-without-pass/</link><pubDate>Sat, 13 Oct 2018 11:24:07 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2018/10/ssh-without-pass/</guid><description>背景：在配置 hadoop 的時候這樣設置會比較方便。 目標：A 機器上輸入 ssh root@B 可以直接訪問，不需要輸入密碼
步驟：
首先在 A 機器上生成密鑰對，一路回車
ssh-keygen -t rsa 在 A 機器上輸入，輸入 B 機器的密碼一次即可
ssh-copy-id -i ~/.ssh/id_rsa.pub root@B 所以同樣的操作，B機器上可能還要再操作一遍，如果機器多了，也是很煩，因此，更懶人的做法是：
準備 xshell 5
打開多個機器的 ssh 會話窗口
配置好各個機器的 hostname
在 xshell 底部，&amp;quot;發送命令到所有窗口&amp;ldquo;這一行，依次輸入 ssh-copy-id -i ~/.ssh/id_rsa.pub root@&amp;lt;主機名&amp;gt; 即可。</description></item><item><title>Vmware Clone Ubuntu. Ip 地址配置</title><link>https://travisbikkle.github.io/zh-hant/2018/10/vmware-clone-ubuntu18-ip-config/</link><pubDate>Sat, 13 Oct 2018 11:24:06 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2018/10/vmware-clone-ubuntu18-ip-config/</guid><description>在使用 VMware Workstation 克隆 Ubuntu Server 18.04 版本後，發現克隆前後的機器 IP 地址重複， 且無論如何更改虛擬網絡設置（編輯-虛擬網絡編輯器）都無效。由於 Ubuntu 18.04 採用 netplan (/etc/netplan) 而不是先前版本的 /etc/network/interfaces 管理網卡設置，因此通過如下方法，將機器 IP 地址更改爲靜態獲取，可以解決此問題。
1. vi /etc/netplan/50-cloud-init.yaml (此文件名可能會變化).
network: ethernets: ens33: dhcp4: no dhcp6: no addresses: [192.168.44.129/24,] gateway4: 192.168.44.1 nameservers: addresses: [8.8.8.8, 8.8.4.4] 2. 更改後，執行.
&amp;gt;netplan apply &amp;gt;reboot</description></item><item><title>Ubuntu . 更改 Hostname</title><link>https://travisbikkle.github.io/zh-hant/2018/10/ubuntu18-hostname/</link><pubDate>Sat, 13 Oct 2018 11:24:04 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2018/10/ubuntu18-hostname/</guid><description>vi /etc/cloud/cloud.cfg #preserve_hostname: false ---&amp;gt; 改成 true vi /etc/hostname reboot</description></item></channel></rss>