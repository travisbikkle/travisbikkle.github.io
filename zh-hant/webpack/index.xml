<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>webpack on 奇风岁月</title><link>https://travisbikkle.github.io/zh-hant/webpack/</link><description>Recent content in webpack on 奇风岁月</description><generator>Hugo -- gohugo.io</generator><language>zh-hant</language><copyright>Copyright © 2022-{year} Travis Bikkle. All Rights Reserved.</copyright><lastBuildDate>Mon, 29 Jul 2024 10:22:28 +0800</lastBuildDate><atom:link href="https://travisbikkle.github.io/zh-hant/webpack/index.xml" rel="self" type="application/rss+xml"/><item><title>Electron 中文搜索</title><link>https://travisbikkle.github.io/zh-hant/2024/07/chinese-search/</link><pubDate>Mon, 29 Jul 2024 10:22:28 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2024/07/chinese-search/</guid><description>這篇文章快速演示如何使用 js-search, nodejieba（結巴）來在 Electron 中實現中文搜索。
它快速，實時，比你見過的任何一種搜索都快，快到爆漿。
tech version electron 30.0.6 nodejieba 2.6.0 js-search 2.0.1 本文將帶你解決在中國大陸使用 npm 鏡像及 nodejieba 可能遇到的一系列問題：
npmmirror 中的 nodejieba 包不存在或無法下載 nodejieba 無人維護，不支持在 win11 及 vs studio 2022 版本運行 nodejieba 不支持 typescript 添加依賴 1npm i js-search 2npm i nodejieba@2.6.0 --save-optional --ignore-scripts 爲什麼 nodejieba 要採取這種方式？因爲 nodejieba 是用 c++ 編寫，而它的社區已經不活躍了。它的編譯腳本會失敗。我們需要跳過它的腳本，自己編譯。
** 你需要安裝 vs studio 2022，並勾選使用 c++ 桌面開發 **。
或者使用下面的 powershell 命令，僅安裝需要的組件：
1Invoke-WebRequest -Uri &amp;#39;https://aka.ms/vs/17/release/vs_BuildTools.exe&amp;#39; -OutFile &amp;#34;$env:TEMP\vs_BuildTools.exe&amp;#34; 2 3&amp;amp; &amp;#34;$env:TEMP\vs_BuildTools.exe&amp;#34; --passive --wait --add Microsoft.</description></item><item><title>Electron Linux 風格標題欄</title><link>https://travisbikkle.github.io/zh-hant/2024/07/linux-like-titlebar/</link><pubDate>Fri, 05 Jul 2024 10:21:38 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2024/07/linux-like-titlebar/</guid><description>本文將演示如何在 Electron 中快速實現一個標題欄，可以捲起，拖動，並帶你進一步瞭解 Electron 的 bug。
隱藏默認標題欄 在你創建 BrowserWindow 的方法中，指定以下參數：
1function createWindow() { 2 if (prod) Menu.setApplicationMenu(null); 3 mainWindow = new BrowserWindow({ 4 titleBarStyle: dev ? &amp;#39;default&amp;#39; : &amp;#39;hiddenInset&amp;#39;, 5 titleBarOverlay: true, 6 frame: false, 7 // ... 編寫自己的標題欄 現在默認的標題欄已經消失了，你應該編寫一個 div，作爲自己的標題欄。這個 div 和其它 div 沒什麼兩樣，除了它要支持以下三種東西：
可以拖動 可以捲起 有一個紅綠燈組件（捲起/放下，最大化，最小化，關閉） 1 &amp;lt;div className=&amp;#34;title-bar&amp;#34;&amp;gt; 2 &amp;lt;div className=&amp;#34;logo-and-name&amp;#34;&amp;gt;&amp;lt;img src=&amp;#34;public/assets/icon.ico&amp;#34; alt=&amp;#34;logo&amp;#34; /&amp;gt;My Application&amp;lt;/div&amp;gt; 3 &amp;lt;div className=&amp;#34;traffic-light&amp;#34;&amp;gt; 4 &amp;lt;MinMaxClose /&amp;gt; &amp;lt;!-- MinMaxClose 你可以自己實現，四個按鈕，捲起/放下，最大化，最小化，關閉 --&amp;gt; 5 &amp;lt;/div&amp;gt; 6&amp;lt;/div&amp;gt; 拖動 編寫一個 Drag 組件，它的所有 children 都可以拖動。 1import * as React from &amp;#34;react&amp;#34;; 2import { HTMLAttributes } from &amp;#34;react&amp;#34;; 3import nconsole from &amp;#34;_rutils/nconsole&amp;#34;; 4 5interface DragProps extends HTMLAttributes&amp;lt;HTMLDivElement&amp;gt; { 6 children: React.</description></item><item><title>Aria2 Rpc 使用</title><link>https://travisbikkle.github.io/zh-hant/2024/07/aria2-rpc/</link><pubDate>Mon, 01 Jul 2024 10:18:30 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2024/07/aria2-rpc/</guid><description>本文將演示如何使用 aria2 rpc 開發一個下載模塊，注意，這不是一個完整的應用，僅僅是爲了給你一些啓發。
tech version electron 30.0.6 webpack 5.91.0 nodejs v20.14.0 aria2 1.37.0 React 18.2.0 react-use-websocket 4.8.1 @mui/x-charts/SparkLineChart 7.3.2 aria2 文檔 react-use-websocket 文檔
成品演示 加載並啓動 aria2 怎麼將 aria2 集成到你的項目中 你可以要求你的用戶自行安裝 aria2c.exe，或者將 aria2c.exe 直接打包到你的項目中。
如果你採用後者，下面是一些示例。
假設你的工程目錄是：
1src 2build 3 |-- aria2c.exe 4package.json 打包 下面是一個使用 Electron Builder 的示例，它將 build/aria2c.exe 拷貝到安裝後的根目錄。
1&amp;#34;scripts&amp;#34;: { 2 &amp;#34;dev&amp;#34;: &amp;#34;xxxxxxx&amp;#34; 3}, 4&amp;#34;build&amp;#34;: { 5 &amp;#34;extraFiles&amp;#34;: [ 6 { 7 &amp;#34;from&amp;#34;: &amp;#34;build/aria2c.exe&amp;#34;, 8 &amp;#34;to&amp;#34;: &amp;#34;&amp;#34; 9 }, 10} 將它放到 package.</description></item><item><title>在 webapck+electron+typescript中使用go開發的node插件</title><link>https://travisbikkle.github.io/zh-hant/2024/04/2024-04-23-webpack-electron-node-addon/</link><pubDate>Tue, 23 Apr 2024 18:21:53 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2024/04/2024-04-23-webpack-electron-node-addon/</guid><description>node 插件，electron 和 webpack 那些事 首先要明確在哪裏引入 node 的插件， main，preload還是 renderer？ 我們開發了一個 node 的插件，需要在 electron 中引入。我們一開始當然是希望在 renderer 中引入，畢竟最接近業務邏輯，省事。
不過會遇到報錯 &amp;lsquo;require is not defined&amp;rsquo;，也就是沒有 require 函數。
這個時候網上可能有些回答會讓你在 main.ts 中打開 nodeIntegration：
1mainWindow = new BrowserWindow({ 2 height: 800, 3 width: 1280, 4 maxHeight: 2160, 5 webPreferences: { 6 nodeIntegration: true, 7 devTools: nodeEnv.dev, 8 preload: path.join(__dirname, &amp;#39;./preload.bundle.js&amp;#39;), 9 }, 10}); 實際上這是不推薦的，爲什麼要在 renderer 中允許執行本地的命令，如 fs 等等？如果是一個惡意的網站，他就能訪問你本機所有的文件。當然如果你確保自己的應用不訪問外部網站，也可以。
我們可以瞭解下比較安全的做法。
爲了解決這個問題，我花了整整一天的時間，我這個項目的技術棧是 TypeScript, Webpack 5, 並且需要引入一個 go 寫的 node 插件，現代 javascript 的buff 疊滿了屬於是，我這個後端開發感受到了前端滿滿的惡意了。 開發插件並在 node 中跑通不到兩小時，可是把這個插件放到 webpack + electron 中花了我整整 7 個小時。</description></item><item><title>webpack 5 mock 10分鐘快速配置</title><link>https://travisbikkle.github.io/zh-hant/2024/03/2024-03-15-webpack-react-mock/</link><pubDate>Fri, 15 Mar 2024 11:13:53 +0800</pubDate><guid>https://travisbikkle.github.io/zh-hant/2024/03/2024-03-15-webpack-react-mock/</guid><description>不說廢話，直接開始。我使用 webpack 5.90.3，以下是我的配置。
文件結構
1project_root/ 2 |-- webpack.config.js 3 |-- mockserver.js 4 |-- mock/ 5 |-- user.js webpack.config.js
因爲 express 現在不再附帶 body-parser，現在需要執行 npm i -D body-parser。如果你希望讀取 request 裏面的內容，你會需要這個插件。
1const webpack = require(&amp;#34;webpack&amp;#34;); 2var bodyParser = require(&amp;#39;body-parser&amp;#39;) 3const mockServer = require(&amp;#34;./mockserver.js&amp;#34;) 4 5module.exports = (env, argv) =&amp;gt; { 6 // ... some code 7 return { 8 devServer: { 9 setupMiddlewares: (middlewares, devServer) =&amp;gt; { 10 if (!devServer) { 11 throw new Error(&amp;#39;webpack-dev-server is not defined&amp;#39;); 12 } 13 14 devServer.</description></item></channel></rss>