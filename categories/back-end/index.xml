<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Back-End on 奇风岁月</title><link>https://travisbikkle.github.io/categories/back-end/</link><description>Recent content in Back-End on 奇风岁月</description><generator>Hugo -- gohugo.io</generator><language>zh-hans</language><copyright>Copyright © 2022-{year} Travis Bikkle. All Rights Reserved.</copyright><lastBuildDate>Mon, 29 Jul 2024 10:21:11 +0800</lastBuildDate><atom:link href="https://travisbikkle.github.io/categories/back-end/index.xml" rel="self" type="application/rss+xml"/><item><title>怎么在 Java 中限制用户访问频率</title><link>https://travisbikkle.github.io/2024/07/request-limit/</link><pubDate>Mon, 29 Jul 2024 10:21:11 +0800</pubDate><guid>https://travisbikkle.github.io/2024/07/request-limit/</guid><description>我们当然要限制用户访问频率，因为用户可能生气，并狂点我们的网站或应用。
他也可能很坏，使用一些爬虫试图拖垮我们的服务器。
所以怎么实现呢？
本文使用 springboot，并将用户的信息和访问频率记录到 redis 中，如果你没有使用 redis，也不影响，你可以参考着自己实现，比如存储到内存或数据库中。
想想这个需求，从第一性原理出发 用户可能没有登录，或者已经登录了。
如果用户登录了，我们就根据用户名来限制，否则，就根据IP或者其它设备码来限制，本文假设使用IP。
我们希望它足够简单，可以在多个方法上使用，而不需要编写额外的代码。所以我们要使用接口切面。
接口 1public @interface RequestRateLimit { 2 3	/** 4	* 限流的key，比如限制用户注册，限制用户发送邮件，等等，一般是方法名 5	* @return 6	*/ 7	String key() default &amp;#34;&amp;#34;; 8 9	/** 10	* 限流模式,默认单机 11	* @return 12	*/ 13	RateType type() default RateType.PER_CLIENT; 14 15	/** 16	* 限流速率，1次/分钟 17	* @return 18	*/ 19	long rate() default 1; 20 21	/** 22	* 限流速率，每分钟 23	* @return 24	*/ 25	long rateInterval() default 60 * 1000; 26 27	/** 28	* 限流速率单位 29	* @return 30	*/ 31	RateIntervalUnit timeUnit() default RateIntervalUnit.</description></item><item><title>Oauth2 限制登录一个客户端</title><link>https://travisbikkle.github.io/2024/07/oauth2-single-login/</link><pubDate>Fri, 19 Jul 2024 10:20:30 +0800</pubDate><guid>https://travisbikkle.github.io/2024/07/oauth2-single-login/</guid><description>有时候我们希望用户只能在一台设备登录账号（我们太吝啬了）。
使用 springboot oauth2 怎么实现呢？
注意本文不会带你使用 spring security 实现 oauth2 登录，仅仅是讨论我们那个吝啬的需求。
假设我们有这样一个自定义的认证实现类：
1public class RedisOAuth2AuthorizationService implements OAuth2AuthorizationService { 2 3	private final static Long TIMEOUT = 10L; 4 5	private static final String AUTHORIZATION = &amp;#34;token&amp;#34;; 6 7	private final RedisTemplate&amp;lt;String, Object&amp;gt; redisTemplate; 8 9	@Override 10	public void save(OAuth2Authorization authorization) { 11 // is refresh token mode or code mode 12 // ... 13 // is access token mode 14	if (isAccessToken(authorization)) { 15	OAuth2AccessToken accessToken = authorization.</description></item><item><title>获取用户真实IP</title><link>https://travisbikkle.github.io/2024/07/get-user-real-ip/</link><pubDate>Mon, 15 Jul 2024 10:20:57 +0800</pubDate><guid>https://travisbikkle.github.io/2024/07/get-user-real-ip/</guid><description>这是一个非常简单的问题，但是在信息传播过程中，发生了一些错误。
比如一些人会说，你配置 X-Real-Ip 啊，这样就行了。
或者有些人会问，X-Real-Ip 和 X-Forward-For 有什么区别，原理是什么？
俨然是把 X-Real-Ip 给误解了。
本文带你看看，到底什么是 X-Real-Ip。
快速回答 X-Real-Ip 什么也不是。你可以使用 My-Real-Ip，His-Real-Ip，随便什么字符串。
1server { 2 ... 3 location / { 4 ... 5 proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; 6 proxy_set_header Host $host; 7 proxy_set_header His-Real-Ip2 $remote_addr; 8 } 9} 以上配置设置了三个请求头，分别是 X-Forwarded-For、Host、His-Real-Ip2，后台 java 服务端可以根据 His-Real-Ip2 获取真实的 IP。
听起来很伤人，可是 X-Real-Ip 真的只是看起来是官方的、某个隐藏的字段，实际上它并不是。
不要再问什么 X-Real-Ip 的原理是什么？ 或者 特殊的请求头 X-Real-Ip 这样的问题了，实际上真正的值，是 nginx 的内置变量 $remote_addr。
Docker 中的 nginx docker 中的 nginx 可以获取到的 $remote_addr，可能是 172.</description></item></channel></rss>