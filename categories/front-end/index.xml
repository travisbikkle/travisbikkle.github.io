<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Front-End on 奇风岁月</title><link>https://travisbikkle.github.io/categories/front-end/</link><description>Recent content in Front-End on 奇风岁月</description><generator>Hugo -- gohugo.io</generator><language>zh-hans</language><copyright>Copyright © 2022-{year} Travis Bikkle. All Rights Reserved.</copyright><lastBuildDate>Fri, 17 May 2024 18:21:53 +0800</lastBuildDate><atom:link href="https://travisbikkle.github.io/categories/front-end/index.xml" rel="self" type="application/rss+xml"/><item><title>electron-log@5 的使用</title><link>https://travisbikkle.github.io/2024/05/2024-05-17-electron-log-v5/</link><pubDate>Fri, 17 May 2024 18:21:53 +0800</pubDate><guid>https://travisbikkle.github.io/2024/05/2024-05-17-electron-log-v5/</guid><description>我们使用一个开源软件，一般都是通过搜索示例或教程来学习如何使用。可是如果一个软件发生过不兼容的变更，而网络上一般都是些旧的做法，这样就会给我们带来非常大的心智负担。
因此我建议有志之士尽量去看官方文档，即使它可能是英语，或者没有太好的示例，仍然要去看，而不是被一些没头没尾或者抄来抄去的博客耽误你的时间。
Electron 的官方文档就非常得不详细，它也在 main，preload，renderer 这一块变过很多次，详情可以看看博客中的上一篇文章《在 webapck+electron+typescript中使用go开发的node插件》。
本文说说一个常用的日志小工具 electron-log 的使用（基于 5.1.4）。
引入 1npm i electron-log 自己定义一个 logger.ts（也可以在 main.ts 中直接定义） 1import log from &amp;#39;electron-log/main&amp;#39;; 2log.transports.console.level = false; // 控制台关闭输出（只输出到文件） 3log.transports.file.level = &amp;#39;silly&amp;#39;; 4log.transports.file.maxSize = 1002430; // 文件最大不超过 1M 5log.transports.file.format = &amp;#39;[{y}-{m}-{d} {h}:{i}:{s}.{ms}] [{level}]{scope} {text}&amp;#39;; 6const date = new Date(); 7const dateStr = date.getFullYear() + &amp;#39;-&amp;#39; + (date.getMonth() + 1) + &amp;#39;-&amp;#39; + date.getDate(); 8log.transports.file.resolvePathFn = () =&amp;gt; &amp;#39;log\\&amp;#39; + dateStr + &amp;#39;.</description></item><item><title>在 webapck+electron+typescript中使用go开发的node插件</title><link>https://travisbikkle.github.io/2024/04/2024-04-23-webpack-electron-node-addon/</link><pubDate>Tue, 23 Apr 2024 18:21:53 +0800</pubDate><guid>https://travisbikkle.github.io/2024/04/2024-04-23-webpack-electron-node-addon/</guid><description>node 插件，electron 和 webpack 那些事 首先要明确在哪里引入 node 的插件， main，preload还是 renderer？ 我们开发了一个 node 的插件，需要在 electron 中引入。我们一开始当然是希望在 renderer 中引入，毕竟最接近业务逻辑，省事。
不过会遇到报错 &amp;lsquo;require is not defined&amp;rsquo;，也就是没有 require 函数。
这个时候网上可能有些回答会让你在 main.ts 中打开 nodeIntegration：
1mainWindow = new BrowserWindow({ 2 height: 800, 3 width: 1280, 4 maxHeight: 2160, 5 webPreferences: { 6 nodeIntegration: true, 7 devTools: nodeEnv.dev, 8 preload: path.join(__dirname, &amp;#39;./preload.bundle.js&amp;#39;), 9 }, 10}); 实际上这是不推荐的，为什么要在 renderer 中允许执行本地的命令，如 fs 等等？如果是一个恶意的网站，他就能访问你本机所有的文件。当然如果你确保自己的应用不访问外部网站，也可以。
我们可以了解下比较安全的做法。
为了解决这个问题，我花了整整一天的时间，我这个项目的技术栈是 TypeScript, Webpack 5, 并且需要引入一个 go 写的 node 插件，现代 javascript 的buff 叠满了属于是，我这个后端开发感受到了前端满满的恶意了。 开发插件并在 node 中跑通不到两小时，可是把这个插件放到 webpack + electron 中花了我整整 7 个小时。</description></item><item><title>webpack 5 mock 10分钟快速配置</title><link>https://travisbikkle.github.io/2024/03/2024-03-15-webpack-react-mock/</link><pubDate>Fri, 15 Mar 2024 11:13:53 +0800</pubDate><guid>https://travisbikkle.github.io/2024/03/2024-03-15-webpack-react-mock/</guid><description>不说废话，直接开始。我使用 webpack 5.90.3，以下是我的配置。
文件结构
1project_root/ 2 |-- webpack.config.js 3 |-- mockserver.js 4 |-- mock/ 5 |-- user.js webpack.config.js
因为 express 现在不再附带 body-parser，现在需要执行 npm i -D body-parser。如果你希望读取 request 里面的内容，你会需要这个插件。
1const webpack = require(&amp;#34;webpack&amp;#34;); 2var bodyParser = require(&amp;#39;body-parser&amp;#39;) 3const mockServer = require(&amp;#34;./mockserver.js&amp;#34;) 4 5module.exports = (env, argv) =&amp;gt; { 6 // ... some code 7 return { 8 devServer: { 9 setupMiddlewares: (middlewares, devServer) =&amp;gt; { 10 if (!devServer) { 11 throw new Error(&amp;#39;webpack-dev-server is not defined&amp;#39;); 12 } 13 14 devServer.</description></item></channel></rss>