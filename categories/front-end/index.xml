<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Front-End on 奇风岁月</title><link>https://travisbikkle.github.io/categories/front-end/</link><description>Recent content in Front-End on 奇风岁月</description><generator>Hugo -- gohugo.io</generator><language>zh-hans</language><copyright>Copyright © 2022-{year} Travis Bikkle. All Rights Reserved.</copyright><lastBuildDate>Wed, 07 Aug 2024 17:32:12 +0800</lastBuildDate><atom:link href="https://travisbikkle.github.io/categories/front-end/index.xml" rel="self" type="application/rss+xml"/><item><title>Webview2 Tauri 绕过 CORS</title><link>https://travisbikkle.github.io/2024/08/tauri-bypass-cors/</link><pubDate>Wed, 07 Aug 2024 17:32:12 +0800</pubDate><guid>https://travisbikkle.github.io/2024/08/tauri-bypass-cors/</guid><description>item version tauri 2.0.0-rc 前提 当你在 foo.com 使用 js 来访问 bar.com/api 的时候，你可能会遇到下面这样的错误（但你能够使用 curl 访问它）：
1Access to fetch at &amp;#39;bar.com/api&amp;#39; 2from origin &amp;#39;foo.com&amp;#39; has been blocked by CORS policy: 3No &amp;#39;Access-Control-Allow-Origin&amp;#39; header is present on the requested resource. 4If an opaque response serves your needs, set the request&amp;#39;s mode to &amp;#39;no-cors&amp;#39; to fetch the resource with CORS disabled. 首先你需要了解几个概念：
什么是 CORS
https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS
什么是 CORS 预检请求，为什么在 js 中使用 fetch 等会会触发CORS检查？以及什么是 OPTION 操作？</description></item><item><title>Tauri 使用 vue-devtools</title><link>https://travisbikkle.github.io/2024/08/2024-08-05-auri/</link><pubDate>Mon, 05 Aug 2024 16:07:11 +0800</pubDate><guid>https://travisbikkle.github.io/2024/08/2024-08-05-auri/</guid><description>Tauri 号称不强迫开发者（un-opinionated）、不依赖具体前端框架的（agnostic）桌面应用框架，Vue又以其简单易上手的特点在开发者中非常流行。
Vue Devtools 是一款可以在浏览器控制台中显示 vue 程序详情的小工具。
今天我们将它们结合起来，演示如何在一个新项目中配置 Vue Devtools.
前提 使用脚手架命令创建应用。
1cargo install create-tauri-app 2cargo create-tauri-app --rc 或
1pnpm create tauri-app --rc https://v2.tauri.app/start/create-project/
安装 Vue Devtools windows
1$env:ELECTRON_CUSTOM_DIR=&amp;#34;&amp;#34;; npm install -g @vue/devtools linux or macos
1export ELECTRON_CUSTOM_DIR=&amp;#34;&amp;#34; 2npm install -g @vue/devtools 使用 Vue Devtools 启动 Vue Devtools 1vue-devtools 或将该命令加入到 package.json 中
1 &amp;#34;scripts&amp;#34;: { 2 ... 3 &amp;#34;vue:dev-tools&amp;#34;: &amp;#34;vue-devtools&amp;#34;, 4 ... 5 } 引入 Vue Devtools 在 index.html 中引入。</description></item><item><title>Electron 中文搜索</title><link>https://travisbikkle.github.io/2024/07/chinese-search/</link><pubDate>Mon, 29 Jul 2024 10:22:28 +0800</pubDate><guid>https://travisbikkle.github.io/2024/07/chinese-search/</guid><description>这篇文章快速演示如何使用 js-search, nodejieba（结巴）来在 Electron 中实现中文搜索。
它快速，实时，比你见过的任何一种搜索都快，快到爆浆。
tech version electron 30.0.6 nodejieba 2.6.0 js-search 2.0.1 本文将带你解决在中国大陆使用 npm 镜像及 nodejieba 可能遇到的一系列问题：
npmmirror 中的 nodejieba 包不存在或无法下载 nodejieba 无人维护，不支持在 win11 及 vs studio 2022 版本运行 nodejieba 不支持 typescript 添加依赖 1npm i js-search 2npm i nodejieba@2.6.0 --save-optional --ignore-scripts 为什么 nodejieba 要采取这种方式？因为 nodejieba 是用 c++ 编写，而它的社区已经不活跃了。它的编译脚本会失败。我们需要跳过它的脚本，自己编译。
** 你需要安装 vs studio 2022，并勾选使用 c++ 桌面开发 **。
或者使用下面的 powershell 命令，仅安装需要的组件：
1Invoke-WebRequest -Uri &amp;#39;https://aka.ms/vs/17/release/vs_BuildTools.exe&amp;#39; -OutFile &amp;#34;$env:TEMP\vs_BuildTools.exe&amp;#34; 2 3&amp;amp; &amp;#34;$env:TEMP\vs_BuildTools.exe&amp;#34; --passive --wait --add Microsoft.</description></item><item><title>Electron Linux 风格标题栏</title><link>https://travisbikkle.github.io/2024/07/linux-like-titlebar/</link><pubDate>Fri, 05 Jul 2024 10:21:38 +0800</pubDate><guid>https://travisbikkle.github.io/2024/07/linux-like-titlebar/</guid><description>本文将演示如何在 Electron 中快速实现一个标题栏，可以卷起，拖动，并带你进一步了解 Electron 的 bug。
隐藏默认标题栏 在你创建 BrowserWindow 的方法中，指定以下参数：
1function createWindow() { 2 if (prod) Menu.setApplicationMenu(null); 3 mainWindow = new BrowserWindow({ 4 titleBarStyle: dev ? &amp;#39;default&amp;#39; : &amp;#39;hiddenInset&amp;#39;, 5 titleBarOverlay: true, 6 frame: false, 7 // ... 编写自己的标题栏 现在默认的标题栏已经消失了，你应该编写一个 div，作为自己的标题栏。这个 div 和其它 div 没什么两样，除了它要支持以下三种东西：
可以拖动 可以卷起 有一个红绿灯组件（卷起/放下，最大化，最小化，关闭） 1 &amp;lt;div className=&amp;#34;title-bar&amp;#34;&amp;gt; 2 &amp;lt;div className=&amp;#34;logo-and-name&amp;#34;&amp;gt;&amp;lt;img src=&amp;#34;public/assets/icon.ico&amp;#34; alt=&amp;#34;logo&amp;#34; /&amp;gt;My Application&amp;lt;/div&amp;gt; 3 &amp;lt;div className=&amp;#34;traffic-light&amp;#34;&amp;gt; 4 &amp;lt;MinMaxClose /&amp;gt; &amp;lt;!-- MinMaxClose 你可以自己实现，四个按钮，卷起/放下，最大化，最小化，关闭 --&amp;gt; 5 &amp;lt;/div&amp;gt; 6&amp;lt;/div&amp;gt; 拖动 编写一个 Drag 组件，它的所有 children 都可以拖动。 1import * as React from &amp;#34;react&amp;#34;; 2import { HTMLAttributes } from &amp;#34;react&amp;#34;; 3import nconsole from &amp;#34;_rutils/nconsole&amp;#34;; 4 5interface DragProps extends HTMLAttributes&amp;lt;HTMLDivElement&amp;gt; { 6 children: React.</description></item><item><title>Aria2 Rpc 使用</title><link>https://travisbikkle.github.io/2024/07/aria2-rpc/</link><pubDate>Mon, 01 Jul 2024 10:18:30 +0800</pubDate><guid>https://travisbikkle.github.io/2024/07/aria2-rpc/</guid><description>本文将演示如何使用 aria2 rpc 开发一个下载模块，注意，这不是一个完整的应用，仅仅是为了给你一些启发。
tech version electron 30.0.6 webpack 5.91.0 nodejs v20.14.0 aria2 1.37.0 React 18.2.0 react-use-websocket 4.8.1 @mui/x-charts/SparkLineChart 7.3.2 aria2 文档 react-use-websocket 文档
成品演示 加载并启动 aria2 怎么将 aria2 集成到你的项目中 你可以要求你的用户自行安装 aria2c.exe，或者将 aria2c.exe 直接打包到你的项目中。
如果你采用后者，下面是一些示例。
假设你的工程目录是：
1src 2build 3 |-- aria2c.exe 4package.json 打包 下面是一个使用 Electron Builder 的示例，它将 build/aria2c.exe 拷贝到安装后的根目录。
1&amp;#34;scripts&amp;#34;: { 2 &amp;#34;dev&amp;#34;: &amp;#34;xxxxxxx&amp;#34; 3}, 4&amp;#34;build&amp;#34;: { 5 &amp;#34;extraFiles&amp;#34;: [ 6 { 7 &amp;#34;from&amp;#34;: &amp;#34;build/aria2c.exe&amp;#34;, 8 &amp;#34;to&amp;#34;: &amp;#34;&amp;#34; 9 }, 10} 将它放到 package.</description></item><item><title>Electron 源码保护</title><link>https://travisbikkle.github.io/2024/06/electron-bytecode/</link><pubDate>Sat, 29 Jun 2024 10:15:44 +0800</pubDate><guid>https://travisbikkle.github.io/2024/06/electron-bytecode/</guid><description>这是一个示例，演示如何快速在你的 Electron 项目中启用字节码保护，没有多余的废话。
环境 tech version electron 30.0.6 webpack 5.91.0 @herberttn/bytenode-webpack-plugin 2.3.1 nodejs v20.14.0 步骤 Webpack 配置 参考文档
1// 引入依赖 2const { BytenodeWebpackPlugin } = require(&amp;#39;@herberttn/bytenode-webpack-plugin&amp;#39;); 3// 在生产环境启用 4const isEnvProduction = process.env.NODE_ENV === &amp;#39;production&amp;#39;; 5... 6plugins: [ 7 isEnvProduction &amp;amp;&amp;amp; new BytenodeWebpackPlugin({ compileForElectron: true }), 8], 9... 10// main，preload，renderer 需要更改 entry 配置。我使用了 webpack-merge，如果你没有使用，忽略即可。 11// main 12const mainConfig = merge(commonConfig, { 13 // entry: &amp;#39;./src/main/main.ts&amp;#39;, 14 entry: { 15 main: &amp;#39;./src/main/main.ts&amp;#39;, 16 }, 17 target: &amp;#39;electron-main&amp;#39;, 18 output: { 19 filename: &amp;#39;[name].</description></item><item><title>electron-log@5 的使用</title><link>https://travisbikkle.github.io/2024/05/2024-05-17-electron-log-v5/</link><pubDate>Fri, 17 May 2024 18:21:53 +0800</pubDate><guid>https://travisbikkle.github.io/2024/05/2024-05-17-electron-log-v5/</guid><description>我们使用一个开源软件，一般都是通过搜索示例或教程来学习如何使用。可是如果一个软件发生过不兼容的变更，而网络上一般都是些旧的做法，这样就会给我们带来非常大的心智负担。
因此我建议有志之士尽量去看官方文档，即使它可能是英语，或者没有太好的示例，仍然要去看，而不是被一些没头没尾或者抄来抄去的博客耽误你的时间。
Electron 的官方文档就非常得不详细，它也在 main，preload，renderer 这一块变过很多次，详情可以看看博客中的上一篇文章《在 webapck+electron+typescript中使用go开发的node插件》。
本文说说一个常用的日志小工具 electron-log 的使用（基于 5.1.4）。
引入 1npm i electron-log 自己定义一个 logger.ts（也可以在 main.ts 中直接定义） 1import log from &amp;#39;electron-log/main&amp;#39;; 2log.transports.console.level = false; // 控制台关闭输出（只输出到文件） 3log.transports.file.level = &amp;#39;silly&amp;#39;; 4log.transports.file.maxSize = 1002430; // 文件最大不超过 1M 5log.transports.file.format = &amp;#39;[{y}-{m}-{d} {h}:{i}:{s}.{ms}] [{level}]{scope} {text}&amp;#39;; 6const date = new Date(); 7const dateStr = date.getFullYear() + &amp;#39;-&amp;#39; + (date.getMonth() + 1) + &amp;#39;-&amp;#39; + date.getDate(); 8log.transports.file.resolvePathFn = () =&amp;gt; &amp;#39;log\\&amp;#39; + dateStr + &amp;#39;.</description></item><item><title>在 webapck+electron+typescript中使用go开发的node插件</title><link>https://travisbikkle.github.io/2024/04/2024-04-23-webpack-electron-node-addon/</link><pubDate>Tue, 23 Apr 2024 18:21:53 +0800</pubDate><guid>https://travisbikkle.github.io/2024/04/2024-04-23-webpack-electron-node-addon/</guid><description>node 插件，electron 和 webpack 那些事 首先要明确在哪里引入 node 的插件， main，preload还是 renderer？ 我们开发了一个 node 的插件，需要在 electron 中引入。我们一开始当然是希望在 renderer 中引入，毕竟最接近业务逻辑，省事。
不过会遇到报错 &amp;lsquo;require is not defined&amp;rsquo;，也就是没有 require 函数。
这个时候网上可能有些回答会让你在 main.ts 中打开 nodeIntegration：
1mainWindow = new BrowserWindow({ 2 height: 800, 3 width: 1280, 4 maxHeight: 2160, 5 webPreferences: { 6 nodeIntegration: true, 7 devTools: nodeEnv.dev, 8 preload: path.join(__dirname, &amp;#39;./preload.bundle.js&amp;#39;), 9 }, 10}); 实际上这是不推荐的，为什么要在 renderer 中允许执行本地的命令，如 fs 等等？如果是一个恶意的网站，他就能访问你本机所有的文件。当然如果你确保自己的应用不访问外部网站，也可以。
我们可以了解下比较安全的做法。
为了解决这个问题，我花了整整一天的时间，我这个项目的技术栈是 TypeScript, Webpack 5, 并且需要引入一个 go 写的 node 插件，现代 javascript 的buff 叠满了属于是，我这个后端开发感受到了前端满满的恶意了。 开发插件并在 node 中跑通不到两小时，可是把这个插件放到 webpack + electron 中花了我整整 7 个小时。</description></item><item><title>webpack 5 mock 10分钟快速配置</title><link>https://travisbikkle.github.io/2024/03/2024-03-15-webpack-react-mock/</link><pubDate>Fri, 15 Mar 2024 11:13:53 +0800</pubDate><guid>https://travisbikkle.github.io/2024/03/2024-03-15-webpack-react-mock/</guid><description>不说废话，直接开始。我使用 webpack 5.90.3，以下是我的配置。
文件结构
1project_root/ 2 |-- webpack.config.js 3 |-- mockserver.js 4 |-- mock/ 5 |-- user.js webpack.config.js
因为 express 现在不再附带 body-parser，现在需要执行 npm i -D body-parser。如果你希望读取 request 里面的内容，你会需要这个插件。
1const webpack = require(&amp;#34;webpack&amp;#34;); 2var bodyParser = require(&amp;#39;body-parser&amp;#39;) 3const mockServer = require(&amp;#34;./mockserver.js&amp;#34;) 4 5module.exports = (env, argv) =&amp;gt; { 6 // ... some code 7 return { 8 devServer: { 9 setupMiddlewares: (middlewares, devServer) =&amp;gt; { 10 if (!devServer) { 11 throw new Error(&amp;#39;webpack-dev-server is not defined&amp;#39;); 12 } 13 14 devServer.</description></item></channel></rss>