<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>electron on 奇风岁月</title><link>https://travisbikkle.github.io/electron/</link><description>Recent content in electron on 奇风岁月</description><generator>Hugo -- gohugo.io</generator><language>zh-hans</language><copyright>Copyright © 2022-{year} Travis Bikkle. All Rights Reserved.</copyright><lastBuildDate>Mon, 01 Jul 2024 10:18:30 +0800</lastBuildDate><atom:link href="https://travisbikkle.github.io/electron/index.xml" rel="self" type="application/rss+xml"/><item><title>Aria2 Rpc 使用</title><link>https://travisbikkle.github.io/2024/07/aria2-rpc/</link><pubDate>Mon, 01 Jul 2024 10:18:30 +0800</pubDate><guid>https://travisbikkle.github.io/2024/07/aria2-rpc/</guid><description>本文将演示如何使用 aria2 rpc 开发一个下载模块，注意，这不是一个完整的应用，仅仅是为了给你一些启发。
tech version electron 30.0.6 webpack 5.91.0 nodejs v20.14.0 aria2 1.37.0 React 18.2.0 react-use-websocket 4.8.1 @mui/x-charts/SparkLineChart 7.3.2 aria2 文档 react-use-websocket 文档
成品演示 加载并启动 aria2 怎么将 aria2 集成到你的项目中 你可以要求你的用户自行安装 aria2c.exe，或者将 aria2c.exe 直接打包到你的项目中。
如果你采用后者，下面是一些示例。
假设你的工程目录是：
1src 2build 3 |-- aria2c.exe 4package.json 打包 下面是一个使用 Electron Builder 的示例，它将 build/aria2c.exe 拷贝到安装后的根目录。
1&amp;#34;scripts&amp;#34;: { 2 &amp;#34;dev&amp;#34;: &amp;#34;xxxxxxx&amp;#34; 3}, 4&amp;#34;build&amp;#34;: { 5 &amp;#34;extraFiles&amp;#34;: [ 6 { 7 &amp;#34;from&amp;#34;: &amp;#34;build/aria2c.exe&amp;#34;, 8 &amp;#34;to&amp;#34;: &amp;#34;&amp;#34; 9 }, 10} 将它放到 package.</description></item><item><title>Electron 源码保护</title><link>https://travisbikkle.github.io/2024/06/electron-bytecode/</link><pubDate>Sat, 29 Jun 2024 10:15:44 +0800</pubDate><guid>https://travisbikkle.github.io/2024/06/electron-bytecode/</guid><description>这是一个示例，演示如何快速在你的 Electron 项目中启用字节码保护，没有多余的废话。
环境 tech version electron 30.0.6 webpack 5.91.0 @herberttn/bytenode-webpack-plugin 2.3.1 nodejs v20.14.0 步骤 Webpack 配置 参考文档
1// 引入依赖 2const { BytenodeWebpackPlugin } = require(&amp;#39;@herberttn/bytenode-webpack-plugin&amp;#39;); 3// 在生产环境启用 4const isEnvProduction = process.env.NODE_ENV === &amp;#39;production&amp;#39;; 5... 6plugins: [ 7 isEnvProduction &amp;amp;&amp;amp; new BytenodeWebpackPlugin({ compileForElectron: true }), 8], 9... 10// main，preload，renderer 需要更改 entry 配置。我使用了 webpack-merge，如果你没有使用，忽略即可。 11// main 12const mainConfig = merge(commonConfig, { 13 // entry: &amp;#39;./src/main/main.ts&amp;#39;, 14 entry: { 15 main: &amp;#39;./src/main/main.ts&amp;#39;, 16 }, 17 target: &amp;#39;electron-main&amp;#39;, 18 output: { 19 filename: &amp;#39;[name].</description></item><item><title>electron-log@5 的使用</title><link>https://travisbikkle.github.io/2024/05/2024-05-17-electron-log-v5/</link><pubDate>Fri, 17 May 2024 18:21:53 +0800</pubDate><guid>https://travisbikkle.github.io/2024/05/2024-05-17-electron-log-v5/</guid><description>我们使用一个开源软件，一般都是通过搜索示例或教程来学习如何使用。可是如果一个软件发生过不兼容的变更，而网络上一般都是些旧的做法，这样就会给我们带来非常大的心智负担。
因此我建议有志之士尽量去看官方文档，即使它可能是英语，或者没有太好的示例，仍然要去看，而不是被一些没头没尾或者抄来抄去的博客耽误你的时间。
Electron 的官方文档就非常得不详细，它也在 main，preload，renderer 这一块变过很多次，详情可以看看博客中的上一篇文章《在 webapck+electron+typescript中使用go开发的node插件》。
本文说说一个常用的日志小工具 electron-log 的使用（基于 5.1.4）。
引入 1npm i electron-log 自己定义一个 logger.ts（也可以在 main.ts 中直接定义） 1import log from &amp;#39;electron-log/main&amp;#39;; 2log.transports.console.level = false; // 控制台关闭输出（只输出到文件） 3log.transports.file.level = &amp;#39;silly&amp;#39;; 4log.transports.file.maxSize = 1002430; // 文件最大不超过 1M 5log.transports.file.format = &amp;#39;[{y}-{m}-{d} {h}:{i}:{s}.{ms}] [{level}]{scope} {text}&amp;#39;; 6const date = new Date(); 7const dateStr = date.getFullYear() + &amp;#39;-&amp;#39; + (date.getMonth() + 1) + &amp;#39;-&amp;#39; + date.getDate(); 8log.transports.file.resolvePathFn = () =&amp;gt; &amp;#39;log\\&amp;#39; + dateStr + &amp;#39;.</description></item><item><title>在 webapck+electron+typescript中使用go开发的node插件</title><link>https://travisbikkle.github.io/2024/04/2024-04-23-webpack-electron-node-addon/</link><pubDate>Tue, 23 Apr 2024 18:21:53 +0800</pubDate><guid>https://travisbikkle.github.io/2024/04/2024-04-23-webpack-electron-node-addon/</guid><description>node 插件，electron 和 webpack 那些事 首先要明确在哪里引入 node 的插件， main，preload还是 renderer？ 我们开发了一个 node 的插件，需要在 electron 中引入。我们一开始当然是希望在 renderer 中引入，毕竟最接近业务逻辑，省事。
不过会遇到报错 &amp;lsquo;require is not defined&amp;rsquo;，也就是没有 require 函数。
这个时候网上可能有些回答会让你在 main.ts 中打开 nodeIntegration：
1mainWindow = new BrowserWindow({ 2 height: 800, 3 width: 1280, 4 maxHeight: 2160, 5 webPreferences: { 6 nodeIntegration: true, 7 devTools: nodeEnv.dev, 8 preload: path.join(__dirname, &amp;#39;./preload.bundle.js&amp;#39;), 9 }, 10}); 实际上这是不推荐的，为什么要在 renderer 中允许执行本地的命令，如 fs 等等？如果是一个恶意的网站，他就能访问你本机所有的文件。当然如果你确保自己的应用不访问外部网站，也可以。
我们可以了解下比较安全的做法。
为了解决这个问题，我花了整整一天的时间，我这个项目的技术栈是 TypeScript, Webpack 5, 并且需要引入一个 go 写的 node 插件，现代 javascript 的buff 叠满了属于是，我这个后端开发感受到了前端满满的恶意了。 开发插件并在 node 中跑通不到两小时，可是把这个插件放到 webpack + electron 中花了我整整 7 个小时。</description></item></channel></rss>