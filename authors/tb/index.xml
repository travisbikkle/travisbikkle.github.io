<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Travis Bikkle on 奇风岁月</title><link>https://travisbikkle.github.io/authors/tb/</link><description>Recent content in Travis Bikkle on 奇风岁月</description><generator>Hugo -- gohugo.io</generator><language>zh-hans</language><copyright>Copyright © 2022-{year} Travis Bikkle. All Rights Reserved.</copyright><atom:link href="https://travisbikkle.github.io/authors/tb/index.xml" rel="self" type="application/rss+xml"/><item><title>Test Algolia Selector</title><link>https://travisbikkle.github.io/2024/01/test-algolia-selector/</link><pubDate>Fri, 26 Jan 2024 11:10:02 +0800</pubDate><guid>https://travisbikkle.github.io/2024/01/test-algolia-selector/</guid><description>This is a h2 this is some content. this is some lis.
this is li alpha this is li beta this is li gamma this is some un ordered list.
this is a this is b this is c This is a h3 this is some content.
This is a h4 this is some content.
This is a h5 this is some content.</description></item><item><title>Unity Editor Scripting 样例</title><link>https://travisbikkle.github.io/2024/01/unity-editor-scripting-demo/</link><pubDate>Thu, 04 Jan 2024 11:24:36 +0800</pubDate><guid>https://travisbikkle.github.io/2024/01/unity-editor-scripting-demo/</guid><description>Unity 的官方文档非常详细，但是不是所有人学习Unity都是从头看到尾看文档过来的。 我最近刚接触Unity,最近想给编辑器扩展一些功能，比如点击Inspector面板，在Project窗口中高亮选择Prefab或者Script。 这么小小的一个需求，查遍了中文互联网，不得其果。大家要么在CSDN上贴一些零碎的、没有格式化的代码，要么互相复制粘贴。结果不言而喻。 看外网，似乎大家提到了一些代码，但是Unity论坛上的人都是高手，作为一个新手看到了代码都不知道放在哪，怎么用，非常苦恼。 今天我把自己折腾了几个小时的一点小代码贴上，作为记录。如果大家对于编辑器扩展有大量需求，建议还是系统地学习一下官方的教程，不要像我，只求快，结果花费的时间更多。
扩展代码需要放到Editor文件夹下 这个Editor文件夹你可以建到任意的地方，我放到了Assets/Scripts/Editor下面，在其中创建一个C#文件，命名随意。 将以下代码粘贴进文件，保存，即可在Inspect面板点击挂载脚本时高亮脚本。
1using UnityEditor; 2using UnityEditor.UIElements; 3using UnityEngine; 4using UnityEngine.UIElements; 5 6 7[CustomEditor(typeof(MonoBehaviour), true)] 8public class HighlightItem : Editor { 9 public override VisualElement CreateInspectorGUI() { 10 var root = new VisualElement(); 11 InspectorElement.FillDefaultInspector(root, serializedObject, this); 12 root.Add(new Label(&amp;#34;点击以高亮&amp;#34;)); 13 root.RegisterCallback&amp;lt;ClickEvent&amp;gt;(Highlight); 14 15 return root; 16 } 17 18 private void Highlight(ClickEvent evt) { 19 var script = MonoScript.FromMonoBehaviour((MonoBehaviour)target); 20 21 UnityEditor.EditorGUIUtility.PingObject(script); 22 //UnityEditor.</description></item><item><title>Vmware 中 Intellij Idea 快捷键错误</title><link>https://travisbikkle.github.io/2023/12/idea-shortkey-error-in-vmware/</link><pubDate>Fri, 01 Dec 2023 11:24:32 +0800</pubDate><guid>https://travisbikkle.github.io/2023/12/idea-shortkey-error-in-vmware/</guid><description>在VMware中，CTRL ALT是默认的将鼠标焦点从虚拟机中移开的热键，这将导致一切在Vmware中运行的虚拟机系统中以该组合键 位开头的热键不可用。比如Intellij Idea的默认后退快捷键CTRL ALT LEFT。
一开始我以为是KDE热键冲突的问题，因为KDE默认有很多的快捷键，但是经过查看KDE的系统设置，并没有发现热键占用的情况：
直到我意识到screenkey也没有提示，这说明我的KDE根本没有接收到CTRL ALT LEFT按键。答案显而易见，是Vmware的问题了。 为了防止冲突，在Vmware的 编辑-首选项-热键 中可以将这四个按键都勾选上。</description></item><item><title>Vmware Power-ON 脚本启动失败</title><link>https://travisbikkle.github.io/2023/11/vmware-poweron-script/</link><pubDate>Thu, 16 Nov 2023 11:24:33 +0800</pubDate><guid>https://travisbikkle.github.io/2023/11/vmware-poweron-script/</guid><description>VMware 的开机脚本位于 /etc/vmware-tools/ 下。如果你的虚拟机报错启动客户机脚本失败，你可以在虚拟机-电源-开机中开机，然后进入该目录调试。
如果你的vmware-tools进行过升级，但是升级过程中出现了问题，可能导致脚本没有正确命名。比如，下面是开机、关机等操作对应的脚本名称
1poweroff-vm-default 2poweron-vm-default 3resume-vm-default 4suspend-vm-default 5vgauth.conf 而你的机器上可能是
1poweroff-vm-default.dpkg-dist 2poweron-vm-default.dpkg-dist 3resume-vm-default.dpkg-dist 4suspend-vm-default.dpkg-dist 5vgauth.conf.dpkg-dist 那么请执行以下命令重命名即可
1find /etc/vmware-tools/ -name &amp;#34;*.dpkg-dist&amp;#34; -exec sh -c &amp;#39;x={}; cp &amp;#34;$x&amp;#34; $(echo $x | sed &amp;#39;s/\.dpkg-dist//g&amp;#39;)&amp;#39; \; 另外你还可能需要检查 /etc/vmware-tools/scripts/vmware 以及各个脚本是否具有可执行权限。</description></item><item><title>Kubuntu Vscode 鼠标列编辑设置</title><link>https://travisbikkle.github.io/2023/11/kubuntu-vscode-mouse/</link><pubDate>Wed, 15 Nov 2023 11:24:33 +0800</pubDate><guid>https://travisbikkle.github.io/2023/11/kubuntu-vscode-mouse/</guid><description>鼠标中键是某些操作系统的默认粘贴快捷键，这导致在VSCode中无法使用鼠标中键进入列编辑模式。
点击 文件-首选项-设置 点击右上角，打开json文件 添加如下行
1&amp;#34;editor.selectionClipboard&amp;#34;: false 关闭 VSCode 并重新打开，测试是否生效。</description></item><item><title>Android Studio Emulator 启动失败</title><link>https://travisbikkle.github.io/2023/11/android-studio-emulator-failed/</link><pubDate>Wed, 15 Nov 2023 11:24:23 +0800</pubDate><guid>https://travisbikkle.github.io/2023/11/android-studio-emulator-failed/</guid><description>报错现象 :::danger ERROR The emulator process for AVD Pixel_3a_API_34_extension_level_7_x86_64 has terminated. ::: 没有任何的报错信息，如果不知道日志在哪里，该如何排查呢？
解决办法 在你的家目录如下位置，执行如下命令，通过命令行查询出虚拟设备并启动，将报错信息打印到前台
1yourname@v:~/Android/Sdk/emulator$ ./emulator -list-avds 2Pixel_3a_API_34_extension_level_7_x86_64 3yourname@v:~/Android/Sdk/emulator$ ./emulator @Pixel_3a_API_34_extension_level_7_x86_64 4INFO | Android emulator version 32.1.15.0 (build_id 10696886) (CL:N/A) 5INFO | Found systemPath /home/yourname/Android/Sdk/system-images/android-34/google_apis/x86_64/ 6INFO | Storing crashdata in: /tmp/android-yourname/emu-crash.db, detection is enabled 7INFO | Duplicate loglines will be removed, if you wish to see each indiviudal line launch with the -log-nofilter flag. 8WARNING | Please update the emulator to one that supports the feature(s): SupportPixelFold 9ERROR | Not enough space to create userdata partition.</description></item><item><title>Windows Vmware Amd-V 开启</title><link>https://travisbikkle.github.io/2023/11/win11-vmware-amd-v/</link><pubDate>Tue, 14 Nov 2023 11:24:35 +0800</pubDate><guid>https://travisbikkle.github.io/2023/11/win11-vmware-amd-v/</guid><description>报错现象 我在 Win 11 中安装了 Vmware，并在Vmware中安装了 Kubuntu 22.04 虚拟机。 当我在虚拟机设置的cpu设置中开启AMD-V的时候，Vmware提示如下错误： 起初我并没有在意，只是感觉虚拟机的性能有些差，直到我在虚拟机中尝试使用Android Studio附带的安卓模拟器时，遇到了问题。
无法开启 AMD-V 或 Intel VT-x 的影响 性能下降
虚拟机的性能将受到限制，因为它不能充分利用硬件虚拟化扩展，指令执行和内存管理开销可能增加。 这个性能下降是肉眼可见的，你在点击、挪动鼠标的时候会感觉到有一种难以察觉的迟滞感，非常难受。
兼容性问题
某些操作系统和应用程序可能无法正常运行或可能出现不稳定的情况。
如果你在虚拟机中开发 Android，你可能无法在虚拟机中再开启一个模拟器。
安全性问题
虚拟机之间的隔离性可能会下降，从而增加了安全风险。
如何解决 确认你的主板支持 AMD-V 或者 Intel VT-x
现在的主板基本都支持，你需要通过搜索引擎，搜索你的主板该如何确认是否已经开启该功能。 关闭组策略中的如下设置
在开始菜单中搜索 gpedit，打开组策略编辑器： 在 计算机配置-管理模板-系统-Device Guard 中，双击打开 基于虚拟化的安全，设置为 已禁用： 关闭 Windows 安全中心 中的内存完整性保护
将以下内存完整性的开关关闭，然后重启系统。 如果你曾经开启过Hyper-V，还需要在 控制面板-程序和功能-启用或关闭Windows功能 中，去掉勾选Hyper-V</description></item><item><title>Intellij Idea 启动报错</title><link>https://travisbikkle.github.io/2023/11/idea-start-error/</link><pubDate>Tue, 14 Nov 2023 11:24:23 +0800</pubDate><guid>https://travisbikkle.github.io/2023/11/idea-start-error/</guid><description>Intellij Idea 2023.2 启动报错：
::: danger ERROR Error while opening intellij &amp;ldquo;Cannot connect to already running IDE instance. Exception: Process 2,837 is still running&amp;rdquo; :::
youtrack 跟踪 https://youtrack.jetbrains.com/issue/IDEA-330531
解决办法 在菜单中编辑启动项，在idea.sh前加入一个前置的脚本，在其中删除不该存在的.lock文件
1/opt/idea-IU-232.10203.10/bin/prestart.sh; /opt/idea-IU-232.10203.10/bin/idea.sh 脚本的内容为
1#!/bin/bash 2rm ~/.config/JetBrains/IntelliJIdea2023.2/.lock</description></item><item><title>Kubuntu 软件源在哪里修改</title><link>https://travisbikkle.github.io/2023/11/kubuntu2204-software-resources-bug/</link><pubDate>Wed, 08 Nov 2023 11:24:30 +0800</pubDate><guid>https://travisbikkle.github.io/2023/11/kubuntu2204-software-resources-bug/</guid><description>Kubuntu 22.04 的软件源可以在 Discover 中的如下位置设置。 但是如果你的 Discover 不显示以上界面，可以通过如下方法来修复。
编辑如下文件
1vi /usr/share/applications/software-properties-qt.desktop 将以下内容替换到源文件
1[Desktop Entry] 2Name=Software Sources 3GenericName=Software Sources 4Comment=Configure the sources for installable software and updates 5Exec=pkexec env DISPLAY=$DISPLAY XAUTHORITY=$XAUTHORITY software-properties-qt 6Icon=applications-other 7NoDisplay=false 8Terminal=false 9X-MultipleArgs=false 10Type=Application 11Categories=System;Settings; 12MimeType=text/x-apt-sources-list; 13X-KDE-SubstituteUID=false 14X-Ubuntu-Gettext-Domain=software-properties 如此，在 Discover可以显示软件源的界面，在菜单中也可以搜索到在其它发行版中常见的 软件源 菜单项。</description></item><item><title>Kubuntu 22.04 中文输入法</title><link>https://travisbikkle.github.io/2023/11/kubuntu2204-chiness-im/</link><pubDate>Wed, 08 Nov 2023 11:24:29 +0800</pubDate><guid>https://travisbikkle.github.io/2023/11/kubuntu2204-chiness-im/</guid><description>继续使用 fcitx5（推荐） 安装 fcitx5 中文输入法
1sudo apt install fcitx5-chinese-addons \ 2fcitx5-frontend-gtk4 fcitx5-frontend-gtk3 fcitx5-frontend-gtk2 \ 3fcitx5-frontend-qt5 $(check-language-support) check-language-support 同时安装了系统中缺失的中文语言包（在 区域设置-语言 中点击安装缺失的语言包没有反应），这样才能在第3步中看到 输入法 的选项。
启用 fcitx5 注意，不要相信网上任何要你更改.xinputrc或者在某些文件中添加如下变量的话
GTK_IM_MODULE=fcitx
QT_IM_MODULE=fcitx
XMODIFIERS=@im=fcitx
请直接使用你登录的用户执行以下命令
1im-config 在弹出的窗口中，依次选择确定，是，选择如下选项即可。 重启系统 在 系统设置-区域设置-输入法 中添加 拼音 或者 pinyin
解决 Intellij Idea 中使用 fcitx5 候选框不跟随的问题
可以将如下项目的release文件解压缩到JetBrain产品的jbr目录中（可能导致markdown无法预览）
1https://github.com/RikudouPatrickstar/JetBrainsRuntime-for-Linux-x64 程序员推荐在如下配置中关闭简繁切换快捷键
系统设置-区域设置-输入法-配置附加组件-简繁切换 中删除CTRL SHIFT F的简繁切换快捷键。
解决中 Visual Studio Code 中无法使用任何中文输入法的问题
如果你中 Discover 软件管理工具中下载了 VSCode，请卸载后，在官网下载 deb 包安装，即可解决无法输入中文的问题。
使用 fcitx4 卸载 fcitx5
1sudo apt-get remove fcitx5 安装谷歌拼音输入法</description></item><item><title>Neat（干净上网，知乎登录屏蔽，csdn、起点免登录复制）</title><link>https://travisbikkle.github.io/other/tools/2023-11-08-zhihu_csdn_extension.html</link><pubDate>Wed, 08 Nov 2023 05:52:41 +0800</pubDate><guid>https://travisbikkle.github.io/other/tools/2023-11-08-zhihu_csdn_extension.html</guid><description>在edge浏览器扩展商店中搜索 Neat 并安装。
知乎 扩展安装好后，知乎登录弹窗禁用功能即刻生效，无需其它设置。
csdn 在任意csdn页面，鼠标选择页面内容，无需点击右键或者按CTRL C，即可将选中的内容保留样式复制到系统剪切板。 目前只能将复制到粘贴板的内容复制到Word或者Linux中的LibreOffice中。
Bilibili 支持开启学习模式，屏蔽推荐、广告，隐藏评论区，并且在非网页全屏模式下，在视频播放控制窗口下方添加选集按钮（设置播放倍速按钮左侧）。
更多 如果有任何使用问题，或者新功能建议，请发邮件给我。</description></item><item><title>右键添加 Cygwin</title><link>https://travisbikkle.github.io/2023/10/cygwin-right-click-menu/</link><pubDate>Tue, 31 Oct 2023 11:24:35 +0800</pubDate><guid>https://travisbikkle.github.io/2023/10/cygwin-right-click-menu/</guid><description>本文基于 Windows 10。
效果展示 方法 重新运行 cygwin 安装程序，勾选 chere 安装包 安装完成后，使用管理员身份运行 cygwin，执行以下命令 1chere -i -t mintty -s bash 此时右键菜单应该有 &amp;ldquo;Bash Prompt Here&amp;rdquo; 菜单选项，如果您想更改为中文，可以在更改此处注册表 1计算机\HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Directory\background\shell\cygwin64_bash 增加 Icon 字符串以显示菜单图标，并更改中文描述，达到上图菜单效果。</description></item><item><title>Windows 常用命令</title><link>https://travisbikkle.github.io/2023/10/windows-common-commands/</link><pubDate>Tue, 31 Oct 2023 11:24:34 +0800</pubDate><guid>https://travisbikkle.github.io/2023/10/windows-common-commands/</guid><description>在右键菜单中添加管理员获得所有权 打开记事本，将以下内容粘贴 1Windows Registry Editor Version 5.00 2[HKEY_CLASSES_ROOT\*\shell\runas] 3@=&amp;#34;管理员取得所有权&amp;#34; 4&amp;#34;NoWorkingDirectory&amp;#34;=&amp;#34;&amp;#34; 5[HKEY_CLASSES_ROOT\*\shell\runas\command] 6@=&amp;#34;cmd.exe /c takeown /f \&amp;#34;%1\&amp;#34; &amp;amp;&amp;amp; icacls \&amp;#34;%1\&amp;#34; /grant administrators:F&amp;#34; 7&amp;#34;IsolatedCommand&amp;#34;=&amp;#34;cmd.exe /c takeown /f \&amp;#34;%1\&amp;#34; &amp;amp;&amp;amp; icacls \&amp;#34;%1\&amp;#34; /grant administrators:F&amp;#34; 8[HKEY_CLASSES_ROOT\exefile\shell\runas2] 9@=&amp;#34;管理员取得所有权&amp;#34; 10&amp;#34;NoWorkingDirectory&amp;#34;=&amp;#34;&amp;#34; 11[HKEY_CLASSES_ROOT\exefile\shell\runas2\command] 12@=&amp;#34;cmd.exe /c takeown /f \&amp;#34;%1\&amp;#34; &amp;amp;&amp;amp; icacls \&amp;#34;%1\&amp;#34; /grant administrators:F&amp;#34; 13&amp;#34;IsolatedCommand&amp;#34;=&amp;#34;cmd.exe /c takeown /f \&amp;#34;%1\&amp;#34; &amp;amp;&amp;amp; icacls \&amp;#34;%1\&amp;#34; /grant administrators:F&amp;#34; 14[HKEY_CLASSES_ROOT\Directory\shell\runas] 15@=&amp;#34;管理员取得所有权&amp;#34; 16&amp;#34;NoWorkingDirectory&amp;#34;=&amp;#34;&amp;#34; 17[HKEY_CLASSES_ROOT\Directory\shell\runas\command] 18@=&amp;#34;cmd.exe /c takeown /f \&amp;#34;%1\&amp;#34; /r /d y &amp;amp;&amp;amp; icacls \&amp;#34;%1\&amp;#34; /grant administrators:F /t&amp;#34; 19&amp;#34;IsolatedCommand&amp;#34;=&amp;#34;cmd.</description></item><item><title>Ubuntu 改键</title><link>https://travisbikkle.github.io/2023/10/remaps-keys-in-ubuntu/</link><pubDate>Tue, 17 Oct 2023 11:24:32 +0800</pubDate><guid>https://travisbikkle.github.io/2023/10/remaps-keys-in-ubuntu/</guid><description>在 Ubuntu Software 中搜索 Gnome Tweaks 并安装。 点击 Keyboard &amp;amp; Mouse 点击 Additional Layout Options 在弹出的窗口中，勾选 Ctrl position 中的 Swap Ctrl and Caps Lock 本文基于 Ubuntu 22.04 LTS 及 Gnome Tweaks 3.34.0 编写。
补充：使用kde更加的方便，该设置已经被集成到系统设置中，无需下载 Gnome Tweaks。</description></item><item><title>Code Server Nginx Ssl Error</title><link>https://travisbikkle.github.io/2023/10/code-server-nginx-ssl-error-1006/</link><pubDate>Tue, 17 Oct 2023 11:24:30 +0800</pubDate><guid>https://travisbikkle.github.io/2023/10/code-server-nginx-ssl-error-1006/</guid><description>1An unexpected error occurred that requires a reload of this page. 2The workbench failed to connect to the server (Error: WebSocket close with status code 1006) Code server popped up a websocket error when I exposed code-server using a custom domain and a custom port via nginx.
Here is part of my nginx.conf.
1 upstream code{ 2 server xxxxxxxxx; 3 } 4 server { 5 listen 40032 ssl; 6 server_name xxxxxxxx; 7 ssl_certificate certs/mycert.</description></item><item><title>How to add samba entry in /etc/fstab</title><link>https://travisbikkle.github.io/2023/10/fatab-samba/</link><pubDate>Tue, 17 Oct 2023 11:24:29 +0800</pubDate><guid>https://travisbikkle.github.io/2023/10/fatab-samba/</guid><description>Configure Samba On Ubuntu
1. install necessary tools 1sudo apt install cifs-utils 2. prepare credentials 1sudo mkdir /mnt/samba 2sudo vi /root/.smb_credentials 3. put next 2 lines into /root/.smb_credentials 1username=&amp;lt;your user name&amp;gt; 2password=&amp;lt;your password&amp;gt; 4. change credential file permission for security reason 1chmod 600 /root/.smb_credentials 5. configure /etc/fstab 1sudo vi /etc/fstab 6. put next line into /etc/fstab. add noauto to options if you don&amp;rsquo;t want to let Ubuntu auto mount this path 1#&amp;lt;shared path&amp;gt; &amp;lt;mount point&amp;gt; &amp;lt;type&amp;gt; &amp;lt;options&amp;gt; 2//192.</description></item><item><title>使用 Adobe Premiere 制作 GIF 文件</title><link>https://travisbikkle.github.io/2023/05/adobe-premiere-gif/</link><pubDate>Wed, 31 May 2023 11:24:28 +0800</pubDate><guid>https://travisbikkle.github.io/2023/05/adobe-premiere-gif/</guid><description> 双击左下角媒体浏览器，将视频素材导入 在左上角编辑窗口，点击如图所示按钮，标记入点与出点（开始与结束） 将左上角的内容拖动到右下角时间轴内 右键点击时间轴内的波段，点击取消链接，再次右键，选择清除声音轨道的波纹，以删除声音 选择 文件-&amp;gt;导出-&amp;gt;媒体，选择 动画GIF 格式，调整大小后导出</description></item><item><title>Vuepress .x 使用 Pangu.js 实现中英文自动空格</title><link>https://travisbikkle.github.io/2023/05/vuepress-pangu/</link><pubDate>Thu, 25 May 2023 11:24:27 +0800</pubDate><guid>https://travisbikkle.github.io/2023/05/vuepress-pangu/</guid><description>偏执狂的自述 如果你跟我一樣，每次看到網頁上的中文字和英文、數字、符號擠在一塊，就會坐立難安，忍不住想在它們之間加個空格。這個外掛（支援 Chrome 和 Firefox）正是你在網路世界走跳所需要的東西，它會自動替你在網頁中所有的中文字和半形的英文、數字、符號之間插入空白。
漢學家稱這個空白字元為「盤古之白」，因為它劈開了全形字和半形字之間的混沌。另有研究顯示，打字的時候不喜歡在中文和英文之間加空格的人，感情路都走得很辛苦，有七成的比例會在 34 歲的時候跟自己不愛的人結婚，而其餘三成的人最後只能把遺產留給自己的貓。畢竟愛情跟書寫都需要適時地留白。
與大家共勉之。
以上这段恶毒的独白来自 https://github.com/vinta/pangu.js/ 的偏执狂作者 vinta，但依然不能充分的表达有追求的杰青们看到中英文和符号挤在一块的不适。
好在现在可以使用 pangu.js 来帮你规避辛苦的感情路或者孤独终老的风险，赶快来看看如何在 VuePress 中使用吧！
VuePress 1.x VuePress 1.x 版本可以参考 https://shigma.github.io/markdown-it-pangu/vuepress.html 配置。
VuePress 2.x 以上插件并没有适配 VuePress 2.x 的版本，但是好在 VuePress 2.x 预留了 hook，查看 markdown-it-pangu 的代码之后，我发现可以使用如下方法，略过插件，达成在 VuePress 2.x 中调用 pangu.js 的能力。
1// 以下代码在 config.ts 或者 config.js 中 2import panguPlugin from &amp;#39;markdown-it-pangu&amp;#39; 3// ... 省略 4export default defineUserConfig({ 5 extendsMarkdown: (md) =&amp;gt; { 6 md.use(panguPlugin) 7 }, 8// ... 省略 可以在任一 markdown 文件中测试，如：</description></item><item><title>Vuepress Algolia</title><link>https://travisbikkle.github.io/2023/05/vuepress-algolia/</link><pubDate>Wed, 24 May 2023 11:24:28 +0800</pubDate><guid>https://travisbikkle.github.io/2023/05/vuepress-algolia/</guid><description>Algolia 是一个优秀的静态网站搜索插件，非常适用于没有后台的静态网页博客系统（比如github pages）。
经过一定的申请步骤后（见下文链接），Algolia 通过爬虫定期爬取网站的数据将其存放到自己的数据库中。用户在网站上搜索的时候，就可以调用爬取的数据，显示搜索结果。但是 Algolia 有个缺点：它不是开箱即用的。参考以下两个链接，可以申请 Algolia 并在 VuePress 中做初步的配置。
VuePress 博客优化之开启 Algolia 全文搜索
VuePress 官网
但是每个人的环境、步骤可能都不一样，尤其是如果你经历过从 VuePress 1.x 迁移过 VuePress 2.x，可能你会发现无论如何都无法搜索出结果，并且无法从网络上得到答案。
如果你遇到了这个问题，可以参考以下步骤进行排障：
确定你的 VuePress 版本是 1.x 还是 2.x 可以在你的博客代码中的 package.json 中查看。 进入 https://crawler.Algolia.com/admin/ 编辑器检查以下三处配置 2.1 pathsToMatch 这一行默认带了一级 docs，请确认你的网站是否包含，如果不包含请删掉这里的docs 2.2 确认 lvl0.selectors 这一行，是 .sidebar-heading.active 还是 p.sidebar-heading.open。前者对应的是 VuePress 2.x 版本，后者适配的是 VuePress 1.x 版本，如果错用，在此界面点击 URL Tester 的测试时将可以爬取到 URL 但是无法爬取到 index。如果确认错配了，请在该网站找到正确的示例代码覆盖（注意替换为你的网站信息） 2.3 确认你的 appId，apiKey，indexName 等是否正确。 以下是我的配置，基于 VuePress 2.x，请参考。 1new Crawler({ 2 appId: &amp;#34;xxxxxx&amp;#34;, 3 apiKey: &amp;#34;xxxxxx&amp;#34;, 4 rateLimit: 8, 5 maxDepth: 10, 6 startUrls: [&amp;#34;https://travisbikkle.</description></item><item><title>数据结构</title><link>https://travisbikkle.github.io/2023/05/data-structure/</link><pubDate>Mon, 01 May 2023 11:24:02 +0800</pubDate><guid>https://travisbikkle.github.io/2023/05/data-structure/</guid><description>Doubly Linked List 什么是双向链表 双向链表是一种特殊的链表，其中的每个节点都包含前一个和后一个节点的引用。 下面是一个双向链表的简单示例：
1// Class for Doubly Linked List 2public class DLL { 3 // Head of list 4 Node head; 5 // Doubly Linked list Node 6 class Node { 7 int data; 8 Node prev; 9 Node next; 10 // Constructor to create a new node 11 // next and prev is by default initialized as null 12 Node(int d) { data = d; } 13 } 14} 1# Node of a doubly linked list 2class Node: 3 def __init__(self, next=None, prev=None, data=None): 4 # reference to next node in DLL 5 self.</description></item><item><title>Ubuntu Vnc</title><link>https://travisbikkle.github.io/2023/04/ubuntu-vnc/</link><pubDate>Mon, 10 Apr 2023 11:24:31 +0800</pubDate><guid>https://travisbikkle.github.io/2023/04/ubuntu-vnc/</guid><description>本文基于 Ubuntu 20.04 编写。
安装 vncserver 和要使用的桌面管理器 xfce 1apt install tightvncserver xfce4 xfce4-goodies 更改密码 1vncpasswd 配置 vnc 以便客户端连接时使用 xfce 桌面 编辑 ~/.vnc/xstartup，输入以下内容 1#!/bin/sh 2unset SESSION_MANAGER 3unset DBUS_SESSION_BUS_ADDRESS 4startxfce4 &amp;amp; 执行以下命令 1chmod +x ~/.vnc/xstartup 禁用休眠 1systemctl mask sleep.target suspend.target hibernate.target hybrid-sleep.target 启动服务器 1vncserver -localhost no -geometry 1920x1080 参考 https://linuxconfig.org/vnc-server-on-ubuntu-20-04-focal-fossa-linux</description></item><item><title>端口转发的一些方法</title><link>https://travisbikkle.github.io/2023/02/port-forward/</link><pubDate>Wed, 01 Feb 2023 11:24:24 +0800</pubDate><guid>https://travisbikkle.github.io/2023/02/port-forward/</guid><description>在《如何抓包分析 vrrp 报文是否中断》中我们使用了 iptables 进行指定协议的报文日志记录功能，此处新增一个好用的命令。
我们在开发过程中，可能经常需要经过堡垒机、跳板机等中转一次，才能访问到处于小网中的服务，如数据库。使用以下命令，可以在不借助第三方软件的情况下，完成端口转发，实现直连小网服务。
iptables 假设 192.168.1.3 是你的小网机器，端口是 15432
1iptables -t nat -A PREROUTING -p tcp --dport 15432 -j DNAT --to-destination 192.168.1.3:15432 2iptables -t nat -A POSTROUTING -p tcp -m tcp --dport 15432 -j MASQUERADE nginx upstream 192.168.1.3 { server 192.168.1.3:15432; } server { listen 15432; proxy_pass 192.168.1.3; proxy_connect_timeout 1h; proxy_timeout 1h; } 或者用 go 自己写了一些小工具来转发，我自己还写了一个自动生成 xshell 配置的工具，因为在公司内网，不便共享。</description></item><item><title>如何写一个 K8s Operator</title><link>https://travisbikkle.github.io/2022/05/operator-dev/</link><pubDate>Thu, 26 May 2022 11:24:26 +0800</pubDate><guid>https://travisbikkle.github.io/2022/05/operator-dev/</guid><description>使用过 k8s 的同学可能执行过以下命令：
1kubectl edit sts myapp # 编辑一个名称为 myapp 的 StatefulSet 2kubectl describe sts myapp # 查看一个名称为 myapp 的 StatefulSet StatefulSet 是 k8s 定义的一种资源，类似的还有 Deployment、Job、ConfigMap 等。当你执行 edit 命令编辑这些资源后，k8s 会通过不停轮询的方式（核心概念：control loop），将目标资源调整（核心概念：reconcile）到你期望的状态。
例如，你按了空调的遥控器，希望将房间的温度下调到 20℃。空调的压缩机开始工作，并且同时不停的检测当前实际的温度与你期望的温度之间的差异，直到温度达到20℃，这就是一个 control loop 的例子。
很简单，对吧？
设想一下如果不是这样，你将一手拿着温度计，然后不停的告诉空调温度仍然很高，或者已经变得过低了。
这就是声明式 API 的好处，用户只需要告诉程序你的期望，剩下的交给程序来做（对于程序开发者来说是雷锋行为），而程序实现目标最省力的方式，就是采用 control loop 的方式，不停的对比期望与现实的差距。
Operator 是什么 试想我们不再满足于 k8s 提供的默认的资源，我们想利用这种省心省力的方式，来管理我们自己的资源，如：数据库的一个用户。
你可能想说，数据库的用户存在于数据库内，我知道数据库的集群可以定义为 StatefulSet 然后由 k8s 管理，用户又怎么使用 k8s 管理呢？为什么要用 k8s 来管理呢？
为什么要用 k8s 管理用户资源？
以 MySql 为例，通常我们创建用户，是使用 root 用户登录到数据库，执行 sql 语句创建用户。但是设想以下几种场景：
你不知道 root 用户的密码，或者因为安全要求，不能提供给你 你不知道 MySql 的 IP 你知道以上信息，但是因为没有开启相应的节点权限，你无法登录数据库 你完成了以上所有步骤，结果其中某些登录或者创建步骤失败了，你和数据库运维人员开始扯皮 看到了吧？这些都是生产环境中，真实会遇到的事情。而使用以下步骤，我们就可以一举解决这些问题。</description></item><item><title>vrrp 报文抓包的方法</title><link>https://travisbikkle.github.io/2022/02/vrrp-cap/</link><pubDate>Tue, 01 Feb 2022 11:24:24 +0800</pubDate><guid>https://travisbikkle.github.io/2022/02/vrrp-cap/</guid><description>keepalived 的主机和备机，会每隔3s通过单播，向对方发送 vrrp 报文，当备机在 3次*每次心跳间隔（keepalived.conf中的adver_int参数） 都收不到主机的广播，自己将会升主。
以下两种可能都会存在：
主机没有发送广播 主机发送了广播，备机没有收到 因此，在主备都需要监控vrrp的发送（out）或接收（in）记录。 使用以下两种方式，都可以监控每次 vrrp 报文的内容，以便定位问题。
iptables 在主机和备机都添加监控vrrp发送和接收的iptables日志（该规则仅抓取vrrp行为，没有其它副作用） 1iptables -t raw -A PREROUTING -p vrrp -j LOG --log-level 6 --log-prefix &amp;#34;VRRP: &amp;#34; 2iptables -t raw -A OUTPUT -p vrrp -j LOG --log-level 6 --log-prefix &amp;#34;VRRP: &amp;#34; 使用以下命令检测是否添加成功： 1iptables -L -t raw -n 在/var/log/messages可以查看vrrp的记录。如果是suse或其它操作系统，该日志中没有vrrp记录的话，可以在dmesg或者/var/log/的目录中grep VRRP查看。 定位完问题后，执行以下命令删除添加的iptables规则 1iptables -t raw -D PREROUTING -p vrrp -j LOG --log-level 6 --log-prefix &amp;#34;VRRP: &amp;#34; 2iptables -t raw -D OUTPUT -p vrrp -j LOG --log-level 6 --log-prefix &amp;#34;VRRP: &amp;#34; tcpdump wireshark tcpdump 命令需要自行获取，wireshark 需要自行下载，这部分仅记录常用命令和注意点，由于在公司内网，图片无法放上来。</description></item><item><title>一个数据库主备频繁切换案例</title><link>https://travisbikkle.github.io/2022/01/a-case-of-database-switch/</link><pubDate>Thu, 20 Jan 2022 11:24:25 +0800</pubDate><guid>https://travisbikkle.github.io/2022/01/a-case-of-database-switch/</guid><description>问题现象 某集团某局点分别部署了某数据库的主备实例，业务发现偶尔访问数据库报错。
定位结论 其中一个节点使用的某物理机型，网卡存在故障，发生了多次复位，致使某数据库备机的keepalived双机软件接收不到对端的vrrp信号，备机在网卡复位期间短暂升主，两台机器都出现了vip，导致业务访问某数据库失败。
需要联系厂商，针对以下疑问给出答复：
节点A（某品牌F）和节点B（某品牌L）使用的网卡型号一样，但是为什么某品牌F的固件版本要比某品牌L的新？
某品牌L的网卡信息，和某品牌L官网该型号的机器的认证信息不一致，见下表。
表1-1 某品牌F机型、某品牌L机型和某品牌L官网认证信息对比
项目 节点A 节点B 某品牌L官网认证信息 服务器型号 某品牌F FiberHome R2200 V5 某品牌L Inspur NF8480M5 某品牌L Inspur NF8480M5 网卡驱动 ixgbe 5.1.0-k ixgbe 5.1.0-k igb.ko 5.6.0-k 网卡固件 0x800006da 1.1824.0 0x800003df - 是否发生过重启 否 是 - 定位过程 查看两个节点的keepalived日志
1cd /xx/xx/xx/logs 2zgrep Entering keepalived* 发现主机（节点A）上无异常，备机的keepalived在master、backup、fault三个状态频繁切换。
当keepalived进入master状态，会将vip绑定到网卡上。这样主机和备机都有vip，业务访问某数据库将会出现问题。
在备机上使用如下命令可以抓到短暂出现的vip：
1while true;do ip a s bond1|grep x.x.x.x;sleep 0.2;done 查看备机的keepalived.log，发现备机无法接收到主机的vrrp广播。
keepalived的主备机都会每3s发送一次vrrp协议的广播，当备机连续3次（9s）接收不到主机的广播，就会将自己升主。
查看主机的keepalived.log，发现主机在正常发送vrrp广播。
使用tcpdump在主机和备机同时抓包，问题复现后，发现主机确实发送了vrrp的广播，但是备机在(15:46:14-15:46:32)有18s的时间没有接收到任何来自主机的广播（此处应该有图，但是不放了）。
使用如下命令，查看备机上keepalived接收vrrp广播的网卡情况，发现是一张由eth4和eth8组成的active-backup模式的逻辑网卡，：
1cat /proc/net/bonding/bond1 查看/var/log/messages中两张物理网卡的信息，发现eth4和eth8网卡发生了多次复位，复位时间和gauss-datacube出现异常的时间能够对应的上（此处应该有图，但是不放了）。
查看节点B的服务器型号及网卡型号、固件版本（此处应该有图，但是不放了）。 节点B和节点A对比，发现节点A的这台某品牌F机型，比节点B的某品牌L机型使用的网卡固件要更新： 节点B和某品牌L官网认证信息(https://www.suse.com/nbswebapp/yesBulletin.jsp?bulletinNumber=148996)对比，发现节点B节点使用的网卡driver name和认证信息不符： 除了某局点节点B的某品牌L机型节点，我们还在其它局点的appdb的节点的某品牌L机型上，也发现了网卡重启的现象，该现象在某品牌F机型上未发现，判断是某品牌L的这批机器网卡存在故障。 这种短暂网卡重启的问题，由于tcp重连的特性，对于普通的应用感知不大，但是对于数据库这样包含双机软件的敏感应用，影响较大。</description></item><item><title>Diff Patch 应用</title><link>https://travisbikkle.github.io/2021/07/diff-patch/</link><pubDate>Wed, 14 Jul 2021 11:24:27 +0800</pubDate><guid>https://travisbikkle.github.io/2021/07/diff-patch/</guid><description>假设有三个文件，你需要将修复的bug的代码，合入到file_1.1中，生成一个名为file_1.1.fix的文件。
文件名 说明 file_1.0.orgin 旧版本的原始文件 file_1.0.fix 旧版本的修正文件，修改了一些 bug file_1.1 新版本的原始文件 参考以下命令 diff 用于对比生成补丁
1diff -urN old new &amp;gt; patch 2diff -urN file_1.0.origin file_1.0.fix &amp;gt; bug_patch patch 用于将补丁应用到新文件
1patch new -i patch -o target 2patch file_1.1 -i bug_patch -o file_1.1.fix diff path 是 linux 标准命令，windows 可以下载 git-bash 后使用。</description></item><item><title>Blktrace</title><link>https://travisbikkle.github.io/2021/04/blktrace/</link><pubDate>Mon, 19 Apr 2021 11:24:25 +0800</pubDate><guid>https://travisbikkle.github.io/2021/04/blktrace/</guid><description>可以用来定位 I/O 性能问题的工具有很多。常见的有 fio, dd, atop, iotop, iostat, vmstat 等。vmstat 可以提供系统性能的一个概览，一般可以看出来性能问题究竟是不是 I/O 的锅。想要具体查看每个设备的 I/O 情况，如 average request size, reads or writes per second，可以使用 iostat。
blktrace 介绍 更细粒度的分析，可以使用 blktrace。 blktrace 可以记录在 I/O 栈的多个阶段分别耗时多少。blktrace 的输出结果是二进制文件，可以用 blkparse 解析，但是它仍然很难读，需要使用 btt 来进一步转换成更易读的形式。
btt 输出结果涉及到的一些基础知识 btt 会对 I/O 栈 的不同阶段的耗时做分析，这些阶段是指：
Q — A block I/O is Queued G — Get Request M — A block I/O is Merged with an existing request. I — A request is Inserted into the device&amp;#39;s queue.</description></item><item><title>mount磁盘被秒umount的一个问题</title><link>https://travisbikkle.github.io/2019/09/a-case-of-mount-disk/</link><pubDate>Wed, 18 Sep 2019 11:24:22 +0800</pubDate><guid>https://travisbikkle.github.io/2019/09/a-case-of-mount-disk/</guid><description>问题描述 在 ubuntu 18.04 的机器上，自己搭了一个 samba 服务器。有一天要添加一块磁盘，因为服务器上还运行了一些其他服务，不想重启，因此使用 partprobe 动态扫描了磁盘，分区，写入 /etc/fstab，一切正常。 执行 mount -a，没有任何报错，不过磁盘就是没有挂载上去。
解决思路 使用 mount 命令，可以手动挂载 无任何报错出现，使用 umount 提示并未挂载 查看 journalctl -xe，发现是 systemd 在 umount 磁盘 在修改 /etc/fstab 后应该执行 systemctl daemon-reload 解决后，重新mount -a 解决 解决方案来自 https://unix.stackexchange.com/questions/169909/systemd-keeps-unmounting-a-removable-drive</description></item><item><title>使用Nginx代理k8s Cadvisor一例</title><link>https://travisbikkle.github.io/2019/09/nginx-k8s-cadvisor/</link><pubDate>Wed, 18 Sep 2019 11:24:20 +0800</pubDate><guid>https://travisbikkle.github.io/2019/09/nginx-k8s-cadvisor/</guid><description>k8s 自带 cadvisor 监控，UI 界面监听在 4194 端口，不过 HW 的 k8s 这里监听的地址是 127.0.0.1，因此相当于是一个摆设。使用开源的 nginx 可以代理该 url 并暴露在一个可以访问的网卡上，不过出于学习的目的，使用我们自己编译的类似于 nginx 的一个 NSP 来实现这个目的。
着手 包地址在内网，无法提供。运行此包有三个限制：
使用名称为 lb 的用户执行，否则会报错 getpwnam(&amp;ldquo;lb&amp;rdquo;)，因为他们编译写死了执行用户
LD_LIBRARY_PATH要加上包目录中的 lib, luajit/lib, lualib/ 三个目录
包最好放在 /usr/local，因为编译写死了这个路径…
配置 配置好在仍然兼容开源 nginx，关键配置如下：
upstream my_server { server 127.0.0.1:4194; keepalive 2000; } server { listen 4195; server_name 172.200.8.173; client_max_body_size 1024M; location / { proxy_pass http://127.0.0.1:4194; index index.html; } } 然后使用浏览器，访问 http://172.200.8.173:4195，即可出现 cadvisor 的页面。</description></item><item><title>一次ssh免密无法登录的问题</title><link>https://travisbikkle.github.io/2019/08/ssh-cant-login/</link><pubDate>Sat, 10 Aug 2019 11:24:17 +0800</pubDate><guid>https://travisbikkle.github.io/2019/08/ssh-cant-login/</guid><description>自研数据库升级的过程中，需要配置一次ssh免密登录，以便在其中一台机器，很方便的升级集群所有服务器。但是在测试过程中，创建免密登录的脚本失效了。
问题定位 通过手动创建公钥，拷贝到其它机器的authrized_keys，发现仍然需要输入密码登录；
通过ssh -v user@ip，查看详细信息，发现其提示： Authentication can continue: publickey, gssapi-key…..password try publickey .ssh/….. try publickey .ssh/….. using password:
而正常的服务器上，该行为： Servert accepted key…
看日志，怀疑ssh客户端没有找到正确的公钥文件，但是该文件确实存在在正确的路径，且拥有正确的600权限。
尝试使用其它端口，启动服务端的sshd，发现可以免密登录
尝试在客户端新建其它用户，并使用22默认端口，一样可以免密登录
执行以下命令，对比新建用户的目录，和问题用户的目录，发现问题
ls -laZ 在问题用户的目录中，.ssh目录的label为unlabel，而正常用户的.ssh，为user_t。通过查询及测试，发现该目录为user_t或者ssh_home_t的标签，都可以测试通过，但是为ublabeled不行。 那么该目录为什么为unlabel呢？毕竟我们执行的只是ssh-keygen，目录并非我们生成。 其实这个目录的标签，会继承父目录的标签，而父目录的标签，由于未知原因，丢失了。因此，selinux的机制不允许ssh使用该目录作为公钥目录。该问题可以通过以下两种方法解决：
restorecon -vv -r ~/.ssh
setenforce 0等关闭selinux</description></item><item><title>使用 Shell 脚本计算 Ip 网段</title><link>https://travisbikkle.github.io/2019/06/shell-calculate-ip/</link><pubDate>Mon, 10 Jun 2019 11:24:11 +0800</pubDate><guid>https://travisbikkle.github.io/2019/06/shell-calculate-ip/</guid><description>背景 当无法使用 ipcalc 时，可以考虑使用 shell 实现一个 ipcalc.sh。
ipcalc.sh.
#!/bin/bash net=&amp;quot;$1&amp;quot; ip=(${net%/*}) cdr=(${net##*/}) cdr2mask(){ #set -- $((5-(&amp;quot;$1&amp;quot;/8))) 255 255 255 255 $((2**8-2**(8-&amp;quot;$1&amp;quot;%8))) 0 0 0 set -- $(( 5-(&amp;quot;$1&amp;quot;/8) )) 255 255 255 255 $(( (255 &amp;lt;&amp;lt; (8-(&amp;quot;$1&amp;quot;%8))) &amp;amp; 255 )) 0 0 0 [[ $1 -gt 1 ]] &amp;amp;&amp;amp; shift $1 || shift #echo $#:$@ #255 255 255 255 253 0 0 0 shift #^_____________^ 255.255.255.255 shift # ^_____________^ 255.255.255.253 shift 2 # ^___________^ 255.</description></item><item><title>Mysql 性能测试报告惨不忍睹的一次原因</title><link>https://travisbikkle.github.io/2019/06/a-case-of-mysql-performance/</link><pubDate>Sat, 01 Jun 2019 11:24:20 +0800</pubDate><guid>https://travisbikkle.github.io/2019/06/a-case-of-mysql-performance/</guid><description>背景 新版本发布在即，新增与kafka，zk，redis等其它服务合设的场景，因此需要性能测试探个底。但是性能测试人员反馈，分设与合设性能差距数万倍。
问题 安装两套某版本的MySQL，分别是与redis等服务合设的一套（32U64G），MySQL单独安装的一套（8U16G）。
使用jmeter并且采用同样的测试模型，对服务进行长稳测试，其中合设的一套资源，其它服务也会跑长稳。
观察jmeter报告，发现合设的MySQL中，平均时间average为20s以上，throughput在10个/秒以下。而独立的MySQL，average为ms级别，throughput为数万个。
此时应该随报告提供环境cpu，磁盘，内存，网络带宽，测试模型等情况。但是由于某些原因，测试同学无法提供。
测试模型和环境 该测试模型很简单，1个int主键，20个varchar（256）字段共100w的数据。 使用select * from xxx where id in random(1, 100w); 进行1000并发测试。
因为某些原因，测试同学无法提供定位问题需要的帮助，因此，我们只收集了以下几种信息。
cpu及内存（top）
iostat -x 1 以及其它 /dev/mysqllv(mysql 数据挂载磁盘)
查看jmeter并发服务器的jmap histro
查看mysql show processlist，show status like &amp;ldquo;%Thread%&amp;ldquo;等
定位过程 cpu，内存等资源占用不高。
iostat 磁盘读写速度不高，但是%util占比居高不下
单独执行一条sql语句，偶尔很快，偶尔很慢
show processlist反馈，大量连接停留在freeing items的状态，说明连接在等候io操作，与上述iostat结论不谋而合
hdparm -Tt 合设机器只有60m/s的磁盘速度（未停服务，不准确）
查询审计日志，发现审计日志大量积压，5M/2分钟的速度在持续增加
走管理手段，要求测试人员提供独立 MySQL 机器信息，其反馈非其本人测试并且已卸载。我们强烈要求重新安装独立mysql
独立mysql表现也慢，与合设无异（说明测试没有控制好变量）
最终发现，其独立mysql测试版本为较老版本
结论 新版本mysql开启audit日志，并且安全部门参照公司《mysql 安全加固规范》中的必须修改项——审计日志的策略 audit_log_strategy 必须为 SYNCHRONOUS , 利用自动化工具扫描并发现我们的mysql没有开启此项，提了单。修改人员在修改时因为经验不足，未多想，便直接修改。
该项的另一个可选值为ASYNCHRONOUS，即异步。与主从复制的同步，半同步及异步类似，作用不言自明。改为该值后，问题消失。</description></item><item><title>Mysql Jdbc 报错 Operation Not Allowed After Statement Closed</title><link>https://travisbikkle.github.io/2019/06/mysql-jdbc-operation-not-allowed/</link><pubDate>Sat, 01 Jun 2019 11:24:19 +0800</pubDate><guid>https://travisbikkle.github.io/2019/06/mysql-jdbc-operation-not-allowed/</guid><description>背景 业务上来说，连你们的mysql连不上，连别人的（其它部门的mysql）都能连上。查看其日志，报了一行错误&amp;quot;No operations allowed after statement closed&amp;quot;。 这句话的意思，说的很清楚，不应该用关闭后的statement执行查询。但是因为我们是服务化的mysql，公司在遇到问题甩锅给其它部门的习惯由来已久，所以还是要帮业务解决。
大致代码 class Main { private static connection; private static statement; static { connection = getConnection(); statement = connection.createStatement(); } public static query(){ statement.executeUpdate(&amp;quot;xxxx&amp;quot;); statement.close(); } } 定位 首先，业务反馈的是“连接不上”，但是报错位置其实是在executeUpdate一行，在此鄙视这些人，日志都不看清楚就开始推脱责任。在其代码中加入debug日志
public static query(){ log(statement.isClosed()); statement.executeUpdate(&amp;quot;xxxx&amp;quot;); statement.close(); } 发现日志打了两次，第一次为false，第二次为true并报错。 查看该类引用位置，发现为一个定义了init-method的bean，类似于
&amp;lt;bean id=&amp;quot;xxxx&amp;quot; class=&amp;quot;xxxx&amp;quot; init-method=&amp;quot;query&amp;quot; /&amp;gt; 最终建议：
将bean的scope更改为singleton
重构Main类类似如下
class Main { private static connection; private static statement; private static void getConnection { DriverManager.xxxx statement = connection.</description></item><item><title>Mysql Order By 对同一值的 Varchar 列排序问题</title><link>https://travisbikkle.github.io/2019/05/mysql-order-by-varchar/</link><pubDate>Fri, 24 May 2019 11:24:03 +0800</pubDate><guid>https://travisbikkle.github.io/2019/05/mysql-order-by-varchar/</guid><description>背景 TODO
数据 DROP TABLE IF EXISTS `tbl_rn_log`; /*!40101 SET @saved_cs_client = @@character_set_client */; /*!40101 SET character_set_client = utf8 */; CREATE TABLE `tbl_rn_log` ( `SN` bigint(20) NOT NULL AUTO_INCREMENT, `STATUS` varchar(20) COLLATE utf8_bin NOT NULL, `SENDER` varchar(128) COLLATE utf8_bin DEFAULT NULL, `SENDTIME` bigint(20) NOT NULL, `SENDIP` varchar(128) COLLATE utf8_bin DEFAULT NULL, `OPERATIONUSER` varchar(128) COLLATE utf8_bin DEFAULT NULL, `ADDRESSES` varchar(1024) COLLATE utf8_bin NOT NULL, `BRIEFINFO` varchar(1024) COLLATE utf8_bin DEFAULT NULL, `TENANTID` varchar(50) COLLATE utf8_bin DEFAULT NULL, `PROJECT` varchar(32) COLLATE utf8_bin DEFAULT 'global', PRIMARY KEY (`SN`), KEY `TBL_RN_LOG_SENDTIME_INDEX` (`SENDTIME`) ) ENGINE=InnoDB AUTO_INCREMENT=53 DEFAULT CHARSET=utf8 COLLATE=utf8_bin; /*!</description></item><item><title>Mysql 主从复制异常恢复</title><link>https://travisbikkle.github.io/2019/04/recover-mysql-from-replication-error/</link><pubDate>Thu, 25 Apr 2019 11:24:16 +0800</pubDate><guid>https://travisbikkle.github.io/2019/04/recover-mysql-from-replication-error/</guid><description>检查版本 如果版本较老，基于binlog而不是gtid的版本， 数据量较小，可以参考 基于binlog的老版本。
基于binlog的老版本 1. 登录主机数据库， mysql --login-path=local 执行 mysql&amp;gt; stop slave; mysql&amp;gt; show master status; 记录以上master status的 log_file 和 log_pos 信息 mysql&amp;gt; exit; 2. 进入备份脚本目录（根据版本不同，可能在以下位置） cd /opt/backup/mysql/backup_script 或者 cd /opt/backup/mysql/backup_script 执行 ./backupandDelete.sh 3. 找到最新备份的文件，如 cd /opt/backup/mysql/backup_data/xxxxx 或者 cd /opt/backup/mysql/backup_data/xxxxx 找到备份文件 xxxxx.sql.gz 将其拷贝到另外一台机器 scp .. .. 4. 在另外一台机器，解压 gunzip -d xxxx.sql.gz 得到如 /root/xxxx.sql 的文件 5. 登录MySQL mysql --login-path=local 执行(注意替换路径，和ip，端口，密码等信息) mysql&amp;gt; set sql_log_bin=0; mysql&amp;gt; source /root/xxxx.sql mysql&amp;gt; select user,host from mysql.</description></item><item><title>Suse 安装 Nginx</title><link>https://travisbikkle.github.io/2019/04/suse12-nginx/</link><pubDate>Thu, 18 Apr 2019 11:24:22 +0800</pubDate><guid>https://travisbikkle.github.io/2019/04/suse12-nginx/</guid><description>http://nginx.org/packages/mainline/ http://nginx.org/packages/mainline/sles/12/x86_64/ http://nginx.org/packages/mainline/sles/12/x86_64/RPMS/nginx-1.15.12-1.sles12.ngx.x86_64.rpm
rpm -ivh nginx-1.15.12-1.sles12.ngx.x86_64.rpm
autoindex vi /etc/nginx/conf.d/default.conf
location / { root /var/www/html; index index.html index.htm; autoindex on; autoindex_exact_size off; autoindex_localtime on; } chmod -R 777 /var/www /usr/sbin/nginx -c /etc/nginx/nginx.conf</description></item><item><title>Susesp 编译 Apache ..</title><link>https://travisbikkle.github.io/2019/04/suse11sp1-compile-apache/</link><pubDate>Thu, 18 Apr 2019 11:24:11 +0800</pubDate><guid>https://travisbikkle.github.io/2019/04/suse11sp1-compile-apache/</guid><description>背景：suse 11 sp1 机器编译安装带有指定模块的 apache 2.4.34. 暂时没有bicp代码访问权限，先放这里 == 第一步 安装openssl
cd /data/bicpinstall/ tar zxvf openssl-1.1.0i.tar.gz cd openssl-1.1.0i export LDFLAGS=-ldl export LIBPATH=&amp;quot;/data/bicpinstall/ssl&amp;quot; export LIBS=&amp;quot;-L/data/bicpinstall/ssl&amp;quot; export SSL_LIBS=&amp;quot;-L/data/bicpinstall/ssl&amp;quot; export CPPFLAGS=&amp;quot;-I/data/bicpinstall/ssl/include/openssl&amp;quot; ./config --prefix=/data/bicpinstall/ssl shared make &amp;amp;&amp;amp; make install rm -rf /data/bicpinstall/ssl/ssl/man 第二步 生成证书 cd /data/bicpinstall/ssl/bin openssl genrsa -passout pass:cHpxHUm+v5teANoYurlMvA2+Gdg+ifm -des3 -out server.key 1024 openssl req -new -out server.csr -key server.key -passin pass:cHpxHUm+v5teANoYurlMvA2+Gdg+ifm -passout pass:cHpxHUm+v5teANoYurlMvA2+Gdg+ifm -subj /C=CN/O=huawei/CN=10.139.200.36 -config ../ssl/openssl.cnf openssl x509 -req -days 3650 -in server.</description></item><item><title>Mysql 原厂检查清单</title><link>https://travisbikkle.github.io/2019/04/mysql-check-list/</link><pubDate>Tue, 16 Apr 2019 11:24:03 +0800</pubDate><guid>https://travisbikkle.github.io/2019/04/mysql-check-list/</guid><description>1) MySQL配置文件 （my.cnf 或 my.ini）
2) MySQL完整的错误日志文件 （error log file）.（如果文件太大，可以压缩后上传）
3) MySQL的 slow query log 文件 （如果已经配置收集的话）.
4) 生成下面的mysql_output.txt文本文件（请在查询性能低、响应慢时运行）：
（请使用具有SUPER权限的MySQL用户（如root）登录MySQL命令行客户端并运行） TEE mysql_output0416.txt; select now(),@@version,@@version_comment,@@hostname,@@port,@@basedir,@@datadir,@@tmpdir,@@log_error, @@slow_query_log_file,user(),current_user(),/*!50600 @@server_uuid,*/@@server_id\G SHOW GLOBAL VARIABLES; SHOW GLOBAL STATUS; SHOW ENGINES\G SHOW PLUGINS\G select benchmark(50000000,(1234*5678/37485-1298+8596^2)); #should take less than 20 seconds SELECT ENGINE, COUNT(*), SUM(DATA_LENGTH), SUM(INDEX_LENGTH) FROM information_schema.TABLES GROUP BY ENGINE; SHOW ENGINE INNODB STATUS; /*!50503 SHOW ENGINE performance_schema STATUS */; /*!50503 SELECT * FROM performance_schema.setup_instruments WHERE name LIKE 'wait/sync%' AND (enabled='yes' OR timed='yes')*/; -- Info on transactions and locks SELECT r.</description></item><item><title>Mysql 问题与源码</title><link>https://travisbikkle.github.io/2019/04/mysql-problem-and-source-code/</link><pubDate>Sat, 13 Apr 2019 11:24:17 +0800</pubDate><guid>https://travisbikkle.github.io/2019/04/mysql-problem-and-source-code/</guid><description>问题1: 连接数为214， 登录经常报错 too many connections 在公司MySQL企业版服务化开发的初期，我们曾经遇到一个问题，即在连接MySQL的时候报错 too many connections, 即使是新安装的MySQL。在以前的社区版MySQL也曾经遇到过类似的问题，当时MySQL是用rpm安装并使用systemd启动的方式。 此次企业版的MySQL启动并未托管到systemd，因此解决办法不能照搬。
定位过程 为了能够登录，首先只能重启MySQL，执行
show variables like &amp;quot;max_conne%&amp;quot;; 发现连接数并非配置文件中定义的 2000，而是一个奇怪的数字 214；
执行 ulimit -a 或者 cat /proc/pidof mysqld/limits
发现 open files 为一个较低的默认值 1024；（代码中有改动该值的逻辑，但是最终并未生效，最终发现是公司系统镜 像/etc/security/limits.d/...的默认值有问题，此处不延伸） core file size (blocks, -c) 0 data seg size (kbytes, -d) unlimited scheduling priority (-e) 0 file size (blocks, -f) unlimited pending signals (-i) 23883 max locked memory (kbytes, -l) 64 max memory size (kbytes, -m) unlimited open files (-n) 1024 pipe size (512 bytes, -p) 8 POSIX message queues (bytes, -q) 819200 real-time priority (-r) 0 stack size (kbytes, -s) 8192 cpu time (seconds, -t) unlimited max user processes (-u) 23883 virtual memory (kbytes, -v) unlimited file locks (-x) unlimited</description></item><item><title>让 Git 在 Windows 上使用 Lf 换行符</title><link>https://travisbikkle.github.io/2019/03/git-windows-lf/</link><pubDate>Fri, 22 Mar 2019 11:24:10 +0800</pubDate><guid>https://travisbikkle.github.io/2019/03/git-windows-lf/</guid><description>1git config --global core.eol lf 2git config --global core.autocrlf input For repos that were checked out after those global settings were set, everything will be checked out as whatever it is in the repo — hopefully LF (\n). Any CRLF will be converted to just LF on checkin.
With an existing repo that you have already checked out — that has the correct line endings in the repo but not your working copy — you can run the following commands to fix it:</description></item><item><title>Centos Docker 入门</title><link>https://travisbikkle.github.io/2019/02/centos7-docker-getstart/</link><pubDate>Sun, 17 Feb 2019 11:24:08 +0800</pubDate><guid>https://travisbikkle.github.io/2019/02/centos7-docker-getstart/</guid><description>快速上手 install(offline).
# 在有网络的机器上，执行以下命令，获取安装所需的包 $ yum install --downloadonly --downloaddir=/opt/utils yum-utils device-mapper-persistent-data lvm2 $ yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo $ yum install --downloadonly --downloaddir=/opt/all_packages docker-ce docker-ce-cli containerd.io root@192.168.31.201:/opt/all_packages #0$ l audit-libs-python-2.8.4-4.el7.x86_64.rpm libcgroup-0.41-20.el7.x86_64.rpm checkpolicy-2.5-8.el7.x86_64.rpm libsemanage-python-2.5-14.el7.x86_64.rpm containerd.io-1.2.2-3.3.el7.x86_64.rpm policycoreutils-2.5-29.el7_6.1.x86_64.rpm container-selinux-2.74-1.el7.noarch.rpm policycoreutils-python-2.5-29.el7_6.1.x86_64.rpm docker-ce-18.09.2-3.el7.x86_64.rpm python-IPy-0.75-6.el7.noarch.rpm docker-ce-cli-18.09.2-3.el7.x86_64.rpm setools-libs-3.3.8-4.el7.x86_64.rpm root@192.168.31.201:/opt/all_packages #0$ l ../utils/ device-mapper-1.02.149-10.el7_6.3.x86_64.rpm lvm2-2.02.180-10.el7_6.3.x86_64.rpm device-mapper-event-1.02.149-10.el7_6.3.x86_64.rpm lvm2-libs-2.02.180-10.el7_6.3.x86_64.rpm device-mapper-event-libs-1.02.149-10.el7_6.3.x86_64.rpm python-chardet-2.2.1-1.el7_1.noarch.rpm device-mapper-libs-1.02.149-10.el7_6.3.x86_64.rpm python-kitchen-1.1.1-5.el7.noarch.rpm libxml2-python-2.9.1-6.el7_2.3.x86_64.rpm yum-utils-1.1.31-50.el7.noarch.rpm # 在离线机器上， 执行以下命令以安装 $ yum localinstall /opt/utils/*.rpm $ yum localinstall /opt/all_packages/*.rpm install docker-compose.
$ curl -L &amp;quot;https://github.com/docker/compose/releases/download/1.23.2/docker-compose-$(uname -s)-$(uname -m)&amp;quot; \ -o /usr/local/bin/docker-compose chmod +x /usr/local/bin/docker-compose $ docker-compose --version install docker-machine.</description></item><item><title>Mysqldump 使用案例</title><link>https://travisbikkle.github.io/2019/02/a-case-of-mysqldump/</link><pubDate>Sun, 10 Feb 2019 11:24:21 +0800</pubDate><guid>https://travisbikkle.github.io/2019/02/a-case-of-mysqldump/</guid><description>背景 客户N在使用H部门提供的MySQL遇到部分性能问题后，未得到H部门的及时支撑。机缘巧合，我们的服务化MySQL刚刚发布第一版，客户N有意切换我们的MySQL。由于部门策略调整，我们准备由原来的社区MySQL切换为部门R的商业版MySQL，其间对接问题不提，客户提出的首要问题是前期尝试通过mysqldump备份数据，发现有报错并且很慢，我们的策略是 为拓展业务先把锅接下来吧 答应先提供数据迁移方案供客户评估。
机器、数据、应用情况 源机器cpu核心数16，内存32G；
两台机器，一个是master，一个是slave；未配置互为主备；
开启了基于GTID的主从复制；
从镜像库来看，数据量3800W左右，实际生产环境每天还会增加约不到100w；
0-1w
1w-10w
10w-50w
50w-100w
100w-1000w
&amp;gt;1000w
表数量约
2105
83
28
5
6
1
MySQL为社区版5.7.23，所有表均为INNODB引擎；
据客户N的业务人员反馈，他们尝试使用mysqldump可能会报错。
一些准备工作 为了能够顺滑的开展后期工作，我习惯先整理一些常用的命令，以备随时复制粘贴…
-- 查询所有业务数据库的表名，数据库，存储引擎信息 select table_name,table_schema,engine from information_schema.tables where engine='innodb' and table_schema not in('mysql','information_schema','performance_schema','sys'); -- 查询所有业务数据库的表的数量 select count(*) from information_schema.tables where engine='innodb' and table_schema not in('mysql','information_schema','performance_schema','sys'); -- 查询所有表的数据量 SELECT CONCAT(TABLE_SCHEMA,'.',TABLE_NAME) AS table_name, IFNULL(TABLE_ROWS,0) as table_rows FROM information_schema.tables WHERE TABLE_SCHEMA NOT IN ('mysql','information_schema','performance_schema','sys') ORDER BY 2; -- 查询所有业务数据库的视图数量 select table_name,table_schema from information_schema.</description></item><item><title>Suse 新增磁盘</title><link>https://travisbikkle.github.io/2019/02/suse-add-a-disk/</link><pubDate>Sun, 10 Feb 2019 11:24:14 +0800</pubDate><guid>https://travisbikkle.github.io/2019/02/suse-add-a-disk/</guid><description>fdisk -l DISK=vdb disk_list=(`cat /proc/partitions | sort | grep -v &amp;quot;name&amp;quot; |grep -v &amp;quot;loop&amp;quot; |awk '{print $4}'| sed /^[[:space:]]*$/d | grep -v &amp;quot;[[:digit:]]&amp;quot; | uniq`) parted -s /dev/${DISK} mklabel gpt parted -s /dev/${DISK} print |grep softhome |wc -l DISKSIZE=`parted -s /dev/${DISK} unit GB print | grep '^Disk' |grep GB | awk '{print $3}'` DISK1=`echo ${DISK}1` # parted -s /dev/${DISK} mkpart softhome 0G $DISKSIZE parted -s /dev/${DISK} set 1 lvm vgname=`echo &amp;quot;/opt&amp;quot; | awk -F'/' '{print $NF}'` vgname=&amp;quot;${vgname}vg&amp;quot; # optvg lvname=`echo &amp;quot;/opt&amp;quot; | awk -F'/' '{print $NF}'` lvname=&amp;quot;${lvname}lv&amp;quot; # optlv echo y | pvcreate /dev/${DISK1} vgcreate &amp;quot;$vgname&amp;quot; /dev/${DISK1} free=`vgdisplay &amp;quot;$vgname&amp;quot; |grep &amp;quot;Total PE&amp;quot; |awk '{print $3}'` echo y | lvcreate -l &amp;quot;$free&amp;quot; -n &amp;quot;$lvname&amp;quot; &amp;quot;$vgname&amp;quot; lvPath=`lvdisplay &amp;quot;$vgname&amp;quot; | grep &amp;quot;LV Path&amp;quot; | awk '{print $3}'` #格式化 mkfs.</description></item><item><title>Mysql . 主从同步</title><link>https://travisbikkle.github.io/2019/02/mysql5replication/</link><pubDate>Sun, 10 Feb 2019 11:24:12 +0800</pubDate><guid>https://travisbikkle.github.io/2019/02/mysql5replication/</guid><description>大纲 本文参考或翻译自： https://dev.mysql.com/doc/refman/5.7/en/replication.html
MySQL 5.7 支持多种主从复制的方法
传统方法：依赖binlog文件和文件的position保持同步 （https://dev.mysql.com/doc/refman/5.7/en/replication-configuration.html）
新方法： 依赖全局事务id即global transaction identifer（GTIDs） （https://dev.mysql.com/doc/refman/5.7/en/replication-gtids.html）
replication 支持不同类型的同步
异步复制（asynchronous，默认）
同步复制（只有 NDB 集群才有的一种特性）
半同步复制（semisynchronous，是对异步复制的一种补充）
With semisynchronous replication, a commit performed on the master blocks before returning to the session that performed the transaction until at least one slave acknowledges that it has received and logged the events for the transaction; see Semisynchronous Replication(https://dev.mysql.com/doc/refman/5.7/en/replication-semisync.html). MySQL 5.7 also supports delayed replication such that a slave server deliberately lags behind the master by at least a specified amount of time; see Section 16.</description></item><item><title>一次 Mysql 死锁问题解决</title><link>https://travisbikkle.github.io/2019/02/mysql-dead-lock-troubleshoot-case/</link><pubDate>Sun, 10 Feb 2019 11:24:09 +0800</pubDate><guid>https://travisbikkle.github.io/2019/02/mysql-dead-lock-troubleshoot-case/</guid><description>一个业务反应，环境多次出现大量服务不可使用，如app导入不响应，用户更新超时，bpm创单超时等等。查看数据库的processlist，发现有大量的处于Waiting for table metadata lock状态的查询，其中包含T_APP_INFO、TBL_UM_USER、T_TICKET_BASICINFO等表，跟故障服务一致，确定故障原因是数据库锁表引起； 业务自行导出所有的阻塞task，并按照阻塞时间排序，发现第一条引起阻塞的是一条来来自于localhost的 由root用户发起的批量锁表语句，疑似是问题根因。
上面这段是业务说的，已经排查的比较深入了，给个赞。
我之前通过直接kill掉这个query线程，他们的业务就正常走下去了，因为忙其他事情，所以就没有再关注。后面他们又出现了这个问题，这次必须要解决了。所以记录一下定位过程。
定位思路 [WHAT] root@localhost 的进程在做什么？
MySQL 所有“卡住”问题，先看进程列表：.
show processlist; +---------+------+-----------+------+---------+------+----------+------------------+ | Id | User | Host | db | Command | Time | State | Info | +---------+------+-----------+------+---------+------+----------+------------------+ | 3467133 | root | localhost | NULL | Query | 320400 | Waiting for table metadata lock | LOCK TABLES `....| +---------+------+-----------+------+---------+------+----------+------------------+ 看到 root@localhost 的用户，有一条状态为 Waiting for table metadata lock 的查询。查询语句为“LOCK TABLES……”。
猜测：是后台备份进程在锁表，由于也有可能业务自己登陆后台锁表，所以需要证明这个确实是备份工具发起的语句。</description></item><item><title>Vmware Centos 双网卡平面设置</title><link>https://travisbikkle.github.io/2019/02/vmware-centos7-interfaces/</link><pubDate>Sun, 10 Feb 2019 11:24:05 +0800</pubDate><guid>https://travisbikkle.github.io/2019/02/vmware-centos7-interfaces/</guid><description>[root@host1 ~]# ip a 1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2: ens33: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000 link/ether 00:0c:29:7d:ba:48 brd ff:ff:ff:ff:ff:ff inet 192.168.17.101/24 brd 192.168.17.255 scope global noprefixroute ens33 valid_lft forever preferred_lft forever inet6 fe80::64ee:1323:6aaa:61da/64 scope link noprefixroute valid_lft forever preferred_lft forever 3: ens37: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000 link/ether 00:0c:29:7d:ba:52 brd ff:ff:ff:ff:ff:ff inet 192.</description></item><item><title>Mysql 查询锁状态常用命令</title><link>https://travisbikkle.github.io/2019/02/mysql-lock-status-commands/</link><pubDate>Sun, 10 Feb 2019 11:24:04 +0800</pubDate><guid>https://travisbikkle.github.io/2019/02/mysql-lock-status-commands/</guid><description>show status like '%lock%; select * from information_schema.processlist; select * from information_schema.processlist where state like &amp;quot;%Waiting%&amp;quot;; select * from information_schema.innodb_trx; SELECT * FROM INFORMATION_SCHEMA.INNODB_LOCK_WAITS; SELECT INNODB_LOCKS.* FROM INNODB_LOCKS JOIN INNODB_LOCK_WAITS ON (INNODB_LOCKS.LOCK_TRX_ID = INNODB_LOCK_WAITS.BLOCKING_TRX_ID); SELECT * FROM INNODB_LOCKS WHERE LOCK_TABLE = db_name.table_name; SELECT TRX_ID, TRX_REQUESTED_LOCK_ID, TRX_MYSQL_THREAD_ID, TRX_QUERY FROM INNODB_TRX WHERE TRX_STATE = 'LOCK WAIT'; show engine innodb status;</description></item><item><title>Mysql 远程无法连接问题定位记录</title><link>https://travisbikkle.github.io/2019/02/mysql-remote-connect-failed/</link><pubDate>Fri, 01 Feb 2019 11:24:09 +0800</pubDate><guid>https://travisbikkle.github.io/2019/02/mysql-remote-connect-failed/</guid><description>某业务通过Hibernate访问mysql，后台报错 Access denied for user matexxx@xxxx (using password: YES); 一般搞过开发的人都知道，这种问题不是密码错了，就是远程连接未打开，这两者其实都属于一个问题，就是用户的grant权限问题，但是此业务情况稍特殊。定位过程如下。
查看用户 SELECT USER,HOST FROM MYSQL.USER; 发现用户matexxx对应的host为 %，说明远程连接已经打开；询问业务是否更改过密码，引出问题背景： 业务曾重装过mysql，使用mysqldump将旧库数据备份，并且只在新库的master上执行了一次恢复操作。
查看主从复制的状态 SHOW SLAVE STATUS\G 发现互为主备的mysql机器，其中一台的slave io状态为connecting，Last_IO_Error 显示复制用户 replicator 禁止登录。既然复制用户和业务用户都无法登录，怀疑点聚焦在用户的grant语句方面，原因可能是其备份恢复过程中出现错误操作，其要求紧急恢复，原因就暂不深挖。
【解决】 主从复制的问题要先解决。错误产生的原因很可能是其使用mysqldump &amp;ndash;all-databases备份，然后在配置好主从的机器上直接恢复，导致两边的机器replicator主从复制用户的ip并不正确（实际应该配置对方ip）。恢复方法：
请将下面语句中的变量替换为实际的值.
GRANT REPLICATION SLAVE ON *.* TO '${repl_user_name}'@'${IP}' IDENTIFIED BY '${repl_user_pwd}'; FLUSH PRIVILEGES; SHOW MASTER LOGS; --在master(互为主备的机器，master就是你要复制的机器，请自行理解)上执行 -- 记录上面执行语句的结果，例如 -- Log_name：mysql-bin.000002 -- File_size：483 STOP SLAVE; --在出错的机器上，执行 CHANGE MASTER TO MASTER_HOST='${master_ip}',MASTER_PORT='3306',MASTER_LOG_FILE='mysql-bin.000002',MASTER_LOG_POS=483; START SLAVE; 回到主要问题 重启业务应用（反正已经坏了）发现仍然无法登录，查看进程列表，发现大量连接状态都为 Waiting in connection_control plugin，而且在另一台机器C上面使用matexxx登录一直卡住，而使用root却没有问题，证明此用户登录失败，被拒绝后触发了 connection_control 的机制。</description></item><item><title>使用 Systemd 托管的 Mysql 最大连接数问题</title><link>https://travisbikkle.github.io/2019/01/systemd-mysql-maxconnections/</link><pubDate>Sun, 20 Jan 2019 11:24:15 +0800</pubDate><guid>https://travisbikkle.github.io/2019/01/systemd-mysql-maxconnections/</guid><description>最大连接数问题
背景： mysql 最大连接数在设置为2000的情况下，并发始终只能达到480多； 其它遇到过类似情况的项目组更改ulimit -s（stack size）到1024可以解决问题，但是我们经过测试无效； 据说前期定位人员咨询过mysql原厂的人，没发现有什么配置问题。
测试工具 mysqlslap -h127.0.0.1 -uroot -p123456789 &amp;ndash;concurrency=5000 &amp;ndash;iterations=1 &amp;ndash;auto-generate-sql &amp;ndash;auto-generate-sql-load-type=mixed &amp;ndash;auto-generate-sql-add-autoincrement &amp;ndash;engine=innodb &amp;ndash;number-of-queries=1000000
show status like &amp;ldquo;%Thread%&amp;rdquo;&amp;quot;;
排查过程 ulimit cat /proc/pidof mysqld/limits /etc/systemd/system.conf /etc/systemd/user.conf systemctl edit mysql.service /usr/lib/systemd/system/mysql.service
直接使用mysqld启动，不用service，发现正常。最终在参照不使用service启动的mysql pid limits更改mysql.service所有ulimit到最大值也没用。 systemctl show mysql.service 发现TasksMax字段值为512，与480比较相近。
文档： https://www.freedesktop.org/software/systemd/man/systemd.resource-control.html
尝试在/usr/lib/systemd/system/mysql.service加入以下配置
TasksMax=infinity 问题解决。
后续/深入 The mappings of systemd limits to ulimit Directive ulimit equivalent Unit LimitCPU= ulimit -t Seconds LimitFSIZE= ulimit -f Bytes LimitDATA= ulimit -d Bytes LimitSTACK= ulimit -s Bytes LimitCORE= ulimit -c Bytes LimitRSS= ulimit -m Bytes LimitNOFILE= ulimit -n Number of File Descriptors LimitAS= ulimit -v Bytes LimitNPROC= ulimit -u Number of Processes LimitMEMLOCK= ulimit -l Bytes LimitLOCKS= ulimit -x Number of Locks LimitSIGPENDING= ulimit -i Number of Queued Signals LimitMSGQUEUE= ulimit -q Bytes LimitNICE= ulimit -e Nice Level LimitRTPRIO= ulimit -r Realtime Priority LimitRTTIME= No equivalent</description></item><item><title>Tcpdump 常用命令</title><link>https://travisbikkle.github.io/2019/01/tcpdump-common-commands/</link><pubDate>Sat, 12 Jan 2019 11:24:18 +0800</pubDate><guid>https://travisbikkle.github.io/2019/01/tcpdump-common-commands/</guid><description>man tcpdump
https://en.wikipedia.org/wiki/Multicast_address
https://en.wikipedia.org/wiki/Subnetwork
[ip address classes] (http://www.vlsm-calc.net/ipclasses.php)
http://vod.sjtu.edu.cn/help/Article_Print.asp?ArticleID=631
tcpdump usage ``` tcpdump # print number like ip and port tcpdump -n tcpdump -c 4 tcpdump -i eth1 tcpdump -i any tcpdump host 100.107.166.116 tcpdump src host 100.107.166.116 tcpdump -n -i any dst port 3306 or dst port 22 tcpdump -n -i any dst port 3306 || dst port 22 tcpdump -n -i any (dst port 3306 || dst port 22) and dst host 100.</description></item><item><title>Mysql Load Data 数据膨胀</title><link>https://travisbikkle.github.io/2018/12/mysql-load-data-size-too-big/</link><pubDate>Sat, 29 Dec 2018 11:24:14 +0800</pubDate><guid>https://travisbikkle.github.io/2018/12/mysql-load-data-size-too-big/</guid><description>发现问题 100w 100字段数据 后台膨胀系数较大。 用膨胀系数表示load data后MySQL后台 表名.ibd 文件的大小与所 load 的 data.xdr 文件的比值。 膨胀系数(50f100w)代表使用了50个字段100w行的数据进行测试。
分解问题 是否是数据量较大，导致膨胀系数较大？ 构造 10f10w 和 10f100w 进行对比，排除单纯因数据量导致膨胀的推测。
数据模型（字段数）
数据模型（行数）
数据文件大小（MB）
load 时长(s)
表文件大小(MB)
单次导入增加
字段类型
10
10w
58.9
3.02
76
76
"3 int,
3 double(20,2),
4 VARCHAR(256)
"
10
100w
592
33.96
688
688
"3 int,
3 double(20,2),
4 VARCHAR(256)
"
是否是因字段数不同，导致膨胀系数较大？ 数据模型 create table loadtest10f( record_001 VARCHAR(256), record_002 VARCHAR(256), record_003 VARCHAR(256), record_004 VARCHAR(256), record_005 VARCHAR(256), record_006 VARCHAR(256), record_007 VARCHAR(256), record_008 VARCHAR(256), record_009 VARCHAR(256), record_010 VARCHAR(256), .</description></item><item><title>在 Asciidoc 文档中使用 Latex</title><link>https://travisbikkle.github.io/2018/11/asciidoc-latex/</link><pubDate>Tue, 06 Nov 2018 11:24:19 +0800</pubDate><guid>https://travisbikkle.github.io/2018/11/asciidoc-latex/</guid><description>本文基于 asciidoctor 1.5.7.13，其通过 mathjax 实现 LaTex 字体的显示，方法和 markdown 差不多，区别是 markdown（不同差距实现方法不同）使用 $$ 或者 $``$ 包围 LaTex 语法，而 asciidoctor 使用 stem:[] 包围 LaTex 语法。
单个符号对照表 渲染后
源码
stem:[\cdot]
stem:[\cdot]
stem:[\times]
stem:[\times]
stem:[a^{prime} a]
stem:[a^{prime} a]
stem:[a’’]
stem:[a’’]
stem:[a’’’]
stem:[a’’’]
stem:[\pm]
stem:[\pm]
stem:[\mp]
stem:[\mp]
stem:[!]
stem:[!]
stem:[\dots]
stem:[\dots]
stem:[\ldots]
stem:[\ldots]
stem:[\cdots]
stem:[\cdots]
stem:[\vdots]
stem:[\vdots]
stem:[\ddots]
stem:[\ddots]
行列式 渲染后
源码
15\\ 7 \end{array}right) \vec{a} = \left[\begin{array}{rrrr} 15\\ 7 \end{array}\right) [latexmath] ++++ \begin{cases} \ u_{tt}(x,t)= b(t)\triangle u(x,t-4)&amp;amp;\\ \ \hspace{42pt}- q(x,t)f[u(x,t-3)]+te^{-t}\sin^2 x, &amp;amp; t \neq t_k; \\ \ u(x,t_k^+) - u(x,t_k^-) = c_k u(x,t_k), &amp;amp; k=1,2,3\ldots ;\\ \ u_{t}(x,t_k^+) - u_{t}(x,t_k^-) =c_k u_{t}(x,t_k), &amp;amp; k=1,2,3\ldots\ .</description></item><item><title>Btrace 使用教程</title><link>https://travisbikkle.github.io/2018/10/btrace-manual/</link><pubDate>Fri, 19 Oct 2018 11:24:06 +0800</pubDate><guid>https://travisbikkle.github.io/2018/10/btrace-manual/</guid><description>BTrace 是 Java 的一个诊断工具，可以在不重启应用的情况下，对应用进行时间耗费、参数及结果跟踪、方法调用跟踪等分析。
BTrace 术语 Probe Point
位置
Trace Actions or Actions
追踪语句
Action Methods
追踪语句所在的静态方法
BTrace 程序结构 一个 BTrace 程序 是一个 Java 类，包含数个由 BTrace 注解 注释的 public static void 方法。这些注解被用来指定被追踪程序的 Probe Point. Tracing Actions 在这些静态方法内定义。这些静态方法也即上文提到的 Action Methods。
BTrace 的限制 不能 创建对象，数组。
不能 抛出、捕获异常。
不能 调用任意实例或静态方法，只能调用 BTraceUtils 中的方法。
不能 修改目标程序的静态或实例变量，不过 BTrace 程序自己不做限制。
不能 有实例变量或方法，方法不能有返回值类型，BTrace 程序的所有方法必须是 public static 1. oid 的，所有的字段都必须是 static 的。
不能 有 outer, inner, nested 或 local 类。</description></item><item><title>常用包管理软件代理或国内镜像设置</title><link>https://travisbikkle.github.io/2018/10/common-pakage-manager-proxy/</link><pubDate>Sat, 13 Oct 2018 11:24:31 +0800</pubDate><guid>https://travisbikkle.github.io/2018/10/common-pakage-manager-proxy/</guid><description>中国加速镜像 npm可能未及时同步 pip可能未同步官方已经删除的恶意软件包 manager useful commands command pnpm pnpm get registry pnpm config set registry https://registry.npmmirror.com npm npm get registry npm config set registry https://registry.npmmirror.com yarn yarn config get registry yarn config set registry https://registry.npmmirror.com pip pip config list # for pip install
pip config set global.index-url https://mirrors.aliyun.com/pypi/simple/
# for pip search
pip config set global.index https://mirrors.aliyun.com/pypi
pip config set global.trusted-host mirrors.aliyun.com 代理 npm(~/.npmrc)
1proxy=http://localhost:8118 2https_proxy=https://localhost:8118 3strict-ssl=false yarn(~/.yarnrc)
1env: 2 proxy &amp;#39;http://localhost:8118&amp;#39; 3 https_proxy &amp;#39;https://localhost:8118&amp;#39; 4 strict-ssl false</description></item><item><title>Centos 常用命令</title><link>https://travisbikkle.github.io/2018/10/centos7-common-commands/</link><pubDate>Sat, 13 Oct 2018 11:24:18 +0800</pubDate><guid>https://travisbikkle.github.io/2018/10/centos7-common-commands/</guid><description>如何更改为静态 IP 地址 vi /etc/sysconfig/network-scripts/ifcfg-&amp;lt;你的网卡名，如果不知道，直接 tab 自动补全&amp;gt;
## 更改并添加以下数行 # BOOTPROTO=dfcp BOOTPROTO=static # ONBOOT=no ONBOOT=yes IPADDR=192.168.47.190 # IP 地址，先在虚拟机或路由里查看你的 IP 网段，然后在设置为你想要的值 GATEWAY=192.168.47.2 # 网关信息，同上 NETMASK=255.255.255.0 # 子网掩码信息，同上 DNS1=8.8.8.8 # DNS 信息，同上 service network restart 重启网络服务
如何更改主机名 hostnamectl set-hostname &amp;lt;你想要的主机名&amp;gt;
如何关闭防火墙和SELinux systemctl disable firewalld.service systemctl stop firewalld.service # 编辑以下文件 vi /etc/sysconfig/selinux SELINUX=disabled # 编辑完成后，执行 setenforce 0 # 重启后执行 getenforce 变成 disabled 说明更改永久生效 如何设置 NTP 时间同步 yum install -y ntp systemctl enable ntpd</description></item><item><title>Hadoop .. 学习笔记</title><link>https://travisbikkle.github.io/2018/10/hadoop-learning-note/</link><pubDate>Sat, 13 Oct 2018 11:24:16 +0800</pubDate><guid>https://travisbikkle.github.io/2018/10/hadoop-learning-note/</guid><description>HDFS读写流程 todo
HDFS文件权限 todo
安全模式 todo
注意事项 todo
JDK 版本应该使用 1.8，JDK 10 遇到启动过程中 warning 并且 datanode 无法启动的问题。
集群安装 最小配置文件（hadoop 2.9.1） core-site.xml.
&amp;lt;configuration&amp;gt; &amp;lt;property&amp;gt; &amp;lt;name&amp;gt;fs.defaultFS&amp;lt;/name&amp;gt; &amp;lt;value&amp;gt;hdfs://linux-1:8020/&amp;lt;/value&amp;gt; &amp;lt;description&amp;gt;NameNode URI&amp;lt;/description&amp;gt; &amp;lt;/property&amp;gt; &amp;lt;property&amp;gt; &amp;lt;name&amp;gt;io.file.buffer.size&amp;lt;/name&amp;gt; &amp;lt;value&amp;gt;131072&amp;lt;/value&amp;gt; &amp;lt;description&amp;gt;Buffer size&amp;lt;/description&amp;gt; &amp;lt;/property&amp;gt; &amp;lt;/configuration&amp;gt; hdfs-site.xml.
&amp;lt;configuration&amp;gt; &amp;lt;property&amp;gt; &amp;lt;name&amp;gt;dfs.secondary.http.address&amp;lt;/name&amp;gt; &amp;lt;value&amp;gt;linux-2:50090&amp;lt;/value&amp;gt; &amp;lt;/property&amp;gt; &amp;lt;property&amp;gt; &amp;lt;name&amp;gt;dfs.http.address&amp;lt;/name&amp;gt; &amp;lt;value&amp;gt;linux-1:50070&amp;lt;/value&amp;gt; &amp;lt;/property&amp;gt; &amp;lt;property&amp;gt; &amp;lt;name&amp;gt;dfs.namenode.name.dir&amp;lt;/name&amp;gt; &amp;lt;value&amp;gt;file:///opt/hdfs/namenode&amp;lt;/value&amp;gt; &amp;lt;description&amp;gt;NameNode directory for namespace and transaction logs storage.&amp;lt;/description&amp;gt; &amp;lt;/property&amp;gt; &amp;lt;property&amp;gt; &amp;lt;name&amp;gt;dfs.namenode.edits.dir&amp;lt;/name&amp;gt; &amp;lt;value&amp;gt;file:///opt/hdfs/namenode&amp;lt;/value&amp;gt; &amp;lt;description&amp;gt;DFS name node should store the transaction (edits) file.&amp;lt;/description&amp;gt; &amp;lt;/property&amp;gt; &amp;lt;property&amp;gt; &amp;lt;name&amp;gt;dfs.</description></item><item><title>Hive .. 安装常见问题</title><link>https://travisbikkle.github.io/2018/10/hive-install-faq/</link><pubDate>Sat, 13 Oct 2018 11:24:13 +0800</pubDate><guid>https://travisbikkle.github.io/2018/10/hive-install-faq/</guid><description>remote 模式最小配置 &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; standalone=&amp;quot;no&amp;quot;?&amp;gt; &amp;lt;?xml-stylesheet type=&amp;quot;text/xsl&amp;quot; href=&amp;quot;configuration.xsl&amp;quot;?&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;property&amp;gt; &amp;lt;name&amp;gt;javax.jdo.option.ConnectionURL&amp;lt;/name&amp;gt; &amp;lt;value&amp;gt;jdbc:mysql://192.168.47.128:3306/hive?createDatabaseIfNotExist=true&amp;lt;/value&amp;gt; &amp;lt;/property&amp;gt; &amp;lt;property&amp;gt; &amp;lt;name&amp;gt;javax.jdo.option.ConnectionDriverName&amp;lt;/name&amp;gt; &amp;lt;value&amp;gt;com.mysql.jdbc.Driver&amp;lt;/value&amp;gt; &amp;lt;/property&amp;gt; &amp;lt;property&amp;gt; &amp;lt;name&amp;gt;javax.jdo.option.ConnectionUserName&amp;lt;/name&amp;gt; &amp;lt;value&amp;gt;root&amp;lt;/value&amp;gt; &amp;lt;/property&amp;gt; &amp;lt;property&amp;gt; &amp;lt;name&amp;gt;javax.jdo.option.ConnectionPassword&amp;lt;/name&amp;gt; &amp;lt;value&amp;gt;km717070&amp;lt;/value&amp;gt; &amp;lt;/property&amp;gt; &amp;lt;/configuration&amp;gt; 安装问题 remote 模式报错 Java.lang.RuntimeException: Unable to instantiate org.apache.hadoop.hive.ql.metadata.SessionHiveMetaStoreClient 解决：hive 需要先 hive --service metastore 先启动 thrift server，才能访问 MySQL 参考：官方手册：Hive Metastore 配置 理解：MySQL 为 metastore 的 database， Thrift Server 为 metastore 的服务器
hive &amp;ndash;service metastore 启动报错 Unable to open a test connection to the given database 解决：MySQL 的配置有问题</description></item><item><title>Centos 安装 Apache Ambari</title><link>https://travisbikkle.github.io/2018/10/centos7-ambari/</link><pubDate>Sat, 13 Oct 2018 11:24:12 +0800</pubDate><guid>https://travisbikkle.github.io/2018/10/centos7-ambari/</guid><description>版本说明 部件
版本号
Ambari
2.6.2.2
CentOS
7
HDP
2.6
时间
20180814
背景 对于 Ambari 能做什么，对于搜索到此文的同学来说应该毋庸赘述。目前 Ambari 安装的官方手册主要是 Apache 和 Hortonworks，我首先是参考 Apache 的说明，通过 maven 编译源码的方式，在 安装 linux-mint 的机器上尝试安装 Ambari 2.7.0，遇到过以下问题：
由于系统不符合 Ambari 的要求，因此通过更改其中的 ambari-commons/OSCheck.py:is_ubuntu_family() 函数强制安装 server 和 agent.
由于采用的国内 maven 仓库，ambari web legacy 始终编译不过，通过更改其依赖编译通过.
maven compiler plugin 报错 json-simple 的相关依赖问题，最后删除该 legacy 模块.
其它 node, yarn, npm 的代理设置问题. 最终在安装 agent 的时候遇到 ssl 连接错误，时间已晚，选择放弃这种安装方式。转而使用文档支持较好的 CentOS 和 yum 仓库安装的方式。虽然如此，Hortonworks 的文档逻辑也稍显混乱，过于简单，本文对安装过程做详细记录，以备查询。本文所有操作均使用 root 用户完成。
准备 我使用的是 VMware WorkStation，CentOS 7 下载路径为 点我，安装步骤略过，建议安装 4 台机器(网络方式选择NAT模式)，其中安装 Ambari 服务器的机器硬盘大小不得小于 30 GB，如果不小心硬盘大小分配过小，参见另一篇博文link:/2018/10/13/如何对 centos 7 分区进行扩容/[如何对 centos 7 分区进行扩容]。其余 3 台机器作为集群机器以备后续使用。</description></item><item><title>如何对 Centos 分区进行扩容</title><link>https://travisbikkle.github.io/2018/10/centos-disk-extend/</link><pubDate>Sat, 13 Oct 2018 11:24:10 +0800</pubDate><guid>https://travisbikkle.github.io/2018/10/centos-disk-extend/</guid><description>fdisk -l 在 Id 一列可以看到分区类型为``8e`` ``83``等十进制数值，``8e``代表该分区由 Linux LVM 管理，适用本文的扩容方法，如果你的分区类型为``83``，代表其是 Linux Native Partion，可以参考link:[另一篇博文（尚未书写）]。
我使用的是 VMware Workstation pro，在编辑虚拟机设置里可以轻松增加磁盘大小（磁盘为单个文件，而不是分割文件，如果你的硬盘是分割的多个文件，参考另一篇博文 VMware 分割磁盘如何扩容(尚未编写)
fdisk -l ## 在 fdisk 输出信息中，可以看到 Disk /dev/sda： 30 GB 类似的信息，证明磁盘增加成功，位置确认。 ## 以下命令为交互式命令 fdisk /dev/sda # 输入 n 以创建新分区 n # 输入 p 以设置为主分区 p # 根据 fdisk -l 的信息，决定分区的编号，由于我的机器 fdisk -l 已经有 /dev/sda1 /dev/sda2 两个，所以此处输入 3 3 # 此处输入两次回车，以决定分区的开始和结束位置，默认使用剩余全部未分配空间 First cylinder.... 回车 Last cylinder.... 回车 # 此处输入 t，并输入 3 以选择我们上面步骤刚刚创建的分区 t 3 # 在 Hex code 的输入步骤，输入我们希望使用的 LVM 代码符号：8e 8e # 最后，输入 w 以使上述所有更改生效 w 在我的机器上，不需要重启已经可以使用 fdisk -l 查看到新创建的 /dev/sda3，但是推荐你在此处先重启一次，然后执行后续操作</description></item><item><title>使用 Ambari 安装 Hdp 集群</title><link>https://travisbikkle.github.io/2018/10/ambari-hdp-demo/</link><pubDate>Sat, 13 Oct 2018 11:24:08 +0800</pubDate><guid>https://travisbikkle.github.io/2018/10/ambari-hdp-demo/</guid><description>HDP 并不是 hadoop 的辅音简称，而是 Hortonworks 的产品 Hortonworks Data Platform 的简称，是包含 Hadoop 在内的一揽子解决方案。
前置要求： 3-4台 CentOS 7 机器，其中一台机器必须安装 Ambari 服务。教程参考link:/2018/10/13/centos 7 安装 apache-ambari/[centos 7 安装 apache-ambari]。安装 master 和 slave 的节点机器，内存最好不要小于 5G。
安装部件： 如前所述，此次安装包含如下服务（请按需安装）：
服务
版本
说明
HDFS
2.7.3
Apache Hadoop 分布式文件系统
YARN + MapReduce2
2.7.3
Apache Hadoop 下一代 MapReduce(YARN)
Tez
0.7.0
Tez 是运行在 YARN 之上的下一代 Hadoop 查询处理框架
Hive
1.2.1000
支持即席查询与大数据量分析和存储管理服务的数据仓库系统
HBase
1.1.2
非关系型分布式数据库，包括 Phoenix，一个为低延迟应用开发的高性能 sql 扩展
Pig
0.16.0
分析大数据量的脚本平台
Sqoop
1.4.6</description></item><item><title>免密码 Ssh 到其它机器</title><link>https://travisbikkle.github.io/2018/10/ssh-without-pass/</link><pubDate>Sat, 13 Oct 2018 11:24:07 +0800</pubDate><guid>https://travisbikkle.github.io/2018/10/ssh-without-pass/</guid><description>背景：在配置 hadoop 的时候这样设置会比较方便。 目标：A 机器上输入 ssh root@B 可以直接访问，不需要输入密码
步骤：
首先在 A 机器上生成密钥对，一路回车
ssh-keygen -t rsa 在 A 机器上输入，输入 B 机器的密码一次即可
ssh-copy-id -i ~/.ssh/id_rsa.pub root@B 所以同样的操作，B机器上可能还要再操作一遍，如果机器多了，也是很烦，因此，更懒人的做法是：
准备 xshell 5
打开多个机器的 ssh 会话窗口
配置好各个机器的 hostname
在 xshell 底部，&amp;quot;发送命令到所有窗口&amp;ldquo;这一行，依次输入 ssh-copy-id -i ~/.ssh/id_rsa.pub root@&amp;lt;主机名&amp;gt; 即可。</description></item><item><title>Vmware Clone Ubuntu. Ip 地址配置</title><link>https://travisbikkle.github.io/2018/10/vmware-clone-ubuntu18-ip-config/</link><pubDate>Sat, 13 Oct 2018 11:24:06 +0800</pubDate><guid>https://travisbikkle.github.io/2018/10/vmware-clone-ubuntu18-ip-config/</guid><description>在使用 VMware Workstation 克隆 Ubuntu Server 18.04 版本后，发现克隆前后的机器 IP 地址重复， 且无论如何更改虚拟网络设置（编辑-虚拟网络编辑器）都无效。由于 Ubuntu 18.04 采用 netplan (/etc/netplan) 而不是先前版本的 /etc/network/interfaces 管理网卡设置，因此通过如下方法，将机器 IP 地址更改为静态获取，可以解决此问题。
1. vi /etc/netplan/50-cloud-init.yaml (此文件名可能会变化).
network: ethernets: ens33: dhcp4: no dhcp6: no addresses: [192.168.44.129/24,] gateway4: 192.168.44.1 nameservers: addresses: [8.8.8.8, 8.8.4.4] 2. 更改后，执行.
&amp;gt;netplan apply &amp;gt;reboot</description></item><item><title>Ubuntu . 更改 Hostname</title><link>https://travisbikkle.github.io/2018/10/ubuntu18-hostname/</link><pubDate>Sat, 13 Oct 2018 11:24:04 +0800</pubDate><guid>https://travisbikkle.github.io/2018/10/ubuntu18-hostname/</guid><description>vi /etc/cloud/cloud.cfg #preserve_hostname: false ---&amp;gt; 改成 true vi /etc/hostname reboot</description></item></channel></rss>